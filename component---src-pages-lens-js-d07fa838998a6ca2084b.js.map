{"version":3,"sources":["webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/browser.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/inferno.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/magma.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/plasma.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/utils/hex2rgb.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/utils/interpolate.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/utils/rgb2hex.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/viridis.js","webpack://adam-coogan.github.io/./src/pages/lens.js","webpack://adam-coogan.github.io/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["module","exports","inferno","magma","plasma","viridis","hex","r","parseInt","slice","g","b","hex2rgb","rgb2hex","interpolate","a","ar","ag","ab","br","bg","bb","t","interpolateArray","scaleArr","N","length","intervalWidth","intervals","i","Error","Math","floor","intervalOffset","zeroPadHex","hexStr","rgb","map","ch","round","toString","join","Canvas","props","draw","rest","source","excluded","key","target","sourceKeys","Object","keys","indexOf","canvasRef","useRef","useEffect","canvas","current","ctx","getContext","clearRect","width","height","useCanvas","ref","ParamControls","label","value","set","min","max","style","display","flexDirection","alignItems","type","step","onChange","e","parseFloat","sersic","x","y","params","x_s","y_s","phi","q","index","r_e","I_e","k","dx","dy","x_maj","cos","sin","x_min","sqrt","exponent","exp","alpha_sie","x_l","y_l","r_ein","rx","ry","ang","atan2","alpha_lf_scale","atan","alpha_x_lf","alpha_y_lf","alpha_x","alpha_y","getCoord","idx","nPix","res","avgPool","array","upsample","downsampled","Float32Array","j","blockSum","iSub","jSub","getScaledImage","minVal","maxVal","image","createImageData","normalized","color","data","console","log","scale","scaled","original","c","i_original","j_original","idx_original","idx_buffer","nnInterp","useState","setXs","setYs","phi_s","setPhis","q_s","setQs","setIndex","setRe","phi_l","setPhil","q_l","setQl","setRein","setRes","canvasDim","lensParams","srcParams","dim","resFine","nPixFine","lensedFine","sourceFine","lensed","getLensedAndSource","PI","onClick","padding","save","fillStyle","translate","putImageData","restore","drawSource","strokeStyle","beginPath","ellipse","stroke","drawLensed"],"mappings":"mIAEAA,EAAOC,QAAU,CACfC,QAAS,EAAQ,MACjBC,MAAO,EAAQ,KACfC,OAAQ,EAAQ,MAChBC,QAAS,EAAQ,Q,kCCJnBL,EAAOC,QAAU,yBAAgD,EAAQ,Q,iCCAzED,EAAOC,QAAU,yBAAgD,EAAQ,O,kCCAzED,EAAOC,QAAU,yBAAgD,EAAQ,Q,8BCAzED,EAAOC,QAAU,SAAiBK,GAChC,MAAO,CAELC,EAAGC,SAASF,EAAIG,MAAM,EAAG,GAAI,IAAM,IACnCC,EAAGF,SAASF,EAAIG,MAAM,EAAG,GAAI,IAAM,IACnCE,EAAGH,SAASF,EAAIG,MAAM,EAAG,GAAI,IAAM,O,kCCLvC,IAAIG,EAAU,EAAQ,MAElBC,EAAU,EAAQ,MAEtB,SAASC,EAAYC,EAAGJ,GACtBI,EAAIH,EAAQG,GACZJ,EAAIC,EAAQD,GACZ,IAAIK,EAAKD,EAAER,EACPU,EAAKF,EAAEL,EACPQ,EAAKH,EAAEJ,EACPQ,EAAKR,EAAEJ,EAAIS,EACXI,EAAKT,EAAED,EAAIO,EACXI,EAAKV,EAAEA,EAAIO,EACf,OAAO,SAAUI,GACf,OAAOT,EAAQ,CACbN,EAAGS,EAAKG,EAAKG,EACbZ,EAAGO,EAAKG,EAAKE,EACbX,EAAGO,EAAKG,EAAKC,KAuBnBtB,EAAOC,QAAU,CACfa,YAAaA,EACbS,iBApBF,SAA0BC,GAMxB,IALA,IAAIC,EAAID,EAASE,OAAS,EAEtBC,EAAgB,EAAIF,EACpBG,EAAY,GAEPC,EAAI,EAAGA,GAAKJ,EAAGI,IACtBD,EAAUC,GAAKf,EAAYU,EAASK,GAAIL,EAASK,EAAI,IAGvD,OAAO,SAAUP,GACf,GAAIA,EAAI,GAAKA,EAAI,EAAG,MAAM,IAAIQ,MAAM,uCACpC,IAAID,EAAIE,KAAKC,MAAMV,EAAIG,GACnBQ,EAAiBJ,EAAIF,EACzB,OAAOC,EAAUC,GAAGP,EAAIK,EAAgBM,EAAiBN,O,8BCpC7D,SAASO,EAAWC,GAClB,MAAO,KAAK1B,MAAM0B,EAAOT,QAAUS,EAGrCnC,EAAOC,QAAU,SAAiBmC,GAEhC,MAAO,IAAM,CAACA,EAAI7B,EAAG6B,EAAI1B,EAAG0B,EAAIzB,GAC/B0B,KAAI,SAAUC,GACb,OAAOP,KAAKQ,MAAW,IAALD,GAAUE,SAAS,OAEtCH,IAAIH,GAAYO,KAAK,M,kCCVxBzC,EAAOC,QAAU,yBAAgD,EAAQ,Q,kHCcnEyC,EAAS,SAACC,GACd,IAAQC,EAAkBD,EAAlBC,KAASC,ECjBJ,SAAuCC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKnB,EAFLoB,EAAS,GACTC,EAAaC,OAAOC,KAAKN,GAG7B,IAAKjB,EAAI,EAAGA,EAAIqB,EAAWxB,OAAQG,IACjCmB,EAAME,EAAWrB,GACbkB,EAASM,QAAQL,IAAQ,IAC7BC,EAAOD,GAAOF,EAAOE,IAGvB,OAAOC,EDKP,CAA0BN,EAA1B,GACMW,EAfU,SAACV,GACjB,IAAMU,GAAYC,YAAO,MASzB,OAPAC,gBAAU,WACR,IAAMC,EAASH,EAAUI,QACnBC,EAAMF,EAAOG,WAAW,MAC9BD,EAAIE,UAAU,EAAG,EAAGJ,EAAOK,MAAOL,EAAOM,QACzCnB,EAAKe,KACJ,CAACf,IAEGU,EAKWU,CAAUpB,GAC5B,OAAO,wCAAQqB,IAAKX,GAAeT,KAG/BqB,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAOC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,IAAKC,EAA3B,EAA2BA,IAA3B,OACpB,uBAAKC,MAAO,CAAEC,QAAS,OAAQC,cAAe,MAAOC,WAAY,WAC/D,6BAAQR,GACR,yBACES,KAAK,OACLN,IAAKA,EACLC,IAAKA,EACLM,KAAK,MACLT,MAAOA,EACPU,SAAU,SAACC,GAAD,OAAOV,EAAIW,WAAWD,EAAE9B,OAAOmB,WAE3C,yBACEQ,KAAK,QACLN,IAAKA,EACLC,IAAKA,EACLM,KAAK,MACLT,MAAOA,EACPU,SAAU,SAACC,GAAD,OAAOV,EAAIW,WAAWD,EAAE9B,OAAOmB,aA6BzCa,EAAS,SAACC,EAAGC,EAAGC,GACpB,IAAWC,EAAyCD,EAA5CF,EAAWI,EAAiCF,EAApCD,EAAQI,EAA4BH,EAA5BG,IAAKC,EAAuBJ,EAAvBI,EAAGC,EAAoBL,EAApBK,MAAOC,EAAaN,EAAbM,IAAKC,EAAQP,EAARO,IACtCC,EAAI,EAAIH,EAAQ,EAAI,EAAI,EAAI,IAAMA,EAAQ,GAAK,MAAL,SAAaA,EAAS,GAChEI,EAAKX,EAAIG,EACTS,EAAKX,EAAIG,EACTS,EAAQF,EAAK9D,KAAKiE,IAAIT,GAAOO,EAAK/D,KAAKkE,IAAIV,GAC3CW,GAASL,EAAK9D,KAAKkE,IAAIV,GAAOO,EAAK/D,KAAKiE,IAAIT,GAC5ChF,EAAIwB,KAAKoE,KAAK,SAAAJ,EAAS,GAAIP,EAAI,SAAAU,EAAS,GAAIV,GAAKE,EACjDU,GAAYR,GAAK,SAAArF,EAAM,EAAIkF,GAAS,GAC1C,OAAOE,EAAM5D,KAAKsE,IAAID,IAMlBE,EAAY,SAACpB,EAAGC,EAAGC,GACvB,IAAWmB,EAA+BnB,EAAlCF,EAAWsB,EAAuBpB,EAA1BD,EAAQI,EAAkBH,EAAlBG,IAAKC,EAAaJ,EAAbI,EAAGiB,EAAUrB,EAAVqB,MAG1BZ,EAAKX,EAAIqB,EACTT,EAAKX,EAAIqB,EACTE,GAAMb,EAAK9D,KAAKiE,IAAIT,GAAOO,EAAK/D,KAAKkE,IAAIV,IAAQxD,KAAKoE,KAAKX,GAC3DmB,IAAOd,EAAK9D,KAAKkE,IAAIV,GAAOO,EAAK/D,KAAKiE,IAAIT,IAAQxD,KAAKoE,KAAKX,GAC5DoB,EAAM7E,KAAK8E,MAAMF,EAAID,GAGrBI,EACJ,EACAL,EACA1E,KAAKoE,KAAKX,GAAK,WAAIA,EAAK,KACxBzD,KAAKgF,KAAKhF,KAAKoE,MAAM,EAAIX,IAAM,EAAIA,KAC/BwB,EAAaF,EAAiB/E,KAAKiE,IAAIY,GACvCK,EAAaH,EAAiB/E,KAAKkE,IAAIW,GAM7C,MAAO,CAAEM,QAHOF,EAAajF,KAAKiE,IAAIT,GAAO0B,EAAalF,KAAKkE,IAAIV,GAGjD4B,QAFFF,EAAalF,KAAKiE,IAAIT,GAAOyB,EAAajF,KAAKkE,IAAIV,KAK/D6B,EAAW,SAACC,EAAKC,EAAMC,GAAZ,OACZD,EAAO,GAAKC,EAAO,GAAO,EAAIF,GAAQC,EAAO,GAAK,IAMjDE,EAAU,SAACC,EAAOH,EAAMI,GAE5B,IADA,IAAMC,EAAc,IAAIC,aAAJ,SAAiBN,EAAQ,IACpCzF,EAAI,EAAGA,EAAIyF,EAAMzF,GAAK,EAC7B,IAAK,IAAIgG,EAAI,EAAGA,EAAIP,EAAMO,GAAK,EAAG,CAGhC,IADA,IAAIC,EAAW,EACNC,EAAO,EAAGA,EAAOL,EAAUK,GAAQ,EAC1C,IAAK,IAAIC,EAAO,EAAGA,EAAON,EAAUM,GAAQ,EAC1CF,GACEL,EACEH,EAAOI,GAAY7F,EAAI6F,EAAWK,IAASF,EAAIH,EAAWM,IAIlEL,EAAYL,EAAOzF,EAAIgG,GAAKC,EAAQ,SAAGJ,EAAY,GAGvD,OAAOC,GAwCHM,EAAiB,SAACR,EAAOS,EAAQC,EAAQxE,GAI7C,IAFA,IAAM2D,EAAOvF,KAAKoE,KAAKsB,EAAM/F,QACvB0G,EAAQzE,EAAI0E,gBAAgBf,EAAMA,GAC/BzF,EAAI,EAAGA,EAAIyF,EAAMzF,GAAK,EAC7B,IAAK,IAAIgG,EAAI,EAAGA,EAAIP,EAAMO,GAAK,EAAG,CAChC,IAAIR,EAAMC,EAAOzF,EAAIgG,EACjBS,GAAcb,EAAMJ,GAAOa,IAAWC,EAASD,GAC/CK,GAAQlI,aAAQ0B,KAAKwC,IAAI,EAAGxC,KAAKuC,IAAI,EAAGgE,KAC5CF,EAAMI,KAAK,EAAInB,EAAM,GAAK7G,SAAS+H,EAAM9H,MAAM,EAAG,GAAI,IACtD2H,EAAMI,KAAK,EAAInB,EAAM,GAAK7G,SAAS+H,EAAM9H,MAAM,EAAG,GAAI,IACtD2H,EAAMI,KAAK,EAAInB,EAAM,GAAK7G,SAAS+H,EAAM9H,MAAM,EAAG,GAAI,IACtD2H,EAAMI,KAAK,EAAInB,EAAM,GAAK,IAG9BoB,QAAQC,IAAI,aAYZ,IAAMC,EAAQ5G,KAAKQ,MAAMoB,EAAIF,OAAOK,MAAQwD,GACtCsB,EAASjF,EAAI0E,gBAAgBf,EAAOqB,EAAOrB,EAAOqB,GAGxD,OA7Je,SAACE,EAAU5F,GAE1B,IADA,IAAM0F,EAAQ1F,EAAOa,MAAQ+E,EAAS/E,MAC7BjC,EAAI,EAAGA,EAAIoB,EAAOa,MAAOjC,GAAK,EACrC,IAAK,IAAIgG,EAAI,EAAGA,EAAI5E,EAAOc,OAAQ8D,GAAK,EACtC,IAAK,IAAIiB,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAE7B,IAAIC,EAAahH,KAAKC,MAAMH,EAAI8G,GAC5BK,EAAajH,KAAKC,MAAM6F,EAAIc,GAC5BM,EAAeF,EAAaF,EAAS/E,MAAQ,EAAiB,EAAbkF,EAAiBF,EAElEI,EAAarH,EAAIoB,EAAOa,MAAQ,EAAQ,EAAJ+D,EAAQiB,EAEhD7F,EAAOuF,KAAKU,GAAcL,EAASL,KAAKS,IA+I9CE,CAASf,EAAOQ,GAETA,GAkNT,EArKa,WAEX,OAAqBQ,cAAS,KAAvB/D,EAAP,KAAYgE,EAAZ,KACA,GAAqBD,cAAS,IAAvB9D,EAAP,KAAYgE,EAAZ,KACA,GAAyBF,cAAS,IAA3BG,EAAP,KAAcC,EAAd,KACA,GAAqBJ,cAAS,IAAvBK,EAAP,KAAYC,EAAZ,KACA,GAA0BN,cAAS,GAA5B3D,EAAP,KAAckE,EAAd,KACA,GAAqBP,cAAS,GAAvB1D,EAAP,KAAYkE,EAAZ,KACA,GAAqBR,cAAS,KAAvBzD,EAAP,KAIA,GAJA,MAIyByD,cAAS,IAA3BS,EAAP,KAAcC,EAAd,KACA,GAAqBV,cAAS,KAAvBW,EAAP,KAAYC,EAAZ,KACA,GAAyBZ,cAAS,KAA3B3C,EAAP,KAAcwD,EAAd,KAEA,GAAsBb,cAAS,IAAxB7B,EAAP,KAAY2C,EAAZ,KAIMC,EAAY,IAElB1B,QAAQC,IAAR,WAAuBjC,EAAvB,WAAuCsD,GAGvC,IASMK,EAAa,CACjBlF,EAzBU,EA0BVC,EAzBU,EA0BVI,IAAKsE,EACLrE,EAAGuE,EACHtD,SAIF,EAzJyB,SAAC4D,EAAWD,EAAY7C,EAAK+C,EAAK5C,GAQ3D,IAPA,IAAMJ,EAAOvF,KAAKQ,MAAM+H,EAAM/C,GACxBgD,EAAUhD,EAAMG,EAChB8C,EAAWlD,EAAOI,EAGlB+C,EAAa,IAAI7C,aAAJ,SAAiB4C,EAAY,IAC1CE,EAAa,IAAI9C,aAAJ,SAAiB4C,EAAY,IACvC3I,EAAI,EAAGA,EAAI2I,EAAU3I,GAAK,EACjC,IAAK,IAAIgG,EAAI,EAAGA,EAAI2C,EAAU3C,GAAK,EAAG,CAEpC,IAAI3C,EAAIkC,EAASS,EAAG2C,EAAUD,GAC1BpF,GAAKiC,EAASvF,EAAG2I,EAAUD,GAE/BG,EAAWF,EAAW3I,EAAIgG,GAAK5C,EAAOC,EAAGC,EAAGkF,GAE5C,MAA6B/D,EAAUpB,EAAGC,EAAGiF,GAArClD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QACjBsD,EAAWD,EAAW3I,EAAIgG,GAAK5C,EAC7BC,EAAIgC,EACJ/B,EAAIgC,EACJkD,GAKN,MAAO,CACLM,OAAQnD,EAAQiD,EAAYnD,EAAMI,GAClC5E,OAAQ0E,EAAQkD,EAAYpD,EAAMI,IA8HTkD,CAlBT,CAChB1F,EAAGG,EACHF,EAAGG,EACHC,IAAKgE,EACL/D,EAAGiE,EACHhE,QACAC,MACAC,OAaAyE,EACA7C,EA5BU,EACK,GAwBToD,EAAR,EAAQA,OAAQ7H,EAAhB,EAAgBA,OAUhB,OACE,uBACE0B,MAAO,CAAEC,QAAS,OAAQC,cAAe,MAAOC,WAAY,WAE5D,uBACEH,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,WAAY,WAGd,2BACE,kCAGA,gBAACT,EAAD,CACEC,MAAM,QACNC,MAAOyF,EACPxF,IAAKyF,EACLxF,KAAMvC,KAAK8I,GACXtG,IAAKxC,KAAK8I,KAEZ,gBAAC3G,EAAD,CACEC,MAAM,MACNC,MAAO2F,EACP1F,IAAK2F,EACL1F,IAAK,IACLC,IAAK,QAEP,gBAACL,EAAD,CACEC,MAAM,QACNC,MAAOqC,EACPpC,IAAK4F,EACL3F,IAAK,KACLC,IAAK,OAGT,2BACE,oCACA,gBAACL,EAAD,CAAeC,MAAM,MAAMC,MAAOiB,EAAKhB,IAAKgF,EAAO/E,KAAM,EAAGC,IAAK,IACjE,gBAACL,EAAD,CAAeC,MAAM,MAAMC,MAAOkB,EAAKjB,IAAKiF,EAAOhF,KAAM,EAAGC,IAAK,IACjE,gBAACL,EAAD,CACEC,MAAM,QACNC,MAAOmF,EACPlF,IAAKmF,EACLlF,KAAMvC,KAAK8I,GACXtG,IAAKxC,KAAK8I,KAEZ,gBAAC3G,EAAD,CACEC,MAAM,MACNC,MAAOqF,EACPpF,IAAKqF,EACLpF,IAAK,IACLC,IAAK,QAEP,gBAACL,EAAD,CACEC,MAAM,QACNC,MAAOqB,EACPpB,IAAKsF,EACLrF,IAAK,GACLC,IAAK,KAEP,gBAACL,EAAD,CACEC,MAAM,MACNC,MAAOsB,EACPrB,IAAKuF,EACLtF,IAAK,KACLC,IAAK,MAGT,2BACE,uCACA,2CACA,uBACEC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,WAAY,WAGd,0BAAQmG,QAAS,kBAAMZ,EAAO,QAA9B,OACA,0BAAQY,QAAS,kBAAMZ,EAAO,QAA9B,QACA,0BAAQY,QAAS,kBAAMZ,EAAO,OAA9B,0BACA,0BAAQY,QAAS,kBAAMZ,EAAO,MAA9B,UACA,0BAAQY,QAAS,kBAAMZ,EAAO,MAA9B,wBAIN,2BACE,oCACA,gBAACxH,EAAD,CACE8B,MAAO,CAAEuG,QAAS,QAClBnI,KAAM,SAACe,GAAD,OA3LG,SAACb,EAAQoF,EAAQC,EAAQxE,GAC1CA,EAAIqH,OAEJrH,EAAIsH,UAAY,UAChBtH,EAAIuH,UAAUvH,EAAIF,OAAOK,MAAQ,EAAGH,EAAIF,OAAOM,OAAS,GAGxD,IAAMqE,EAAQH,EAAenF,EAAQoF,EAAQC,EAAQxE,GACrDA,EAAIwH,aAAa/C,EAAO,EAAG,GAE3BzE,EAAIyH,UAiLmBC,CAAWvI,EA/FnB,EACA,GA8F2Ca,IAClDG,MAAOqG,EACPpG,OAAQoG,KAGZ,2BACE,yCACA,gBAACzH,EAAD,CACE8B,MAAO,CAAEuG,QAAS,QAClBnI,KAAM,SAACe,GAAD,OAvLG,SAACgH,EAAQP,EAAY7C,EAAKW,EAAQC,EAAQxE,GAC3DA,EAAIqH,OAEJrH,EAAIsH,UAAY,UAChBtH,EAAIuH,UAAUvH,EAAIF,OAAOK,MAAQ,EAAGH,EAAIF,OAAOM,OAAS,GAGxD,IAAMqE,EAAQH,EAAe0C,EAAQzC,EAAQC,EAAQxE,GACrDA,EAAIwH,aAAa/C,EAAO,EAAG,GAG3B,IAAMd,EAAOvF,KAAKoE,KAAKwE,EAAOjJ,QACxBiH,EAAQ5G,KAAKQ,MAAMoB,EAAIF,OAAOK,MAAQwD,GAC5C3D,EAAI2H,YAAc,UAClB3H,EAAI4H,YACJ5H,EAAI6H,QACFpB,EAAWlF,EACXkF,EAAWjF,EACViF,EAAW3D,MAAQ2D,EAAW5E,EAAI+B,EAAOoB,EACxCyB,EAAW3D,MAAQ2D,EAAW5E,EAAK+B,EAAOoB,GAC3CyB,EAAW7E,IACZ,EACA,EAAIxD,KAAK8I,IAEXlH,EAAI8H,SAEJ9H,EAAIyH,UA8JMM,CAAWf,EAAQP,EAAY7C,EAzG1B,EACA,GAwG+C5D,IAEtDG,MAAOqG,EACPpG,OAAQoG,Q","file":"component---src-pages-lens-js-d07fa838998a6ca2084b.js","sourcesContent":["'use strict';\n\nmodule.exports = {\n  inferno: require('./inferno'),\n  magma: require('./magma'),\n  plasma: require('./plasma'),\n  viridis: require('./viridis')\n};","'use strict';\n\nmodule.exports = require('./utils/interpolate').interpolateArray(require('./hex/inferno.json'));","'use strict';\n\nmodule.exports = require('./utils/interpolate').interpolateArray(require('./hex/magma.json'));","'use strict';\n\nmodule.exports = require('./utils/interpolate').interpolateArray(require('./hex/plasma.json'));","'use strict';\n\nmodule.exports = function hex2rgb(hex) {\n  return {\n    // skip # at position 0\n    r: parseInt(hex.slice(1, 3), 16) / 255,\n    g: parseInt(hex.slice(3, 5), 16) / 255,\n    b: parseInt(hex.slice(5, 7), 16) / 255\n  };\n};","'use strict';\n\nvar hex2rgb = require('./hex2rgb');\n\nvar rgb2hex = require('./rgb2hex');\n\nfunction interpolate(a, b) {\n  a = hex2rgb(a);\n  b = hex2rgb(b);\n  var ar = a.r;\n  var ag = a.g;\n  var ab = a.b;\n  var br = b.r - ar;\n  var bg = b.g - ag;\n  var bb = b.b - ab;\n  return function (t) {\n    return rgb2hex({\n      r: ar + br * t,\n      g: ag + bg * t,\n      b: ab + bb * t\n    });\n  };\n}\n\nfunction interpolateArray(scaleArr) {\n  var N = scaleArr.length - 2; // -1 for spacings, -1 for number of interpolate fns\n\n  var intervalWidth = 1 / N;\n  var intervals = [];\n\n  for (var i = 0; i <= N; i++) {\n    intervals[i] = interpolate(scaleArr[i], scaleArr[i + 1]);\n  }\n\n  return function (t) {\n    if (t < 0 || t > 1) throw new Error('Outside the allowed range of [0, 1]');\n    var i = Math.floor(t * N);\n    var intervalOffset = i * intervalWidth;\n    return intervals[i](t / intervalWidth - intervalOffset / intervalWidth);\n  };\n}\n\nmodule.exports = {\n  interpolate: interpolate,\n  interpolateArray: interpolateArray\n};","'use strict';\n\nfunction zeroPadHex(hexStr) {\n  return '00'.slice(hexStr.length) + hexStr;\n}\n\nmodule.exports = function rgb2hex(rgb) {\n  // Map channel triplet into hex color code\n  return '#' + [rgb.r, rgb.g, rgb.b] // Convert to hex (map [0, 1] => [0, 255] => Z => [0x0, 0xff])\n  .map(function (ch) {\n    return Math.round(ch * 255).toString(16);\n  }) // Make sure each channel is two digits long\n  .map(zeroPadHex).join('');\n};","'use strict';\n\nmodule.exports = require('./utils/interpolate').interpolateArray(require('./hex/viridis.json'));","import React, { useEffect, useRef, useState } from \"react\";\nimport { viridis } from \"scale-color-perceptual\";\n\nconst useCanvas = (draw) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    draw(ctx);\n  }, [draw]);\n\n  return canvasRef;\n};\n\nconst Canvas = (props) => {\n  const { draw, ...rest } = props;\n  const canvasRef = useCanvas(draw);\n  return <canvas ref={canvasRef} {...rest} />;\n};\n\nconst ParamControls = ({ label, value, set, min, max }) => (\n  <div style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}>\n    <label>{label}</label>\n    <input\n      type=\"text\"\n      min={min}\n      max={max}\n      step=\"any\"\n      value={value}\n      onChange={(e) => set(parseFloat(e.target.value))}\n    />\n    <input\n      type=\"range\"\n      min={min}\n      max={max}\n      step=\"any\"\n      value={value}\n      onChange={(e) => set(parseFloat(e.target.value))}\n    />\n  </div>\n);\n\n/*\n * Upsamples an image to a larger grid.\n */\nconst nnInterp = (original, target) => {\n  const scale = target.width / original.width;\n  for (let i = 0; i < target.width; i += 1) {\n    for (let j = 0; j < target.height; j += 1) {\n      for (let c = 0; c < 4; c += 1) {\n        // Find indices in original array\n        let i_original = Math.floor(i / scale);\n        let j_original = Math.floor(j / scale);\n        let idx_original = i_original * original.width * 4 + j_original * 4 + c;\n\n        let idx_buffer = i * target.width * 4 + j * 4 + c;\n\n        target.data[idx_buffer] = original.data[idx_original];\n      }\n    }\n  }\n};\n\n/*\n * Gets intensity of a Sersic source.\n */\nconst sersic = (x, y, params) => {\n  const { x: x_s, y: y_s, phi, q, index, r_e, I_e } = params;\n  const k = 2 * index - 1 / 3 + 4 / 405 / index + 46 / 25515 / index ** 2;\n  const dx = x - x_s;\n  const dy = y - y_s;\n  const x_maj = dx * Math.cos(phi) + dy * Math.sin(phi);\n  const x_min = -dx * Math.sin(phi) + dy * Math.cos(phi);\n  const r = Math.sqrt(x_maj ** 2 * q + x_min ** 2 / q) / r_e;\n  const exponent = -k * (r ** (1 / index) - 1);\n  return I_e * Math.exp(exponent);\n};\n\n/*\n * Gets deflection field for a singular isothermal ellipsoid.\n */\nconst alpha_sie = (x, y, params) => {\n  const { x: x_l, y: y_l, phi, q, r_ein } = params;\n\n  // Transform to elliptical coordinates\n  const dx = x - x_l;\n  const dy = y - y_l;\n  const rx = (dx * Math.cos(phi) + dy * Math.sin(phi)) * Math.sqrt(q);\n  const ry = (-dx * Math.sin(phi) + dy * Math.cos(phi)) / Math.sqrt(q);\n  const ang = Math.atan2(ry, rx);\n\n  // Deflection field in lens frame\n  const alpha_lf_scale =\n    2 *\n    r_ein *\n    Math.sqrt(q / (1 - q ** 2)) *\n    Math.atan(Math.sqrt((1 - q) / (1 + q)));\n  const alpha_x_lf = alpha_lf_scale * Math.cos(ang);\n  const alpha_y_lf = alpha_lf_scale * Math.sin(ang);\n\n  // Deflection field in image frame\n  const alpha_x = alpha_x_lf * Math.cos(phi) - alpha_y_lf * Math.sin(phi);\n  const alpha_y = alpha_y_lf * Math.cos(phi) + alpha_x_lf * Math.sin(phi);\n\n  return { alpha_x, alpha_y };\n};\n\nconst getCoord = (idx, nPix, res) =>\n  (((nPix - 1) * res) / 2) * ((2 * idx) / (nPix - 1) - 1);\n\n/*\n * Average-pools an array of size (nPix * upsample, nPix * upsample) to size\n * (nPix, nPix).\n */\nconst avgPool = (array, nPix, upsample) => {\n  const downsampled = new Float32Array(nPix ** 2);\n  for (let i = 0; i < nPix; i += 1) {\n    for (let j = 0; j < nPix; j += 1) {\n      // Loop over subblock of fine grid\n      let blockSum = 0;\n      for (let iSub = 0; iSub < upsample; iSub += 1) {\n        for (let jSub = 0; jSub < upsample; jSub += 1) {\n          blockSum +=\n            array[\n              nPix * upsample * (i * upsample + iSub) + (j * upsample + jSub)\n            ];\n        }\n      }\n      downsampled[nPix * i + j] = blockSum / upsample ** 2;\n    }\n  }\n  return downsampled;\n};\n\n/*\n * Perform lensing calculations.\n */\nconst getLensedAndSource = (srcParams, lensParams, res, dim, upsample) => {\n  const nPix = Math.round(dim / res);\n  const resFine = res / upsample;\n  const nPixFine = nPix * upsample;\n\n  // Get pixel values on fine grid\n  const lensedFine = new Float32Array(nPixFine ** 2);\n  const sourceFine = new Float32Array(nPixFine ** 2);\n  for (let i = 0; i < nPixFine; i += 1) {\n    for (let j = 0; j < nPixFine; j += 1) {\n      // Map index to coordinates, flipping y due to canvas coordinates\n      let x = getCoord(j, nPixFine, resFine);\n      let y = -getCoord(i, nPixFine, resFine);\n      // Source\n      sourceFine[nPixFine * i + j] = sersic(x, y, srcParams);\n      // Apply lensing equation\n      const { alpha_x, alpha_y } = alpha_sie(x, y, lensParams);\n      lensedFine[nPixFine * i + j] = sersic(\n        x - alpha_x,\n        y - alpha_y,\n        srcParams\n      );\n    }\n  }\n\n  return {\n    lensed: avgPool(lensedFine, nPix, upsample),\n    source: avgPool(sourceFine, nPix, upsample),\n  };\n};\n\n/*\n * Converts an array to a scaled grid of pixels in a canvas context.\n */\nconst getScaledImage = (array, minVal, maxVal, ctx) => {\n  // Convert flux array to color image\n  const nPix = Math.sqrt(array.length);\n  const image = ctx.createImageData(nPix, nPix);\n  for (let i = 0; i < nPix; i += 1) {\n    for (let j = 0; j < nPix; j += 1) {\n      let idx = nPix * i + j;\n      let normalized = (array[idx] - minVal) / (maxVal - minVal);\n      let color = viridis(Math.max(0, Math.min(1, normalized)));\n      image.data[4 * idx + 0] = parseInt(color.slice(1, 3), 16);\n      image.data[4 * idx + 1] = parseInt(color.slice(3, 5), 16);\n      image.data[4 * idx + 2] = parseInt(color.slice(5, 7), 16);\n      image.data[4 * idx + 3] = 256;\n    }\n  }\n  console.log(\"i'm here!\");\n  // for (let idx = 0; idx < image.data.length; idx += 4) {\n  //   let normalized = (array[idx / 4] - minVal) / (maxVal - minVal);\n  //   let color = viridis(Math.max(0, Math.min(1, normalized)));\n  //   image.data[idx + 0] = parseInt(color.slice(1, 3), 16);\n  //   image.data[idx + 1] = parseInt(color.slice(3, 5), 16);\n  //   image.data[idx + 2] = parseInt(color.slice(5, 7), 16);\n  //   image.data[idx + 3] = 256;\n  // }\n\n  // Upsample to make pixels visible and draw\n  // TODO: there should be a better way to do this.\n  const scale = Math.round(ctx.canvas.width / nPix);\n  const scaled = ctx.createImageData(nPix * scale, nPix * scale);\n  nnInterp(image, scaled);\n\n  return scaled;\n};\n\nconst drawSource = (source, minVal, maxVal, ctx) => {\n  ctx.save();\n\n  ctx.fillStyle = \"#000000\";\n  ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2);\n\n  // Draw source\n  const image = getScaledImage(source, minVal, maxVal, ctx);\n  ctx.putImageData(image, 0, 0);\n\n  ctx.restore();\n};\n\nconst drawLensed = (lensed, lensParams, res, minVal, maxVal, ctx) => {\n  ctx.save();\n\n  ctx.fillStyle = \"#000000\";\n  ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2);\n\n  // Draw observation\n  const image = getScaledImage(lensed, minVal, maxVal, ctx);\n  ctx.putImageData(image, 0, 0);\n\n  // Draw critical curve\n  const nPix = Math.sqrt(lensed.length);\n  const scale = Math.round(ctx.canvas.width / nPix);\n  ctx.strokeStyle = \"#FF0000\";\n  ctx.beginPath();\n  ctx.ellipse(\n    lensParams.x,\n    lensParams.y,\n    (lensParams.r_ein / lensParams.q / res) * scale,\n    ((lensParams.r_ein * lensParams.q) / res) * scale,\n    -lensParams.phi,\n    0,\n    2 * Math.PI\n  );\n  ctx.stroke();\n\n  ctx.restore();\n};\n\nconst Lens = () => {\n  // Source parameters\n  const [x_s, setXs] = useState(0.05);\n  const [y_s, setYs] = useState(0.1);\n  const [phi_s, setPhis] = useState(0.7);\n  const [q_s, setQs] = useState(0.5);\n  const [index, setIndex] = useState(4.0);\n  const [r_e, setRe] = useState(5.0);\n  const [I_e, setIe] = useState(0.05);\n  // Lens parameters\n  const x_l = 0.0; // const [x_l, setXl] = useState(0.0);\n  const y_l = 0.0; // const [y_l, setYl] = useState(0.0);\n  const [phi_l, setPhil] = useState(1.0);\n  const [q_l, setQl] = useState(0.75);\n  const [r_ein, setRein] = useState(1.5);\n  // Observation parameters\n  const [res, setRes] = useState(0.1);\n  // Misc constants\n  const dim = 5; // arcsec\n  const upsample = 4;\n  const canvasDim = 400;\n\n  console.log(`r_ein = ${r_ein}, q_l = ${q_l}`);\n\n  // Package everything up\n  const srcParams = {\n    x: x_s,\n    y: y_s,\n    phi: phi_s,\n    q: q_s,\n    index,\n    r_e,\n    I_e,\n  };\n  const lensParams = {\n    x: x_l,\n    y: y_l,\n    phi: phi_l,\n    q: q_l,\n    r_ein,\n  };\n\n  // Do the lensing\n  const { lensed, source } = getLensedAndSource(\n    srcParams,\n    lensParams,\n    res,\n    dim,\n    upsample\n  );\n  const minVal = 0.0; // Math.min(...lensed);\n  const maxVal = 18; // sersic(x_s, y_s, srcParams) / 10; // Math.max(...lensed);\n\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <div>\n          <h2>Lens</h2>\n          {/*<ParamControls label=\"x_l\" value={x_l} set={setXl} min={-5} max={5} />*/}\n          {/*<ParamControls label=\"y_l\" value={y_l} set={setYl} min={-5} max={5} />*/}\n          <ParamControls\n            label=\"phi_l\"\n            value={phi_l}\n            set={setPhil}\n            min={-Math.PI}\n            max={Math.PI}\n          />\n          <ParamControls\n            label=\"q_l\"\n            value={q_l}\n            set={setQl}\n            min={0.15}\n            max={0.9999}\n          />\n          <ParamControls\n            label=\"r_ein\"\n            value={r_ein}\n            set={setRein}\n            min={0.0001}\n            max={2.5}\n          />\n        </div>\n        <div>\n          <h2>Source</h2>\n          <ParamControls label=\"x_s\" value={x_s} set={setXs} min={-5} max={5} />\n          <ParamControls label=\"y_s\" value={y_s} set={setYs} min={-5} max={5} />\n          <ParamControls\n            label=\"phi_s\"\n            value={phi_s}\n            set={setPhis}\n            min={-Math.PI}\n            max={Math.PI}\n          />\n          <ParamControls\n            label=\"q_s\"\n            value={q_s}\n            set={setQs}\n            min={0.15}\n            max={0.9999}\n          />\n          <ParamControls\n            label=\"index\"\n            value={index}\n            set={setIndex}\n            min={0.5}\n            max={10}\n          />\n          <ParamControls\n            label=\"r_e\"\n            value={r_e}\n            set={setRe}\n            min={0.0001}\n            max={10}\n          />\n        </div>\n        <div>\n          <h2>Telescope</h2>\n          <label>Resolution</label>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n            }}\n          >\n            <button onClick={() => setRes(0.012)}>ELT</button>\n            <button onClick={() => setRes(0.031)}>JWST</button>\n            <button onClick={() => setRes(0.05)}>Hubble Space Telescope</button>\n            <button onClick={() => setRes(0.1)}>Euclid</button>\n            <button onClick={() => setRes(0.7)}>Rubin Observatory</button>\n          </div>\n        </div>\n      </div>\n      <div>\n        <h2>Source</h2>\n        <Canvas\n          style={{ padding: \"10px\" }}\n          draw={(ctx) => drawSource(source, minVal, maxVal, ctx)}\n          width={canvasDim}\n          height={canvasDim}\n        />\n      </div>\n      <div>\n        <h2>Observation</h2>\n        <Canvas\n          style={{ padding: \"10px\" }}\n          draw={(ctx) =>\n            drawLensed(lensed, lensParams, res, minVal, maxVal, ctx)\n          }\n          width={canvasDim}\n          height={canvasDim}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Lens;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}