{"version":3,"sources":["webpack://adam-coogan.github.io/./src/utils/sersic.ts","webpack://adam-coogan.github.io/./src/utils/tnfw.ts","webpack://adam-coogan.github.io/./src/utils/model.ts","webpack://adam-coogan.github.io/./src/utils/sie.ts","webpack://adam-coogan.github.io/./src/pages/strong-lensing.tsx"],"names":["sersic","x","y","params","x_s","y_s","phi","q","index","r_e","I_e","k","dx","dy","x_maj","Math","cos","sin","x_min","r","sqrt","exponent","exp","Om0","rho_cr","dALens","Sigma_cr","PI","c_200c_to_delta_200c","c_200c","integral_to_c","log","M_200c_to_r_200c","M_200c","virialToScale","z","cond","alpha","beta","gamma","log_10_c200","log10","massConcentrationRelation","rho_s","r_s","srcParams","lensParams","shParams","res","dim","upsample","sigma_n","scaleSHParams","tau","lensed","evalOnGrid","x_l","y_l","r_ein","rx","ry","ang","atan2","alpha_lf_scale","atan","alpha_x_lf","alpha_y_lf","alpha_x","alpha_y","alpha_sie","alpha_x_ml","alpha_y_ml","theta_s","s","f","acos","acosh","abs","l","m","alpha_scale","alpha_tnfw","alpha_x_sh","alpha_y_sh","lensedNoisy","Float32Array","round","i","length","randn","Canvas","props","draw","rest","canvasRef","useRef","useEffect","canvas","current","ctx","getContext","clearRect","width","height","useCanvas","ref","ParamControls","label","value","set","min","max","description","labelBlock","style","flex","margin","data-tip","data-for","id","display","alignItems","minWidth","type","step","onChange","e","parseFloat","target","SourceControls","phiDeg","setX","setY","setPhiDeg","setQ","setIndex","setRe","LensControls","setRein","SHControls","setM200c","TelescopeControls","setSigmaN","setRes","onClick","useState","setXs","setYs","phi_sDeg","setPhisDeg","q_s","setQs","phi_lDeg","setPhilDeg","q_l","setQl","x_sh","setXsh","y_sh","setYsh","canvasDim","sersicParams","sieParams","tnfwParams","sourceImage","lensedImage","runLensModel","flexDirection","padding","minVal","maxVal","save","fillStyle","translate","image","getScaledImage","putImageData","restore","drawSource","imageSmoothingEnabled","nPix","scale","strokeStyle","beginPath","ellipse","stroke","arc","fill","drawLensed"],"mappings":"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","file":"component---src-pages-strong-lensing-tsx-b6fb4ad0ec598d45b07e.js","sourcesContent":["export interface SersicParams {\n  x: number;\n  y: number;\n  phi: number;\n  q: number;\n  index: number;\n  r_e: number;\n  I_e: number;\n}\n\n/*\n * Gets intensity of a Sersic source.\n */\nexport const sersic = (x: number, y: number, params: SersicParams) => {\n  const { x: x_s, y: y_s, phi, q, index, r_e, I_e } = params;\n  const k = 2 * index - 1 / 3 + 4 / 405 / index + 46 / 25515 / index ** 2;\n  const dx = x - x_s;\n  const dy = y - y_s;\n  const x_maj = dx * Math.cos(phi) + dy * Math.sin(phi);\n  const x_min = -dx * Math.sin(phi) + dy * Math.cos(phi);\n  const r = Math.sqrt(x_maj ** 2 * q + x_min ** 2 / q) / r_e;\n  const exponent = -k * (r ** (1 / index) - 1);\n  return I_e * Math.exp(exponent);\n};\n","// Constants\nconst s_min = 1e-12;\nconst G_over_c2 = 4.79e-20; // Mpc / MSol\nconst rho_cr_0 = 127052815397.49832; // MSol / Mpc**3\nconst Om0 = 0.30966;\nconst Delta = 200;\n// Lens constants\nconst zSrc = 2.5;\nconst zLens = 0.6;\nconst rho_cr = rho_cr_0 * (Om0 * (1 + zLens) ** 3 + (1 - Om0));\nconst dASrc = 1704.8621; // Mpc\nconst dALens = 1420.2484; // Mpc\nconst dComovingSrc = 5967.0171; // Mpc\nconst dComovingLens = 2272.3975; // Mpc\nconst dALS = (dComovingSrc - dComovingLens) / (1 + zSrc);\nconst Sigma_cr = 1 / ((4 * Math.PI * G_over_c2 * dALens * dALS) / dASrc);\n\nconst c_200c_to_delta_200c = (c_200c: number) => {\n  const integral_to_c = Math.log(1 + c_200c) - c_200c / (1 + c_200c);\n  return ((Delta / 3) * c_200c ** 3) / integral_to_c;\n};\n\nconst M_200c_to_r_200c = (M_200c: number) =>\n  (((3 / (4 * Math.PI)) * M_200c) / (Delta * rho_cr)) ** (1 / 3);\n\n/*\n * Redshift-dependent mass-concentration relation from Correa+ 2015.\n * https://arxiv.org/abs/1502.00391\n */\nconst massConcentrationRelation = (M_200c: number, z: number) => {\n  const cond = 4 - z;\n  const alpha =\n    cond >= 0\n      ? 1.7543 - 0.2766 * (1.0 + z) + 0.02039 * (1.0 + z) ** 2\n      : 1.3081 - 0.1078 * (1.0 + z) + 0.00398 * (1.0 + z) ** 2;\n  const beta =\n    cond >= 0\n      ? 0.2753 + 0.0035 * (1.0 + z) - 0.3038 * (1.0 + z) ** 0.0269\n      : 0.0223 - 0.0944 * (1.0 + z) ** -0.3907;\n  const gamma = cond >= 0 ? -0.01537 + 0.02102 * (1.0 + z) ** -0.1475 : 0;\n  const log_10_c200 =\n    alpha + beta * Math.log10(M_200c) * (1.0 + gamma * Math.log10(M_200c) ** 2);\n  return 10 ** log_10_c200;\n};\n\n/*\n * Convert M_200c to (rho_s, r_s) using default mass-concentration relation.\n */\nexport const virialToScale = (M_200c: number) => {\n  const c_200c = massConcentrationRelation(M_200c, zLens);\n  return {\n    rho_s: rho_cr * c_200c_to_delta_200c(c_200c),\n    r_s: M_200c_to_r_200c(M_200c) / c_200c,\n  };\n};\n\nexport interface TNFWVirialParams {\n  x: number;\n  y: number;\n  M_200c: number;\n  tau: number;\n}\n\nexport interface TNFWScaleParams {\n  x: number;\n  y: number;\n  rho_s: number;\n  r_s: number;\n  tau: number;\n}\n\nexport const alpha_tnfw = (x: number, y: number, params: TNFWScaleParams) => {\n  const { x: x_s, y: y_s, rho_s, r_s, tau } = params;\n  // Convert scale radius to angular scale\n  const theta_s = (r_s / dALens) * ((180 / Math.PI) * 60 ** 2); // arcsec\n\n  const dx = x - x_s;\n  const dy = y - y_s;\n  const s = Math.sqrt(dx ** 2 + dy ** 2) / theta_s;\n  const f =\n    (s >= 1 ? Math.acos(1 / s) : Math.acosh(1 / s)) /\n    Math.sqrt(Math.abs(s ** 2 - 1));\n  const l = Math.log((s + s_min) / (Math.sqrt(s ** 2 + tau ** 2) + tau));\n  const m =\n    ((4 * Math.PI * tau ** 2) / (tau ** 2 + 1) ** 2) *\n    ((tau ** 2 + 2 * s ** 2 - 1) * f +\n      Math.PI * tau +\n      (tau ** 2 - 1) * Math.log(tau) +\n      Math.sqrt(s ** 2 + tau ** 2) * (((tau ** 2 - 1) / tau) * l - Math.PI));\n  const k_s = (rho_s * r_s) / Sigma_cr;\n\n  const alpha_scale = (k_s * m) / Math.PI / (s + s_min) ** 2;\n  return { alpha_x: alpha_scale * dx, alpha_y: alpha_scale * dy };\n};\n","import { sersic, SersicParams } from \"./sersic\";\nimport { alpha_sie, SIEParams } from \"./sie\";\nimport { alpha_tnfw, TNFWVirialParams, virialToScale } from \"./tnfw\";\nimport { evalOnGrid, randn } from \"./utils\";\n\n/*\n * Perform lensing calculations.\n */\nconst runLensModel = (\n  srcParams: SersicParams,\n  lensParams: SIEParams,\n  shParams: TNFWVirialParams,\n  res: number,\n  dim: number,\n  upsample: number,\n  sigma_n: number\n) => {\n  // Convert virial to scale parameters\n  const scaleSHParams = {\n    x: shParams.x,\n    y: shParams.y,\n    tau: shParams.tau,\n    ...virialToScale(shParams.M_200c),\n  };\n\n  // Apply lensing equation\n  const lensFn = (x: number, y: number) => {\n    const { alpha_x: alpha_x_ml, alpha_y: alpha_y_ml } = alpha_sie(\n      x,\n      y,\n      lensParams\n    );\n    const { alpha_x: alpha_x_sh, alpha_y: alpha_y_sh } = alpha_tnfw(\n      x,\n      y,\n      scaleSHParams\n    );\n    const alpha_x = alpha_x_ml + alpha_x_sh;\n    const alpha_y = alpha_y_ml + alpha_y_sh;\n    return sersic(x - alpha_x, y - alpha_y, srcParams);\n  };\n\n  const lensed = evalOnGrid(res, dim, upsample, lensFn);\n\n  // Add noise if necessary\n  if (sigma_n <= 0) {\n    return lensed;\n  } else {\n    const lensedNoisy = new Float32Array(Math.round(dim / res) ** 2);\n    for (let i = 0; i < lensed.length; i += 1) {\n      lensedNoisy[i] = lensed[i] + sigma_n * randn();\n    }\n    return lensedNoisy;\n  }\n};\n\nexport default runLensModel;\n","export interface SIEParams {\n  x: number;\n  y: number;\n  phi: number;\n  q: number;\n  r_ein: number;\n}\n\n/*\n * Gets deflection field for a singular isothermal ellipsoid.\n */\nexport const alpha_sie = (x: number, y: number, params: SIEParams) => {\n  const { x: x_l, y: y_l, phi, q, r_ein } = params;\n\n  // Transform to elliptical coordinates\n  const dx = x - x_l;\n  const dy = y - y_l;\n  const rx = (dx * Math.cos(phi) + dy * Math.sin(phi)) * Math.sqrt(q);\n  const ry = (-dx * Math.sin(phi) + dy * Math.cos(phi)) / Math.sqrt(q);\n  const ang = Math.atan2(ry, rx);\n\n  // Deflection field in lens frame\n  const alpha_lf_scale =\n    2 *\n    r_ein *\n    Math.sqrt(q / (1 - q ** 2)) *\n    Math.atan(Math.sqrt((1 - q) / (1 + q)));\n  const alpha_x_lf = alpha_lf_scale * Math.cos(ang);\n  const alpha_y_lf = alpha_lf_scale * Math.sin(ang);\n\n  // Deflection field in image frame\n  const alpha_x = alpha_x_lf * Math.cos(phi) - alpha_y_lf * Math.sin(phi);\n  const alpha_y = alpha_y_lf * Math.cos(phi) + alpha_x_lf * Math.sin(phi);\n\n  return { alpha_x, alpha_y };\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport runLensModel from \"../utils/model\";\nimport { sersic } from \"../utils/sersic\";\nimport { SIEParams } from \"../utils/sie\";\nimport { TNFWVirialParams } from \"../utils/tnfw\";\nimport { evalOnGrid, getScaledImage } from \"../utils/utils\";\n\nconst useCanvas = (draw: (ctx: CanvasRenderingContext2D) => void) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    draw(ctx);\n  }, [draw]);\n\n  return canvasRef;\n};\n\ninterface CanvasProps {\n  draw: (ctx: CanvasRenderingContext2D) => void;\n  [rest: string]: any;\n}\n\nconst Canvas = (props: CanvasProps) => {\n  const { draw, ...rest } = props;\n  const canvasRef = useCanvas(draw);\n  return <canvas ref={canvasRef} {...rest} />;\n};\n\ninterface ParamControlsProps {\n  label: string;\n  value: number;\n  set: (newVal: number) => void;\n  min: number;\n  max: number;\n  description?: string;\n}\n\nconst ParamControls = ({\n  label,\n  value,\n  set,\n  min,\n  max,\n  description,\n}: ParamControlsProps) => {\n  const labelBlock = description ? (\n    <>\n      <label\n        style={{ flex: 2, margin: \"0.2rem\" }}\n        data-tip\n        data-for={description}\n      >\n        {label}\n      </label>\n      <ReactTooltip id={description}>{description}</ReactTooltip>{\" \"}\n    </>\n  ) : (\n    <label style={{ flex: 2, margin: \"0.2rem\" }}>{label}</label>\n  );\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n      }}\n    >\n      {labelBlock}\n      <input\n        style={{ flex: 1, margin: \"0.2rem\", minWidth: 0 }}\n        type=\"text\"\n        min={min}\n        max={max}\n        step={0.001}\n        value={value}\n        onChange={(e) => set(parseFloat(e.target.value))}\n      />\n      <input\n        style={{ flex: 3, margin: \"0.2rem\" }}\n        type=\"range\"\n        min={min}\n        max={max}\n        step={0.001}\n        value={value}\n        onChange={(e) => set(parseFloat(e.target.value))}\n      />\n    </div>\n  );\n};\n\nconst drawSource = (\n  sourceImage: Float32Array,\n  minVal: number,\n  maxVal: number,\n  ctx: CanvasRenderingContext2D\n) => {\n  ctx.save();\n\n  ctx.fillStyle = \"#000000\";\n  ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2);\n\n  // Draw source\n  const image = getScaledImage(sourceImage, minVal, maxVal, ctx);\n  ctx.putImageData(image, 0, 0);\n\n  ctx.restore();\n};\n\nconst drawLensed = (\n  lensedImage: Float32Array,\n  sieParams: SIEParams,\n  tnfwParams: TNFWVirialParams,\n  res: number,\n  minVal: number,\n  maxVal: number,\n  ctx: CanvasRenderingContext2D\n) => {\n  ctx.save();\n\n  ctx.fillStyle = \"#000000\";\n  ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2);\n  ctx.imageSmoothingEnabled = false;\n\n  // Draw observation\n  const image = getScaledImage(lensedImage, minVal, maxVal, ctx);\n  ctx.putImageData(image, 0, 0);\n\n  // Draw critical curve\n  const nPix = Math.sqrt(lensedImage.length);\n  const scale = ctx.canvas.width / nPix;\n  ctx.strokeStyle = \"#FF0000\";\n  ctx.beginPath();\n  ctx.ellipse(\n    sieParams.x,\n    sieParams.y,\n    (sieParams.r_ein / sieParams.q / res) * scale,\n    ((sieParams.r_ein * sieParams.q) / res) * scale,\n    -sieParams.phi,\n    0,\n    2 * Math.PI\n  );\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.arc(\n    (tnfwParams.x * scale) / res,\n    -(tnfwParams.y * scale) / res, // since axis is flipped\n    3,\n    0,\n    2 * Math.PI,\n    false\n  );\n  ctx.fillStyle = \"#FF0000\";\n  ctx.fill();\n\n  ctx.restore();\n};\n\nconst SourceControls = ({\n  x,\n  y,\n  phiDeg,\n  q,\n  index,\n  r_e,\n  setX,\n  setY,\n  setPhiDeg,\n  setQ,\n  setIndex,\n  setRe,\n}) => (\n  <div>\n    <h2>Source parameters</h2>\n    <ParamControls\n      label=\"Position (x) ['']\"\n      value={x}\n      set={setX}\n      min={-5}\n      max={5}\n    />\n    <ParamControls\n      label=\"Position (y) ['']\"\n      value={y}\n      set={setY}\n      min={-5}\n      max={5}\n    />\n    <ParamControls\n      label=\"Orientation (ϕ) [deg]\"\n      value={phiDeg}\n      set={setPhiDeg}\n      min={-180}\n      max={180}\n      description=\"Orientation of source relative to x-axis\"\n    />\n    <ParamControls\n      label=\"Ellipticity (q)\"\n      value={q}\n      set={setQ}\n      min={0.15}\n      max={0.9999}\n      description=\"Controls whether source is circular (q=1) or elliptical (q=0)\"\n    />\n    <ParamControls\n      label=\"Index\"\n      value={index}\n      set={setIndex}\n      min={0.5}\n      max={5}\n      description=\"Higher values cause source brightness to decrease sharply with radius\"\n    />\n    <ParamControls\n      label=\"Size (r_e) ['']\"\n      value={r_e}\n      set={setRe}\n      min={0.0001}\n      max={10}\n      description=\"Sets the size of the source\"\n    />\n  </div>\n);\n\nconst LensControls = ({ phiDeg, q, r_ein, setPhiDeg, setQ, setRein }) => (\n  <div>\n    <h2>Lens parameters</h2>\n    <ParamControls\n      label=\"Orientation (ϕ) [deg]\"\n      value={phiDeg}\n      set={setPhiDeg}\n      min={-180}\n      max={180}\n      description=\"Orientation of lens relative to x-axis\"\n    />\n    <ParamControls\n      label=\"Ellipticity (q)\"\n      value={q}\n      set={setQ}\n      min={0.15}\n      max={0.9999}\n      description=\"Controls whether lens is circular (q=1) or elliptical (q=0)\"\n    />\n    <ParamControls\n      label=\"Einstein radius (r_ein)\"\n      value={r_ein}\n      set={setRein}\n      min={0.0001}\n      max={2.5}\n      description=\"Sets the size of the lens\"\n    />\n  </div>\n);\n\nconst SHControls = ({ x, y, M_200c, setX, setY, setM200c }) => (\n  <div>\n    <h2>Subhalo parameters</h2>\n    <ParamControls\n      label=\"Position (x) ['']\"\n      value={x}\n      set={setX}\n      min={-2.5}\n      max={2.5}\n    />\n    <ParamControls\n      label=\"Position (y) ['']\"\n      value={y}\n      set={setY}\n      min={-2.5}\n      max={2.5}\n    />\n    <ParamControls\n      label=\"Mass (M_200c) [M_sun]\"\n      value={M_200c}\n      set={setM200c}\n      min={1e5}\n      max={10 ** 10.5}\n      description=\"Subhalo mass in radius where density is 200 times rho_cr\"\n    />\n  </div>\n);\n\nconst TelescopeControls = ({ sigma_n, setSigmaN, setRes }) => (\n  <div>\n    <h2>Telescope</h2>\n    <ParamControls\n      label=\"Noise level\"\n      value={sigma_n}\n      set={setSigmaN}\n      min={0}\n      max={2.5}\n      description=\"Telescope noise level\"\n    />\n    <div>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.012)}>\n        ELT\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.031)}>\n        JWST\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.05)}>\n        Hubble Space Telescope\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.1)}>\n        Euclid\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.7)}>\n        Rubin Observatory\n      </button>\n    </div>\n  </div>\n);\n\nconst Lens = () => {\n  // Source parameters\n  const [x_s, setXs] = useState(0.05);\n  const [y_s, setYs] = useState(0.1);\n  const [phi_sDeg, setPhisDeg] = useState(40.107);\n  const [q_s, setQs] = useState(0.5);\n  const [index, setIndex] = useState(4.0);\n  const [r_e, setRe] = useState(5.0);\n  const I_e = 0.05;\n\n  // Main lens parameters\n  const x_l = 0.0; // const [x_l, setXl] = useState(0.0);\n  const y_l = 0.0; // const [y_l, setYl] = useState(0.0);\n  const [phi_lDeg, setPhilDeg] = useState(57.296);\n  const [q_l, setQl] = useState(0.75);\n  const [r_ein, setRein] = useState(1.5);\n\n  // Subhalo parameters\n  const [x_sh, setXsh] = useState(-1.1);\n  const [y_sh, setYsh] = useState(-1.1);\n  const [M_200c, setM200c] = useState(1e10);\n  const tau = 6.0;\n\n  // Telescope parameters\n  const [res, setRes] = useState(0.1);\n  const [sigma_n, setSigmaN] = useState(0);\n\n  // Misc constants\n  const dim = 5; // arcsec\n  const upsample = 4;\n  const canvasDim = 480;\n\n  // Package everything up\n  const sersicParams = {\n    x: x_s,\n    y: y_s,\n    phi: (phi_sDeg * Math.PI) / 180,\n    q: q_s,\n    index,\n    r_e,\n    I_e,\n  };\n  const sieParams = {\n    x: x_l,\n    y: y_l,\n    phi: (phi_lDeg * Math.PI) / 180,\n    q: q_l,\n    r_ein,\n  };\n  const tnfwParams = {\n    x: x_sh,\n    y: y_sh,\n    M_200c,\n    tau,\n  };\n\n  // Source without lensing\n  const sourceImage = evalOnGrid(res, dim, upsample, (x, y) =>\n    sersic(x, y, sersicParams)\n  );\n\n  // Lensed image\n  const lensedImage = runLensModel(\n    sersicParams,\n    sieParams,\n    tnfwParams,\n    res,\n    dim,\n    upsample,\n    sigma_n\n  );\n\n  // Set color scale\n  const minVal = -3; // Math.min(...lensed);\n  const maxVal = 18; // Math.max(...lensed);\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"left\",\n          padding: \"0.5rem\",\n        }}\n      >\n        <div>\n          <h2 data-tip data-for=\"sourceHeaderTT\">\n            Source\n          </h2>\n          <ReactTooltip id=\"sourceHeaderTT\">\n            Source galaxy with no lensing\n          </ReactTooltip>\n          <Canvas\n            draw={(ctx: CanvasRenderingContext2D) =>\n              drawSource(sourceImage, minVal, maxVal, ctx)\n            }\n            width={canvasDim}\n            height={canvasDim}\n          />\n        </div>\n        <SourceControls\n          x={x_s}\n          y={y_s}\n          phiDeg={phi_sDeg}\n          q={q_s}\n          index={index}\n          r_e={r_e}\n          setX={setXs}\n          setY={setYs}\n          setPhiDeg={setPhisDeg}\n          setQ={setQs}\n          setIndex={setIndex}\n          setRe={setRe}\n        />\n        <TelescopeControls\n          sigma_n={sigma_n}\n          setSigmaN={setSigmaN}\n          setRes={setRes}\n        />\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"left\",\n          padding: \"0.5rem\",\n        }}\n      >\n        <div>\n          <h2 data-tip data-for=\"obsHeaderTT\">\n            Observation\n          </h2>\n          <ReactTooltip id=\"obsHeaderTT\">\n            Observation of lensed galaxy seen by telescope\n          </ReactTooltip>\n          <Canvas\n            draw={(ctx: CanvasRenderingContext2D) =>\n              drawLensed(\n                lensedImage,\n                sieParams,\n                tnfwParams,\n                res,\n                minVal,\n                maxVal,\n                ctx\n              )\n            }\n            width={canvasDim}\n            height={canvasDim}\n          />\n        </div>\n        <LensControls\n          phiDeg={phi_lDeg}\n          q={q_l}\n          r_ein={r_ein}\n          setPhiDeg={setPhilDeg}\n          setQ={setQl}\n          setRein={setRein}\n        />\n        <SHControls\n          x={x_sh}\n          y={y_sh}\n          M_200c={M_200c}\n          // c_200c={c_200c}\n          // tau={tau}\n          setX={setXsh}\n          setY={setYsh}\n          setM200c={setM200c}\n          // setc200c={setc200c}\n          // setTau={setTau}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Lens;\n"],"sourceRoot":""}