{"version":3,"sources":["webpack://adam-coogan.github.io/./src/pages/shader.vert","webpack://adam-coogan.github.io/./src/pages/webgl.tsx","webpack://adam-coogan.github.io/./src/pages/shader.frag","webpack://adam-coogan.github.io/./src/pages/webglutils.tsx"],"names":["Canvas","props","draw","rest","canvasRef","useRef","useEffect","gl","current","getContext","console","log","useCanvas","ref","ParamControls","label","value","set","min","max","description","labelBlock","style","flex","margin","data-tip","data-for","id","display","alignItems","minWidth","type","step","onChange","e","parseFloat","target","SourceControls","x","y","phiDeg","q","index","r_e","setX","setY","setPhiDeg","setQ","setIndex","setRe","LensControls","r_ein","setRein","TelescopeControls","sigma_n","setSigmaN","setRes","onClick","useState","x_s","setXs","y_s","setYs","phi_sDeg","setPhisDeg","q_s","setQs","phi_lDeg","setPhilDeg","q_l","setQl","res","range","Math","ceil","program","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","resizeCanvasToDisplaySize","canvas","viewport","width","height","clearColor","clear","COLOR_BUFFER_BIT","useProgram","init","xSLoc","getUniformLocation","ySLoc","phiSLoc","qSLoc","indexLoc","rELoc","IELoc","uniform1f","PI","xLLoc","yLLoc","phiLLoc","qLLoc","rEinLoc","rangeLoc","minFluxLoc","maxFluxLoc","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","posAttribLoc","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","bufferData","Float32Array","STATIC_DRAW","drawArrays","TRIANGLE_STRIP","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","displayWidth","clientWidth","displayHeight","clientHeight","needResize"],"mappings":"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","file":"component---src-pages-webgl-tsx-49c1f8dc42b92e39d7cf.js","sourcesContent":["const vertexShaderSource = `\nattribute vec2 a_position;\n\nuniform float u_range;\nuniform vec2 u_translation;\n\nvarying vec2 v_xy;\n\nvoid main() {\n  gl_PointSize = 1.0;\n  v_xy = a_position * u_range; // image coordinates\n  gl_Position = vec4(a_position, 0, 1);\n}\n`;\n\nexport default vertexShaderSource;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport fragmentShaderSource from \"./shader.frag\";\nimport vertexShaderSource from \"./shader.vert\";\nimport {\n  createShader,\n  createProgram,\n  resizeCanvasToDisplaySize,\n} from \"./webglutils\";\n\nconst useCanvas = (draw: (gl: WebGLRenderingContext) => void) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const gl = canvas.getContext(\"webgl\");\n    if (!gl) console.log(\"no webgl!\");\n    draw(gl);\n  }, [draw]);\n\n  return canvasRef;\n};\n\ninterface CanvasProps {\n  draw: (gl: WebGLRenderingContext) => void;\n  [rest: string]: any;\n}\n\nconst Canvas = (props: CanvasProps) => {\n  const { draw, ...rest } = props;\n  const canvasRef = useCanvas(draw);\n  return <canvas ref={canvasRef} {...rest} />;\n};\n\ninterface ParamControlsProps {\n  label: string;\n  value: number;\n  set: (newVal: number) => void;\n  min: number;\n  max: number;\n  description?: string;\n}\n\nconst ParamControls = ({\n  label,\n  value,\n  set,\n  min,\n  max,\n  description,\n}: ParamControlsProps) => {\n  const labelBlock = description ? (\n    <>\n      <label\n        style={{ flex: 2, margin: \"0.2rem\" }}\n        data-tip\n        data-for={description}\n      >\n        {label}\n      </label>\n      <ReactTooltip id={description}>{description}</ReactTooltip>{\" \"}\n    </>\n  ) : (\n    <label style={{ flex: 2, margin: \"0.2rem\" }}>{label}</label>\n  );\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n      }}\n    >\n      {labelBlock}\n      <input\n        style={{ flex: 1, margin: \"0.2rem\", minWidth: 0 }}\n        type=\"text\"\n        min={min}\n        max={max}\n        step={0.001}\n        value={value}\n        onChange={(e) => set(parseFloat(e.target.value))}\n      />\n      <input\n        style={{ flex: 3, margin: \"0.2rem\" }}\n        type=\"range\"\n        min={min}\n        max={max}\n        step={0.001}\n        value={value}\n        onChange={(e) => set(parseFloat(e.target.value))}\n      />\n    </div>\n  );\n};\n\nconst SourceControls = ({\n  x,\n  y,\n  phiDeg,\n  q,\n  index,\n  r_e,\n  setX,\n  setY,\n  setPhiDeg,\n  setQ,\n  setIndex,\n  setRe,\n}) => (\n  <div>\n    <h2>Source parameters</h2>\n    <ParamControls\n      label=\"Position (x) ['']\"\n      value={x}\n      set={setX}\n      min={-2.5}\n      max={2.5}\n    />\n    <ParamControls\n      label=\"Position (y) ['']\"\n      value={y}\n      set={setY}\n      min={-2.5}\n      max={2.5}\n    />\n    <ParamControls\n      label=\"Orientation (ϕ) [deg]\"\n      value={phiDeg}\n      set={setPhiDeg}\n      min={-180}\n      max={180}\n      description=\"Orientation of source relative to x-axis\"\n    />\n    <ParamControls\n      label=\"Ellipticity (q)\"\n      value={q}\n      set={setQ}\n      min={0.15}\n      max={0.9999}\n      description=\"Controls whether source is circular (q=1) or elliptical (q=0)\"\n    />\n    <ParamControls\n      label=\"Index\"\n      value={index}\n      set={setIndex}\n      min={0.5}\n      max={5}\n      description=\"Higher values cause source brightness to decrease sharply with radius\"\n    />\n    <ParamControls\n      label=\"Size (r_e) ['']\"\n      value={r_e}\n      set={setRe}\n      min={0.0001}\n      max={10}\n      description=\"Sets the size of the source\"\n    />\n  </div>\n);\n\nconst LensControls = ({ phiDeg, q, r_ein, setPhiDeg, setQ, setRein }) => (\n  <div>\n    <h2>Lens parameters</h2>\n    <ParamControls\n      label=\"Orientation (ϕ) [deg]\"\n      value={phiDeg}\n      set={setPhiDeg}\n      min={-180}\n      max={180}\n      description=\"Orientation of lens relative to x-axis\"\n    />\n    <ParamControls\n      label=\"Ellipticity (q)\"\n      value={q}\n      set={setQ}\n      min={0.15}\n      max={0.9999}\n      description=\"Controls whether lens is circular (q=1) or elliptical (q=0)\"\n    />\n    <ParamControls\n      label=\"Einstein radius (r_ein)\"\n      value={r_ein}\n      set={setRein}\n      min={0.0001}\n      max={2.5}\n      description=\"Sets the size of the lens\"\n    />\n  </div>\n);\n\nconst TelescopeControls = ({ sigma_n, setSigmaN, setRes }) => (\n  <div>\n    <h2>Telescope</h2>\n    <ParamControls\n      label=\"Noise level\"\n      value={sigma_n}\n      set={setSigmaN}\n      min={0}\n      max={2.5}\n      description=\"Telescope noise level\"\n    />\n    <div>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.012)}>\n        ELT\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.031)}>\n        JWST\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.05)}>\n        Hubble Space Telescope\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.1)}>\n        Euclid\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.7)}>\n        Rubin Observatory\n      </button>\n    </div>\n  </div>\n);\n\n/*\n * Initialize shaders and program.\n */\nconst init = (gl: WebGLRenderingContext) => {\n  // Create shaders\n  const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n  const fragmentShader = createShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  );\n  // Link shaders into a program\n  const program = createProgram(gl, vertexShader, fragmentShader);\n  // Make canvas match display size\n  resizeCanvasToDisplaySize(gl.canvas);\n  // Tell webgl clip space (-1, +1) maps to (0, width) and (0, height)\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n  // Set clear color\n  gl.clearColor(0.0, 0.0, 0.0, 0.1);\n  // Clear canvas\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  // Tell webgl which program to execute\n  gl.useProgram(program);\n  return program;\n};\n\nconst Page = () => {\n  // Source parameters\n  const [x_s, setXs] = useState(0.05);\n  const [y_s, setYs] = useState(0.1);\n  const [phi_sDeg, setPhisDeg] = useState(40.107);\n  const [q_s, setQs] = useState(0.5);\n  const [index, setIndex] = useState(4.0);\n  const [r_e, setRe] = useState(5.0);\n  const I_e = 0.05;\n  // Main lens parameters\n  const x_l = 0.0; // const [x_l, setXl] = useState(0.0);\n  const y_l = 0.0; // const [y_l, setYl] = useState(0.0);\n  const [phi_lDeg, setPhilDeg] = useState(57.296);\n  const [q_l, setQl] = useState(0.75);\n  const [r_ein, setRein] = useState(1.5);\n  // Telescope parameters\n  const [res, setRes] = useState(0.1);\n  const [sigma_n, setSigmaN] = useState(0);\n  // Misc constants\n  const canvasDim = 500;\n  const minFlux = -3;\n  const maxFlux = 18;\n  const targetRange = 2.5; // arcsec\n  const range = (Math.ceil((2 * targetRange) / res) * res) / 2; // arcsec\n\n  const draw = (gl: WebGLRenderingContext) => {\n    const program = init(gl);\n\n    // Set source parameters\n    const xSLoc = gl.getUniformLocation(program, \"u_x_s\");\n    const ySLoc = gl.getUniformLocation(program, \"u_y_s\");\n    const phiSLoc = gl.getUniformLocation(program, \"u_phi_s\");\n    const qSLoc = gl.getUniformLocation(program, \"u_q_s\");\n    const indexLoc = gl.getUniformLocation(program, \"u_index\");\n    const rELoc = gl.getUniformLocation(program, \"u_r_e\");\n    const IELoc = gl.getUniformLocation(program, \"u_I_e\");\n    gl.uniform1f(xSLoc, x_s);\n    gl.uniform1f(ySLoc, y_s);\n    gl.uniform1f(phiSLoc, (phi_sDeg * Math.PI) / 180);\n    gl.uniform1f(qSLoc, q_s);\n    gl.uniform1f(indexLoc, index);\n    gl.uniform1f(rELoc, r_e);\n    gl.uniform1f(IELoc, I_e);\n    // Set main lens parameters\n    const xLLoc = gl.getUniformLocation(program, \"u_x_l\");\n    const yLLoc = gl.getUniformLocation(program, \"u_y_l\");\n    const phiLLoc = gl.getUniformLocation(program, \"u_phi_l\");\n    const qLLoc = gl.getUniformLocation(program, \"u_q_l\");\n    const rEinLoc = gl.getUniformLocation(program, \"u_r_ein\");\n    gl.uniform1f(xLLoc, x_l);\n    gl.uniform1f(yLLoc, y_l);\n    gl.uniform1f(phiLLoc, (phi_lDeg * Math.PI) / 180);\n    gl.uniform1f(qLLoc, q_l);\n    gl.uniform1f(rEinLoc, r_ein);\n    // Set image coordinate range\n    const rangeLoc = gl.getUniformLocation(program, \"u_range\");\n    gl.uniform1f(rangeLoc, range);\n    // Set color range\n    const minFluxLoc = gl.getUniformLocation(program, \"u_min_flux\");\n    const maxFluxLoc = gl.getUniformLocation(program, \"u_max_flux\");\n    gl.uniform1f(minFluxLoc, minFlux);\n    gl.uniform1f(maxFluxLoc, maxFlux);\n\n    // Set up vertex buffer\n    const vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    // Associate shader attributes with data buffers\n    const posAttribLoc = gl.getAttribLocation(program, \"a_position\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer); // make sure correct buffer is bound\n    gl.vertexAttribPointer(posAttribLoc, 2, gl.FLOAT, false, 0, 0); // how to extract data\n    gl.enableVertexAttribArray(posAttribLoc); // turn attribute on\n\n    // Draw square covering canvas\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]),\n      gl.STATIC_DRAW // never changes\n    );\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  };\n\n  return (\n    <div>\n      <Canvas draw={draw} width={canvasDim} height={canvasDim} />\n      <SourceControls\n        x={x_s}\n        y={y_s}\n        phiDeg={phi_sDeg}\n        q={q_s}\n        index={index}\n        r_e={r_e}\n        setX={setXs}\n        setY={setYs}\n        setPhiDeg={setPhisDeg}\n        setQ={setQs}\n        setIndex={setIndex}\n        setRe={setRe}\n      />\n      <LensControls\n        phiDeg={phi_lDeg}\n        q={q_l}\n        r_ein={r_ein}\n        setPhiDeg={setPhilDeg}\n        setQ={setQl}\n        setRein={setRein}\n      />\n      <TelescopeControls\n        sigma_n={sigma_n}\n        setSigmaN={setSigmaN}\n        setRes={setRes}\n      />\n    </div>\n  );\n};\n\nexport default Page;\n","const fragmentShaderSource = `\nprecision mediump float;\n\n// Source parameters\nuniform float u_x_s;\nuniform float u_y_s;\nuniform float u_phi_s;\nuniform float u_q_s;\nuniform float u_index;\nuniform float u_r_e;\nuniform float u_I_e;\n// Main lens parameters\nuniform float u_x_l;\nuniform float u_y_l;\nuniform float u_phi_l;\nuniform float u_q_l;\nuniform float u_r_ein;\n// Flux scale\nuniform float u_min_flux;\nuniform float u_max_flux;\n\n// Image positions\nvarying vec2 v_xy;\n\n// From https://www.shadertoy.com/view/WlfXRN\nvec3 viridis(float t) {\n  const vec3 c0 = vec3(0.2777273272234177, 0.005407344544966578, 0.3340998053353061);\n  const vec3 c1 = vec3(0.1050930431085774, 1.404613529898575, 1.384590162594685);\n  const vec3 c2 = vec3(-0.3308618287255563, 0.214847559468213, 0.09509516302823659);\n  const vec3 c3 = vec3(-4.634230498983486, -5.799100973351585, -19.33244095627987);\n  const vec3 c4 = vec3(6.228269936347081, 14.17993336680509, 56.69055260068105);\n  const vec3 c5 = vec3(4.776384997670288, -13.74514537774601, -65.35303263337234);\n  const vec3 c6 = vec3(-5.435455855934631, 4.645852612178535, 26.3124352495832);\n\n  return c0 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * (c5 + t * c6)))));\n}\n\nvec4 fluxToRGBA(float flux) {\n  float unclipped = (flux - u_min_flux) / (u_max_flux - u_min_flux);\n  float clipped = step(0.0, unclipped) * step(0.0, 1.0 - unclipped) * unclipped\n      + step(1.0, unclipped);\n  return vec4(viridis(clipped), 1);\n}\n\nfloat sersic(float x, float y) {\n  // Position relative to source\n  float dx = x - u_x_s;\n  float dy = y - u_y_s;\n\n  float k = 2.0 * u_index - 1.0 / 3.0 + 4.0 / 405.0 / u_index + 46.0 / 25515.0 / (u_index * u_index);\n  float x_maj = dx * cos(u_phi_s) + dy * sin(u_phi_s);\n  float x_min = -dx * sin(u_phi_s) + dy * cos(u_phi_s);\n  float r = sqrt(x_maj * x_maj * u_q_s + x_min * x_min / u_q_s) / u_r_e;\n  float exponent = -k * (pow(r, 1.0 / u_index) - 1.0);\n  return u_I_e * exp(exponent);\n}\n\nvec2 alpha_sie(float x, float y) {\n  // Transform to elliptical coordinates\n  float dx = x - u_x_l;\n  float dy = y - u_y_l;\n  float rx = (dx * cos(u_phi_l) + dy * sin(u_phi_l)) * sqrt(u_q_l);\n  float ry = (-dx * sin(u_phi_l) + dy * cos(u_phi_l)) / sqrt(u_q_l);\n  float ang = atan(ry, rx);\n\n  // Deflection field in lens frame\n  float alpha_lf_scale =\n    2.0 *\n    u_r_ein *\n    sqrt(u_q_l / (1.0 - u_q_l * u_q_l)) *\n    atan(sqrt((1.0 - u_q_l) / (1.0 + u_q_l)));\n  float alpha_x_lf = alpha_lf_scale * cos(ang);\n  float alpha_y_lf = alpha_lf_scale * sin(ang);\n\n  // Deflection field in image frame\n  float alpha_x = alpha_x_lf * cos(u_phi_l) - alpha_y_lf * sin(u_phi_l);\n  float alpha_y = alpha_x_lf * sin(u_phi_l) + alpha_y_lf * cos(u_phi_l);\n\n  return vec2(alpha_x, alpha_y);\n}\n\nvoid main() {\n  vec2 xy_lensed = v_xy - alpha_sie(v_xy[0], v_xy[1]);\n  float flux = sersic(xy_lensed[0], xy_lensed[1]);\n  gl_FragColor = fluxToRGBA(flux);\n}\n`;\n\nexport default fragmentShaderSource;\n","/*\n * Create shader, add source code and compile, checking for errors.\n */\nexport const createShader = (\n  gl: WebGLRenderingContext,\n  type: number,\n  source: string\n) => {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) return shader;\n\n  console.log(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n};\n\n/*\n * Links shaders into a program.\n */\nexport const createProgram = (\n  gl: WebGLRenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader\n) => {\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) return program;\n\n  console.log(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n};\n\nexport const resizeCanvasToDisplaySize = (canvas: HTMLCanvasElement) => {\n  // Lookup the size the browser is displaying the canvas in CSS pixels.\n  const displayWidth = canvas.clientWidth;\n  const displayHeight = canvas.clientHeight;\n\n  // Check if the canvas is not the same size.\n  const needResize =\n    canvas.width !== displayWidth || canvas.height !== displayHeight;\n\n  if (needResize) {\n    // Make the canvas the same size\n    canvas.width = displayWidth;\n    canvas.height = displayHeight;\n  }\n\n  return needResize;\n};\n"],"sourceRoot":""}