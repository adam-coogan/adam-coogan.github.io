{"version":3,"sources":["webpack://adam-coogan.github.io/./src/pages/lensing.tsx"],"names":["fsPostSource","getFSPost","X_SH_OFFSETS","Math","random","Y_SH_OFFSETS","Button","styled","selected","Canvas","props","ctxName","draw","rest","canvasRef","useRef","useEffect","ctx","current","getContext","console","log","useCanvas","ref","ParamControls","label","value","set","min","max","description","labelBlock","style","flex","margin","data-tip","data-for","id","display","alignItems","type","step","onChange","e","parseFloat","target","SourceControls","x","y","phiDeg","q","index","r_e","setX","setY","setPhiDeg","setQ","setIndex","setRe","LensControls","r_ein","lensLightScale","setRein","setLensLightScale","onClick","ShearControls","gamma_1","gamma_2","setGamma_1","setGamma_2","SHControls","M_200c","setM200c","log10","newVal","ChangeResButton","resolution","setRes","activeID","setActiveID","TelescopeControls","sigma_n","setSigmaN","resampleNoise","useState","getNoiseTexArray","size","noiseRange","Uint8Array","from","length","floor","randn","getNPix","canvasDim","targetRange","res","ceil","x_s","setXs","y_s","setYs","phi_sDeg","setPhisDeg","q_s","setQs","phi_lDeg","setPhilDeg","q_l","setQl","x_sh","setXsh","y_sh","setYsh","highFlux","maxFlux","nPix","range","nPixFine","noiseArray","setNoiseArray","virialToScale","rho_s","r_s","backgroundColor","minHeight","justifyContent","flexDirection","width","padding","paddingRight","gl","srcProgInfo","twgl","vsSource","fsSrcSource","useProgram","program","canvas","viewport","height","quadBufferInfo","a_position","data","uniforms","u_range","u_x_s","u_y_s","u_phi_s","PI","u_q_s","u_index","u_r_e","u_I_e","u_low_flux","u_high_flux","newNPix","paddingLeft","position","lensProgInfo","fsLensSource","postProgInfo","lensUniforms","u_x_l","u_y_l","u_phi_l","u_q_l","u_r_ein","u_lens_light_scale","u_gamma_1","u_gamma_2","u_x_sh","Array","u_y_sh","u_rho_s","fill","u_r_s","u_tau","u_max_flux","assert","checkFramebufferStatus","FRAMEBUFFER","FRAMEBUFFER_COMPLETE","fbFine","NEAREST","mag","wrap","CLAMP_TO_EDGE","noiseTex","format","LUMINANCE","src","postUniforms","u_n_pix_fine","u_n_pix","u_noise_range","u_sigma_n","u_flux_tex","attachments","u_noise_tex","left","top","imageRendering","zIndex","scale","clearRect","save","translate","strokeStyle","beginPath","ellipse","stroke","arc","fillStyle","restore"],"mappings":"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","file":"component---src-pages-lensing-tsx-e8fe80e1c0f146517391.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport Layout from \"../components/layout\";\nimport ReactTooltip from \"react-tooltip\";\nimport styled from \"styled-components\";\nimport * as twgl from \"twgl.js\"; // weird import structure\nimport {\n  fsLensSource,\n  getFSPost,\n  vsSource,\n  fsSrcSource,\n} from \"../utils/shaders\";\nimport { virialToScale } from \"../utils/tnfwwebgl\";\nimport { randn } from \"../utils/utils\";\n\n/*\n * The plan\n * --------\n * -[ ] What direction do I want to take this thing?\n *      * Explain why gravitational lensing lets us detect subhalos by showing\n *        residual wrt smooth lens model\n *      * Emphasize that signal is small. Maybe make the noise toggle instead\n *        of making it variable? That would show the impact of improving the\n *        telescope resolution.\n *      * Show population of ≤50 subhalos -- more than that slows things down.\n * -[X] Switch to twgl\n * -[X] Style resolution buttons\n * -[X] Add subhalo\n * -[X] Show subhalo dot\n * -[X] Show lens ellipse\n * -[X] Figure out how to show source\n * -[X] Add external shear\n * -[X] Add lens light\n *      * Can add another canvas with a similar shader to the source one\n *      * Need to use a different color scheme, blending and transparency\n *      * Unclear how to map r_ein to r_e and what flux scale to use. Could use\n *        mass-to-light ratio?\n * -[ ] Add subhalo population\n * -[ ] Generate subhalo shader with constants matching tsx\n * -[?] Visualize subhalo's impact. Maybe show difference between images with\n *      and without subhalo?\n * -[?] Separate initialization and drawing steps\n */\n\n// Generate post-processesing shader\nconst UPSAMPLE = 4;\nconst fsPostSource = getFSPost(UPSAMPLE);\n// Telescope resolutions\nconst eltRes = 0.012;\nconst jwstRes = 0.031;\nconst hstRes = 0.05;\nconst euclidRes = 0.1;\nconst rubinRes = 0.7;\n// Other constants\nconst INIT_LENS_LIGHT_SCALE = 60.0;\nconst N_SH = 50;\nconst X_SH_OFFSETS = Math.random() - 0.5;\nconst Y_SH_OFFSETS = Math.random() - 0.5;\n\nconst Button = styled.button`\n  background-color: ${({ selected }) => (selected ? \"#6c757d\" : \"#ffffff\")};\n  border-color: ${({ selected }) => (selected ? \"#ffffff\" : \"#6c757d\")};\n  color: ${({ selected }) => (selected ? \"#ffffff\" : \"#6c757d\")};\n  margin: 0.2em;\n  padding: 0.5em 1em;\n  border: 2px solid;\n  border-radius: 4px;\n  &:hover {\n    background-color: #a6acb1;\n    border-color: #ffffff;\n    color: #ffffff;\n  }\n  &:active {\n    background-color: #6c757d;\n    border-color: #ffffff;\n    color: #ffffff;\n  }\n`;\n\nconst useCanvas = (ctxName: string, draw: (gl: RenderingContext) => void) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(ctxName);\n    if (!ctx) console.log(`no ${ctxName}!`);\n    draw(ctx);\n  }, [draw]);\n\n  return canvasRef;\n};\n\ninterface CanvasProps {\n  ctxName: string;\n  draw: (gl: RenderingContext) => void;\n  [rest: string]: any;\n}\n\nconst Canvas = (props: CanvasProps) => {\n  const { ctxName, draw, ...rest } = props;\n  const canvasRef = useCanvas(ctxName, draw);\n  return <canvas ref={canvasRef} {...rest} />;\n};\n\ninterface ParamControlsProps {\n  label: string;\n  value: number;\n  set: (newVal: number) => void;\n  min: number;\n  max: number;\n  description?: string;\n}\n\nconst ParamControls = ({\n  label,\n  value,\n  set,\n  min,\n  max,\n  description,\n}: ParamControlsProps) => {\n  const labelBlock = description ? (\n    <>\n      <label\n        style={{ flex: 2, margin: \"0.2rem\" }}\n        data-tip\n        data-for={description}\n      >\n        {label}\n      </label>\n      <ReactTooltip id={description}>{description}</ReactTooltip>{\" \"}\n    </>\n  ) : (\n    <label style={{ flex: 2, margin: \"0.2rem\" }}>{label}</label>\n  );\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n      }}\n    >\n      {labelBlock}\n      {/*      <input\n        style={{ flex: 1, margin: \"0.2rem\", minWidth: 0 }}\n        type=\"text\"\n        min={min}\n        max={max}\n        step={0.001}\n        value={value}\n        onChange={(e) => {\n          set(parseFloat(e.target.value));\n        }}\n      />*/}\n      <input\n        style={{ flex: 2.5, margin: \"0.2rem\" }}\n        type=\"range\"\n        min={min}\n        max={max}\n        step={0.001}\n        value={value}\n        onChange={(e) => set(parseFloat(e.target.value))}\n      />\n    </div>\n  );\n};\n\nconst SourceControls = ({\n  x,\n  y,\n  phiDeg,\n  q,\n  index,\n  r_e,\n  setX,\n  setY,\n  setPhiDeg,\n  setQ,\n  setIndex,\n  setRe,\n}) => (\n  <div>\n    <h2>Source parameters</h2>\n    <ParamControls\n      label=\"Horizontal position\"\n      value={x}\n      set={setX}\n      min={-2.5}\n      max={2.5}\n    />\n    <ParamControls\n      label=\"Vertical position\"\n      value={y}\n      set={setY}\n      min={-2.5}\n      max={2.5}\n    />\n    <ParamControls\n      label=\"Orientation\"\n      value={phiDeg}\n      set={setPhiDeg}\n      min={-180}\n      max={180}\n      description=\"Orientation of source relative to x-axis\"\n    />\n    <ParamControls\n      label=\"Ellipticity\"\n      value={q}\n      set={setQ}\n      min={0.15}\n      max={0.9999}\n      description=\"Controls whether source is circular (q=1) or elliptical (q=0)\"\n    />\n    <ParamControls\n      label=\"Sharpness\"\n      value={index}\n      set={setIndex}\n      min={0.5}\n      max={5}\n      description=\"Higher values cause source brightness to decrease sharply with radius\"\n    />\n    <ParamControls\n      label=\"Size\"\n      value={r_e}\n      set={setRe}\n      min={0.0001}\n      max={10}\n      description=\"Sets the size of the source\"\n    />\n  </div>\n);\n\nconst LensControls = ({\n  phiDeg,\n  q,\n  r_ein,\n  lensLightScale,\n  setPhiDeg,\n  setQ,\n  setRein,\n  setLensLightScale,\n}) => (\n  <div>\n    <h2>Lens parameters</h2>\n    <ParamControls\n      label=\"Orientation\"\n      value={phiDeg}\n      set={setPhiDeg}\n      min={-180}\n      max={180}\n      description=\"Orientation of lens relative to x-axis\"\n    />\n    <ParamControls\n      label=\"Ellipticity\"\n      value={q}\n      set={setQ}\n      min={0.15}\n      max={0.9999}\n      description=\"Controls whether lens is circular (q=1) or elliptical (q=0)\"\n    />\n    <ParamControls\n      label=\"Einstein radius\"\n      value={r_ein}\n      set={setRein}\n      min={0.0001}\n      max={2.5}\n      description=\"Sets the size of the lens\"\n    />\n    <Button\n      selected={lensLightScale === INIT_LENS_LIGHT_SCALE}\n      onClick={() =>\n        lensLightScale === 0.0\n          ? setLensLightScale(INIT_LENS_LIGHT_SCALE)\n          : setLensLightScale(0.0)\n      }\n    >\n      {lensLightScale === 0 ? \"Turn on lens light\" : \"Turn off lens light\"}\n    </Button>\n  </div>\n);\n\nconst ShearControls = ({ gamma_1, gamma_2, setGamma_1, setGamma_2 }) => (\n  <div>\n    <h2>External shear parameters</h2>\n    <ParamControls\n      label=\"Horizontal component\"\n      value={gamma_1}\n      set={setGamma_1}\n      min={-0.05}\n      max={0.05}\n      description=\"Horizontal component of distortions from large-scale structure\"\n    />\n    <ParamControls\n      label=\"Vertical component\"\n      value={gamma_2}\n      set={setGamma_2}\n      min={-0.05}\n      max={0.05}\n      description=\"Vertical component of distortions from large-scale structure\"\n    />\n  </div>\n);\n\nconst SHControls = ({ x, y, M_200c, setX, setY, setM200c }) => (\n  <div>\n    <h2>Subhalo parameters</h2>\n    <ParamControls\n      label=\"Horizontal position\"\n      value={x}\n      set={setX}\n      min={-2.5}\n      max={2.5}\n    />\n    <ParamControls\n      label=\"Vertical position\"\n      value={y}\n      set={setY}\n      min={-2.5}\n      max={2.5}\n    />\n    <ParamControls\n      label=\"Mass\"\n      value={Math.log10(M_200c)}\n      set={(newVal: number) => setM200c(10 ** newVal)}\n      min={5}\n      max={10.5}\n      description={\n        \"The mass is that of a sphere centered on the subhalo in \" +\n        \"which the average density is 200 times rho_cr\"\n      }\n    />\n  </div>\n);\n\nconst ChangeResButton = ({\n  label,\n  id,\n  resolution,\n  setRes,\n  activeID,\n  setActiveID,\n  description,\n}) => (\n  <>\n    <Button\n      id={id}\n      selected={id === activeID}\n      onClick={() => {\n        setActiveID(id);\n        setRes(resolution);\n      }}\n      data-tip\n      data-for={id}\n    >\n      {label}\n    </Button>\n    <ReactTooltip id={id}>{description}</ReactTooltip>\n  </>\n);\n\nconst TelescopeControls = ({ sigma_n, setSigmaN, setRes, resampleNoise }) => {\n  const [activeID, setActiveID] = useState(\"euclid\");\n\n  return (\n    <div>\n      <h2>Telescope</h2>\n      <ParamControls\n        label=\"Noise level\"\n        value={sigma_n}\n        set={setSigmaN}\n        min={0}\n        max={3.0}\n        description=\"Scale of telescope noise level\"\n      />\n      <Button onClick={() => resampleNoise()}>Resample noise</Button>\n      <div>\n        <ChangeResButton\n          label=\"ELT\"\n          id=\"elt\"\n          resolution={eltRes}\n          setRes={setRes}\n          activeID={activeID}\n          setActiveID={setActiveID}\n          description=\"Extremely Large Telescope, 0.004-0.012'' pixel size\"\n        />\n        <ChangeResButton\n          label=\"JWST\"\n          id=\"jwst\"\n          resolution={jwstRes}\n          setRes={setRes}\n          activeID={activeID}\n          setActiveID={setActiveID}\n          description=\"James Webb Space Telescope, 0.031'' pixel size\"\n        />\n        <ChangeResButton\n          label=\"Hubble Space Telescope\"\n          id=\"hst\"\n          resolution={hstRes}\n          setRes={setRes}\n          activeID={activeID}\n          setActiveID={setActiveID}\n          description=\"0.05'' pixel size\"\n        />\n        <ChangeResButton\n          label=\"Euclid\"\n          id=\"euclid\"\n          resolution={euclidRes}\n          setRes={setRes}\n          activeID={activeID}\n          setActiveID={setActiveID}\n          description=\"0.1'' pixel size\"\n        />\n        <ChangeResButton\n          label=\"Rubin Observatory\"\n          id=\"rubin\"\n          resolution={rubinRes}\n          setRes={setRes}\n          activeID={activeID}\n          setActiveID={setActiveID}\n          description=\"0.7'' seeing\"\n        />\n      </div>\n    </div>\n  );\n  // DEBUG\n  // <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(1.25)}>\n  //   Chunky\n  // </button>\n};\n\nconst getNoiseTexArray = (size: number, noiseRange: number) =>\n  // Clamp to noise range, then rescale to [0, 1]\n  Uint8Array.from({ length: size }, () =>\n    Math.floor(\n      (256 *\n        (Math.max(-noiseRange, Math.min(noiseRange, randn())) + noiseRange)) /\n        (2 * noiseRange)\n    )\n  );\n\nconst getNPix = (canvasDim: number, targetRange: number, res: number) =>\n  Math.min(canvasDim, Math.ceil((2 * targetRange) / res));\n\nconst Page = () => {\n  // Source parameters\n  const [x_s, setXs] = useState(0.05);\n  const [y_s, setYs] = useState(0.1);\n  const [phi_sDeg, setPhisDeg] = useState(40.107);\n  const [q_s, setQs] = useState(0.5);\n  const [index, setIndex] = useState(4.0);\n  const [r_e, setRe] = useState(5.0);\n  const I_e = 0.05;\n  // Main lens parameters\n  const x_l = 0.0; // const [x_l, setXl] = useState(0.0);\n  const y_l = 0.0; // const [y_l, setYl] = useState(0.0);\n  const [phi_lDeg, setPhilDeg] = useState(57.296);\n  const [q_l, setQl] = useState(0.75);\n  const [r_ein, setRein] = useState(1.5);\n  const [lensLightScale, setLensLightScale] = useState(INIT_LENS_LIGHT_SCALE);\n  // Shear parameters\n  const [gamma_1, setGamma_1] = useState(0.007);\n  const [gamma_2, setGamma_2] = useState(0.01);\n  // Subhalo parameters\n  const [x_sh, setXsh] = useState(-1.1);\n  const [y_sh, setYsh] = useState(-1.1);\n  const [M_200c, setM200c] = useState(1e10);\n  const tau = 6.0;\n  // Telescope parameters\n  const [res, setRes] = useState(euclidRes);\n  const [sigma_n, setSigmaN] = useState(0.5);\n  // Final flux scale\n  const lowFlux = -3;\n  const highFlux = lensLightScale === 0 ? 23 : INIT_LENS_LIGHT_SCALE;\n  // Intermediate flux scale\n  const maxFlux = highFlux; // TODO: figure out how to reduce flux quantization... :[\n  // Image constants\n  const targetRange = 2.5; // arcsec\n  const canvasDim = 400; // final canvas size\n  const nPix = getNPix(canvasDim, targetRange, res); // final size in pixels\n  const range = (nPix * res) / 2; // arcsec\n  const nPixFine = UPSAMPLE * nPix; // fine grid pixel size\n  // Noise\n  const noiseRange = 5;\n  const [noiseArray, setNoiseArray] = useState(\n    getNoiseTexArray(nPix ** 2, noiseRange)\n  );\n\n  // Convert from virial to scale subhalo parameters\n  const { rho_s, r_s } = virialToScale(M_200c);\n\n  const drawSource = (gl: WebGLRenderingContext) => {\n    const srcProgInfo = twgl.createProgramInfo(gl, [vsSource, fsSrcSource]);\n    gl.useProgram(srcProgInfo.program);\n    twgl.resizeCanvasToDisplaySize(gl.canvas);\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // Set up quad positions\n    const quadBufferInfo = twgl.createBufferInfoFromArrays(gl, {\n      a_position: {\n        size: 2,\n        data: [-1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1],\n      },\n    });\n    twgl.setBuffersAndAttributes(gl, srcProgInfo, quadBufferInfo);\n\n    // Set source parameters\n    const uniforms = {\n      u_range: range,\n      u_x_s: x_s,\n      u_y_s: y_s,\n      u_phi_s: (phi_sDeg * Math.PI) / 180,\n      u_q_s: q_s,\n      u_index: index,\n      u_r_e: r_e,\n      u_I_e: I_e,\n      u_low_flux: lowFlux,\n      u_high_flux: highFlux,\n    };\n    twgl.setUniforms(srcProgInfo, uniforms);\n    // Draw\n    twgl.drawBufferInfo(gl, quadBufferInfo);\n  };\n\n  const drawImage = (gl: WebGLRenderingContext) => {\n    const lensProgInfo = twgl.createProgramInfo(gl, [vsSource, fsLensSource]);\n    const postProgInfo = twgl.createProgramInfo(gl, [vsSource, fsPostSource]);\n\n    // Set up quad positions\n    const quadBufferInfo = twgl.createBufferInfoFromArrays(gl, {\n      a_position: {\n        size: 2,\n        data: [-1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1],\n      },\n    });\n    twgl.setBuffersAndAttributes(gl, lensProgInfo, quadBufferInfo);\n\n    // Do the lensing\n    gl.useProgram(lensProgInfo.program);\n    // Set source parameters\n    const lensUniforms = {\n      // Source\n      u_x_s: x_s,\n      u_y_s: y_s,\n      u_phi_s: (phi_sDeg * Math.PI) / 180,\n      u_q_s: q_s,\n      u_index: index,\n      u_r_e: r_e,\n      u_I_e: I_e,\n      // Main lens\n      u_x_l: x_l,\n      u_y_l: y_l,\n      u_phi_l: (phi_lDeg * Math.PI) / 180,\n      u_q_l: q_l,\n      u_r_ein: r_ein,\n      u_lens_light_scale: lensLightScale,\n      // Shear\n      u_gamma_1: gamma_1,\n      u_gamma_2: gamma_2,\n      // Subhalo\n      u_x_sh: Array.from({ length: N_SH }, () => x_sh + X_SH_OFFSETS),\n      u_y_sh: Array.from({ length: N_SH }, () => y_sh + Y_SH_OFFSETS),\n      u_rho_s: new Array(N_SH).fill(rho_s),\n      u_r_s: new Array(N_SH).fill(r_s),\n      u_tau: new Array(N_SH).fill(tau),\n      // Misc\n      u_range: range,\n      u_max_flux: maxFlux,\n    };\n    twgl.setUniforms(lensProgInfo, lensUniforms);\n    // Create framebuffer texture for intermediate rendering\n    console.assert(\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE,\n      \"framebuffer is not ready to display\"\n    );\n    const fbFine = twgl.createFramebufferInfo(\n      gl,\n      [\n        {\n          min: gl.NEAREST,\n          mag: gl.NEAREST,\n          wrap: gl.CLAMP_TO_EDGE,\n        },\n      ],\n      nPixFine,\n      nPixFine\n    );\n    // Draw quad to framebuffer texture\n    twgl.bindFramebufferInfo(gl, fbFine);\n    twgl.drawBufferInfo(gl, quadBufferInfo);\n\n    // Unbind framebuffer to switch to drawing to canvas\n    twgl.bindFramebufferInfo(gl, null);\n    gl.viewport(0, 0, nPix, nPix);\n\n    // Apply PSF, pixelation and noise\n    gl.useProgram(postProgInfo.program);\n    // Create noise texture\n    const noiseTex = twgl.createTexture(gl, {\n      format: gl.LUMINANCE,\n      min: gl.NEAREST,\n      mag: gl.NEAREST,\n      wrap: gl.CLAMP_TO_EDGE,\n      width: nPix,\n      height: nPix,\n      src: noiseArray,\n    });\n    const postUniforms = {\n      u_n_pix_fine: nPixFine,\n      u_n_pix: nPix,\n      u_noise_range: noiseRange,\n      u_sigma_n: sigma_n,\n      u_max_flux: maxFlux,\n      u_low_flux: lowFlux,\n      u_high_flux: highFlux,\n      u_flux_tex: fbFine.attachments[0],\n      u_noise_tex: noiseTex,\n    };\n    twgl.setUniforms(postProgInfo, postUniforms);\n    // Draw\n    twgl.drawBufferInfo(gl, quadBufferInfo);\n  };\n\n  const drawLens = (ctx: CanvasRenderingContext2D) => {\n    const scale = ctx.canvas.width / nPix;\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    ctx.save();\n\n    // Main lens ellipse\n    ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2);\n    ctx.strokeStyle = \"#FF0000\";\n    ctx.beginPath();\n    ctx.ellipse(\n      (x_l * scale) / res,\n      -(y_l * scale) / res, // since axis is flipped\n      (r_ein / q_l / res) * scale,\n      ((r_ein * q_l) / res) * scale,\n      -(phi_lDeg * Math.PI) / 180,\n      0,\n      2 * Math.PI\n    );\n    ctx.stroke();\n\n    // Subhalo dot\n    ctx.beginPath();\n    ctx.arc(\n      (x_sh * scale) / res,\n      -(y_sh * scale) / res, // since axis is flipped\n      3,\n      0,\n      2 * Math.PI,\n      false\n    );\n    ctx.fillStyle = \"#FF0000\";\n    ctx.fill();\n\n    ctx.restore();\n  };\n\n  return (\n    <Layout>\n      <div\n        style={{\n          backgroundColor: \"#FFFFFF\",\n          minHeight: \"94vh\",\n        }}\n      >\n        {/*        <p>\n          This visualization lets you explore how changing the source galaxy,\n          lens galaxy, telescope and subhalo parameters impacts an observation\n          of a strong gravitational lens.\n        </p>*/}\n        <div\n          style={{\n            justifyContent: \"center\",\n            display: \"flex\",\n            flexDirection: \"row\",\n          }}\n        >\n          <div\n            style={{\n              width: canvasDim,\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"left\",\n              padding: \"0.5rem\",\n              paddingRight: \"5rem\",\n            }}\n          >\n            <div>\n              <h2 data-tip data-for=\"sourceHeaderTT\">\n                Source\n              </h2>\n              <ReactTooltip id=\"sourceHeaderTT\">\n                Source galaxy with no lensing\n              </ReactTooltip>\n              <Canvas\n                ctxName=\"webgl\"\n                draw={drawSource}\n                width={canvasDim}\n                height={canvasDim}\n                style={{ width: canvasDim, height: canvasDim }}\n              />\n            </div>\n            <SourceControls\n              x={x_s}\n              y={y_s}\n              phiDeg={phi_sDeg}\n              q={q_s}\n              index={index}\n              r_e={r_e}\n              setX={setXs}\n              setY={setYs}\n              setPhiDeg={setPhisDeg}\n              setQ={setQs}\n              setIndex={setIndex}\n              setRe={setRe}\n            />\n            <TelescopeControls\n              sigma_n={sigma_n}\n              setSigmaN={setSigmaN}\n              setRes={(res: number) => {\n                setRes(res);\n                const newNPix = getNPix(canvasDim, targetRange, res);\n                setNoiseArray(getNoiseTexArray(newNPix ** 2, noiseRange));\n              }}\n              resampleNoise={() =>\n                setNoiseArray(getNoiseTexArray(nPix ** 2, noiseRange))\n              }\n            />\n          </div>\n          <div\n            style={{\n              width: canvasDim,\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"left\",\n              padding: \"0.5rem\",\n              paddingLeft: \"5rem\",\n            }}\n          >\n            <div>\n              <h2 data-tip data-for=\"obsHeaderTT\">\n                Observation\n              </h2>\n              <ReactTooltip id=\"obsHeaderTT\">\n                Observation of lensed galaxy seen by telescope\n              </ReactTooltip>\n              <div\n                style={{\n                  position: \"relative\",\n                  width: canvasDim,\n                  height: canvasDim,\n                }}\n              >\n                <Canvas\n                  ctxName=\"webgl\"\n                  draw={drawImage}\n                  width={nPix}\n                  height={nPix}\n                  style={{\n                    position: \"absolute\",\n                    left: \"0px\",\n                    top: \"0px\",\n                    width: canvasDim,\n                    height: canvasDim,\n                    imageRendering: \"pixelated\",\n                    zIndex: 1,\n                  }}\n                />\n                <Canvas\n                  ctxName=\"2d\"\n                  draw={drawLens}\n                  width={canvasDim}\n                  height={canvasDim}\n                  style={{\n                    position: \"absolute\",\n                    left: \"0px\",\n                    top: \"0px\",\n                    width: canvasDim,\n                    height: canvasDim,\n                    imageRendering: \"-moz-crisp-edges\", // @ts-expect-error\n                    imageRendering: \"-webkit-crisp-edges\", // @ts-expect-error\n                    imageRendering: \"pixelated\", // @ts-expect-error\n                    imageRendering: \"crisp-edges\",\n                    zIndex: 2,\n                  }}\n                />\n              </div>\n            </div>\n            <SHControls\n              x={x_sh}\n              y={y_sh}\n              M_200c={M_200c}\n              // c_200c={c_200c}\n              // tau={tau}\n              setX={setXsh}\n              setY={setYsh}\n              setM200c={setM200c}\n              // setc200c={setc200c}\n              // setTau={setTau}\n            />\n            <LensControls\n              phiDeg={phi_lDeg}\n              q={q_l}\n              r_ein={r_ein}\n              lensLightScale={lensLightScale}\n              setPhiDeg={setPhilDeg}\n              setQ={setQl}\n              setRein={setRein}\n              setLensLightScale={setLensLightScale}\n            />\n            <ShearControls\n              gamma_1={gamma_1}\n              gamma_2={gamma_2}\n              setGamma_1={setGamma_1}\n              setGamma_2={setGamma_2}\n            />\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Page;\n"],"sourceRoot":""}