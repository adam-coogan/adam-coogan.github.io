{"version":3,"sources":["webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/browser.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/inferno.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/magma.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/plasma.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/utils/hex2rgb.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/utils/interpolate.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/utils/rgb2hex.js","webpack://adam-coogan.github.io/./node_modules/scale-color-perceptual/viridis.js","webpack://adam-coogan.github.io/./src/utils/sersic.ts","webpack://adam-coogan.github.io/./src/utils/tnfw.ts","webpack://adam-coogan.github.io/./src/utils/utils.ts","webpack://adam-coogan.github.io/./src/utils/model.ts","webpack://adam-coogan.github.io/./src/utils/sie.ts","webpack://adam-coogan.github.io/./src/pages/strong-lensing.tsx"],"names":["module","exports","inferno","magma","plasma","viridis","hex","r","parseInt","slice","g","b","hex2rgb","rgb2hex","interpolate","a","ar","ag","ab","br","bg","bb","t","interpolateArray","scaleArr","N","length","intervalWidth","intervals","i","Error","Math","floor","intervalOffset","zeroPadHex","hexStr","rgb","map","ch","round","toString","join","sersic","x","y","params","x_s","y_s","phi","q","index","r_e","I_e","k","dx","dy","x_maj","cos","sin","x_min","sqrt","exponent","exp","Om0","rho_cr","dALens","Sigma_cr","PI","c_200c_to_delta_200c","c_200c","integral_to_c","log","M_200c_to_r_200c","M_200c","virialToScale","z","cond","alpha","beta","gamma","log_10_c200","log10","massConcentrationRelation","rho_s","r_s","getCoord","idx","nPix","res","evalOnGrid","dim","upsample","fn","resFine","nPixFine","array","Float32Array","j","downsampled","blockSum","iSub","jSub","avgPool","getScaledImage","minVal","maxVal","ctx","image","createImageData","normalized","color","max","min","data","scale","canvas","width","scaled","original","target","height","c","i_original","j_original","idx_original","idx_buffer","nnInterp","srcParams","lensParams","shParams","sigma_n","scaleSHParams","tau","lensed","x_l","y_l","r_ein","rx","ry","ang","atan2","alpha_lf_scale","atan","alpha_x_lf","alpha_y_lf","alpha_x","alpha_y","alpha_sie","alpha_x_ml","alpha_y_ml","theta_s","s","f","acos","acosh","abs","l","m","alpha_scale","alpha_tnfw","alpha_x_sh","alpha_y_sh","lensedNoisy","random","Canvas","props","draw","rest","canvasRef","useRef","useEffect","current","getContext","clearRect","useCanvas","ref","ParamControls","label","value","set","description","labelBlock","style","flex","margin","data-tip","data-for","id","display","alignItems","minWidth","type","step","onChange","e","parseFloat","SourceControls","phiDeg","setX","setY","setPhiDeg","setQ","setIndex","setRe","LensControls","setRein","SHControls","setM200c","TelescopeControls","setSigmaN","setRes","onClick","useState","setXs","setYs","phi_sDeg","setPhisDeg","q_s","setQs","phi_lDeg","setPhilDeg","q_l","setQl","x_sh","setXsh","y_sh","setYsh","canvasDim","sersicParams","sieParams","tnfwParams","sourceImage","lensedImage","runLensModel","flexDirection","padding","save","fillStyle","translate","putImageData","restore","drawSource","imageSmoothingEnabled","strokeStyle","beginPath","ellipse","stroke","arc","fill","drawLensed"],"mappings":"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","file":"component---src-pages-strong-lensing-tsx-d555cbcfae59ae21e965.js","sourcesContent":["'use strict';\n\nmodule.exports = {\n  inferno: require('./inferno'),\n  magma: require('./magma'),\n  plasma: require('./plasma'),\n  viridis: require('./viridis')\n};","'use strict';\n\nmodule.exports = require('./utils/interpolate').interpolateArray(require('./hex/inferno.json'));","'use strict';\n\nmodule.exports = require('./utils/interpolate').interpolateArray(require('./hex/magma.json'));","'use strict';\n\nmodule.exports = require('./utils/interpolate').interpolateArray(require('./hex/plasma.json'));","'use strict';\n\nmodule.exports = function hex2rgb(hex) {\n  return {\n    // skip # at position 0\n    r: parseInt(hex.slice(1, 3), 16) / 255,\n    g: parseInt(hex.slice(3, 5), 16) / 255,\n    b: parseInt(hex.slice(5, 7), 16) / 255\n  };\n};","'use strict';\n\nvar hex2rgb = require('./hex2rgb');\n\nvar rgb2hex = require('./rgb2hex');\n\nfunction interpolate(a, b) {\n  a = hex2rgb(a);\n  b = hex2rgb(b);\n  var ar = a.r;\n  var ag = a.g;\n  var ab = a.b;\n  var br = b.r - ar;\n  var bg = b.g - ag;\n  var bb = b.b - ab;\n  return function (t) {\n    return rgb2hex({\n      r: ar + br * t,\n      g: ag + bg * t,\n      b: ab + bb * t\n    });\n  };\n}\n\nfunction interpolateArray(scaleArr) {\n  var N = scaleArr.length - 2; // -1 for spacings, -1 for number of interpolate fns\n\n  var intervalWidth = 1 / N;\n  var intervals = [];\n\n  for (var i = 0; i <= N; i++) {\n    intervals[i] = interpolate(scaleArr[i], scaleArr[i + 1]);\n  }\n\n  return function (t) {\n    if (t < 0 || t > 1) throw new Error('Outside the allowed range of [0, 1]');\n    var i = Math.floor(t * N);\n    var intervalOffset = i * intervalWidth;\n    return intervals[i](t / intervalWidth - intervalOffset / intervalWidth);\n  };\n}\n\nmodule.exports = {\n  interpolate: interpolate,\n  interpolateArray: interpolateArray\n};","'use strict';\n\nfunction zeroPadHex(hexStr) {\n  return '00'.slice(hexStr.length) + hexStr;\n}\n\nmodule.exports = function rgb2hex(rgb) {\n  // Map channel triplet into hex color code\n  return '#' + [rgb.r, rgb.g, rgb.b] // Convert to hex (map [0, 1] => [0, 255] => Z => [0x0, 0xff])\n  .map(function (ch) {\n    return Math.round(ch * 255).toString(16);\n  }) // Make sure each channel is two digits long\n  .map(zeroPadHex).join('');\n};","'use strict';\n\nmodule.exports = require('./utils/interpolate').interpolateArray(require('./hex/viridis.json'));","export interface SersicParams {\n  x: number;\n  y: number;\n  phi: number;\n  q: number;\n  index: number;\n  r_e: number;\n  I_e: number;\n}\n\n/*\n * Gets intensity of a Sersic source.\n */\nexport const sersic = (x: number, y: number, params: SersicParams) => {\n  const { x: x_s, y: y_s, phi, q, index, r_e, I_e } = params;\n  const k = 2 * index - 1 / 3 + 4 / 405 / index + 46 / 25515 / index ** 2;\n  const dx = x - x_s;\n  const dy = y - y_s;\n  const x_maj = dx * Math.cos(phi) + dy * Math.sin(phi);\n  const x_min = -dx * Math.sin(phi) + dy * Math.cos(phi);\n  const r = Math.sqrt(x_maj ** 2 * q + x_min ** 2 / q) / r_e;\n  const exponent = -k * (r ** (1 / index) - 1);\n  return I_e * Math.exp(exponent);\n};\n","// Constants\nconst s_min = 1e-12;\nconst G_over_c2 = 4.79e-20; // Mpc / MSol\nconst rho_cr_0 = 127052815397.49832; // MSol / Mpc**3\nconst Om0 = 0.30966;\nconst Delta = 200;\n// Lens constants\nconst zSrc = 2.5;\nconst zLens = 0.6;\nconst rho_cr = rho_cr_0 * (Om0 * (1 + zLens) ** 3 + (1 - Om0));\nconst dASrc = 1704.8621; // Mpc\nconst dALens = 1420.2484; // Mpc\nconst dComovingSrc = 5967.0171; // Mpc\nconst dComovingLens = 2272.3975; // Mpc\nconst dALS = (dComovingSrc - dComovingLens) / (1 + zSrc);\nconst Sigma_cr = 1 / ((4 * Math.PI * G_over_c2 * dALens * dALS) / dASrc);\n\nconst c_200c_to_delta_200c = (c_200c: number) => {\n  const integral_to_c = Math.log(1 + c_200c) - c_200c / (1 + c_200c);\n  return ((Delta / 3) * c_200c ** 3) / integral_to_c;\n};\n\nconst M_200c_to_r_200c = (M_200c: number) =>\n  (((3 / (4 * Math.PI)) * M_200c) / (Delta * rho_cr)) ** (1 / 3);\n\n/*\n * Redshift-dependent mass-concentration relation from Correa+ 2015.\n * https://arxiv.org/abs/1502.00391\n */\nconst massConcentrationRelation = (M_200c: number, z: number) => {\n  const cond = 4 - z;\n  const alpha =\n    cond >= 0\n      ? 1.7543 - 0.2766 * (1.0 + z) + 0.02039 * (1.0 + z) ** 2\n      : 1.3081 - 0.1078 * (1.0 + z) + 0.00398 * (1.0 + z) ** 2;\n  const beta =\n    cond >= 0\n      ? 0.2753 + 0.0035 * (1.0 + z) - 0.3038 * (1.0 + z) ** 0.0269\n      : 0.0223 - 0.0944 * (1.0 + z) ** -0.3907;\n  const gamma = cond >= 0 ? -0.01537 + 0.02102 * (1.0 + z) ** -0.1475 : 0;\n  const log_10_c200 =\n    alpha + beta * Math.log10(M_200c) * (1.0 + gamma * Math.log10(M_200c) ** 2);\n  return 10 ** log_10_c200;\n};\n\n/*\n * Convert M_200c to (rho_s, r_s) using default mass-concentration relation.\n */\nexport const virialToScale = (M_200c: number) => {\n  const c_200c = massConcentrationRelation(M_200c, zLens);\n  return {\n    rho_s: rho_cr * c_200c_to_delta_200c(c_200c),\n    r_s: M_200c_to_r_200c(M_200c) / c_200c,\n  };\n};\n\nexport interface TNFWVirialParams {\n  x: number;\n  y: number;\n  M_200c: number;\n  tau: number;\n}\n\nexport interface TNFWScaleParams {\n  x: number;\n  y: number;\n  rho_s: number;\n  r_s: number;\n  tau: number;\n}\n\nexport const alpha_tnfw = (x: number, y: number, params: TNFWScaleParams) => {\n  const { x: x_s, y: y_s, rho_s, r_s, tau } = params;\n  // Convert scale radius to angular scale\n  const theta_s = (r_s / dALens) * ((180 / Math.PI) * 60 ** 2); // arcsec\n\n  const dx = x - x_s;\n  const dy = y - y_s;\n  const s = Math.sqrt(dx ** 2 + dy ** 2) / theta_s;\n  const f =\n    (s >= 1 ? Math.acos(1 / s) : Math.acosh(1 / s)) /\n    Math.sqrt(Math.abs(s ** 2 - 1));\n  const l = Math.log((s + s_min) / (Math.sqrt(s ** 2 + tau ** 2) + tau));\n  const m =\n    ((4 * Math.PI * tau ** 2) / (tau ** 2 + 1) ** 2) *\n    ((tau ** 2 + 2 * s ** 2 - 1) * f +\n      Math.PI * tau +\n      (tau ** 2 - 1) * Math.log(tau) +\n      Math.sqrt(s ** 2 + tau ** 2) * (((tau ** 2 - 1) / tau) * l - Math.PI));\n  const k_s = (rho_s * r_s) / Sigma_cr;\n\n  const alpha_scale = (k_s * m) / Math.PI / (s + s_min) ** 2;\n  return { alpha_x: alpha_scale * dx, alpha_y: alpha_scale * dy };\n};\n","import { viridis } from \"scale-color-perceptual\";\n\nconst getCoord = (idx: number, nPix: number, res: number) =>\n  (((nPix - 1) * res) / 2) * ((2 * idx) / (nPix - 1) - 1);\n\nexport const randn = () =>\n  Math.sqrt(-2 * Math.log(1 - Math.random())) *\n  Math.cos(2 * Math.PI * Math.random());\n\n/*\n * Average-pools an array of size (nPix * upsample, nPix * upsample) to size\n * (nPix, nPix).\n */\nconst avgPool = (array: Float32Array, upsample: number) => {\n  const nPix = Math.sqrt(array.length) / upsample;\n  const downsampled = new Float32Array(nPix ** 2);\n  for (let i = 0; i < nPix; i += 1) {\n    for (let j = 0; j < nPix; j += 1) {\n      // Loop over subblock of fine grid\n      let blockSum = 0;\n      for (let iSub = 0; iSub < upsample; iSub += 1) {\n        for (let jSub = 0; jSub < upsample; jSub += 1) {\n          blockSum +=\n            array[\n              nPix * upsample * (i * upsample + iSub) + (j * upsample + jSub)\n            ];\n        }\n      }\n      downsampled[nPix * i + j] = blockSum / upsample ** 2;\n    }\n  }\n  return downsampled;\n};\n\n/*\n * Perform lensing calculations.\n */\nexport const evalOnGrid = (\n  res: number,\n  dim: number,\n  upsample: number,\n  fn: (x: number, y: number) => number\n) => {\n  const nPix = Math.round(dim / res);\n  const resFine = res / upsample;\n  const nPixFine = nPix * upsample;\n\n  // Get pixel values on fine grid\n  const array = new Float32Array(nPixFine ** 2);\n  for (let i = 0; i < nPixFine; i += 1) {\n    for (let j = 0; j < nPixFine; j += 1) {\n      // Map index to coordinates, flipping y due to canvas coordinates\n      let x = getCoord(j, nPixFine, resFine);\n      let y = -getCoord(i, nPixFine, resFine);\n\n      array[nPixFine * i + j] = fn(x, y);\n    }\n  }\n\n  return avgPool(array, upsample);\n};\n\n/*\n * Upsamples an image to a larger grid.\n */\nconst nnInterp = (original: ImageData, target: ImageData) => {\n  const scale = target.width / original.width;\n  for (let i = 0; i < target.width; i += 1) {\n    for (let j = 0; j < target.height; j += 1) {\n      for (let c = 0; c < 4; c += 1) {\n        // Find indices in original array\n        let i_original = Math.floor(i / scale);\n        let j_original = Math.floor(j / scale);\n        let idx_original = i_original * original.width * 4 + j_original * 4 + c;\n\n        let idx_buffer = i * target.width * 4 + j * 4 + c;\n\n        target.data[idx_buffer] = original.data[idx_original];\n      }\n    }\n  }\n};\n\n/*\n * Converts an array to a scaled grid of pixels in a canvas context.\n */\nexport const getScaledImage = (\n  array: Float32Array,\n  minVal: number,\n  maxVal: number,\n  ctx: CanvasRenderingContext2D\n) => {\n  // Convert flux array to color image\n  const nPix = Math.sqrt(array.length);\n  const image = ctx.createImageData(nPix, nPix);\n  for (let i = 0; i < nPix; i += 1) {\n    for (let j = 0; j < nPix; j += 1) {\n      let idx = nPix * i + j;\n      let normalized = (array[idx] - minVal) / (maxVal - minVal);\n      let color = viridis(Math.max(0, Math.min(1, normalized)));\n      image.data[4 * idx + 0] = parseInt(color.slice(1, 3), 16);\n      image.data[4 * idx + 1] = parseInt(color.slice(3, 5), 16);\n      image.data[4 * idx + 2] = parseInt(color.slice(5, 7), 16);\n      image.data[4 * idx + 3] = 256;\n    }\n  }\n\n  // Upsample to make pixels visible and draw\n  // TODO: there should be a better way to do this.\n  const scale = ctx.canvas.width / nPix;\n  const scaled = ctx.createImageData(\n    Math.round(nPix * scale),\n    Math.round(nPix * scale)\n  );\n  nnInterp(image, scaled);\n\n  return scaled;\n};\n","import { sersic, SersicParams } from \"./sersic\";\nimport { alpha_sie, SIEParams } from \"./sie\";\nimport { alpha_tnfw, TNFWVirialParams, virialToScale } from \"./tnfw\";\nimport { evalOnGrid, randn } from \"./utils\";\n\n/*\n * Perform lensing calculations.\n */\nconst runLensModel = (\n  srcParams: SersicParams,\n  lensParams: SIEParams,\n  shParams: TNFWVirialParams,\n  res: number,\n  dim: number,\n  upsample: number,\n  sigma_n: number\n) => {\n  // Convert virial to scale parameters\n  const scaleSHParams = {\n    x: shParams.x,\n    y: shParams.y,\n    tau: shParams.tau,\n    ...virialToScale(shParams.M_200c),\n  };\n\n  // Apply lensing equation\n  const lensFn = (x: number, y: number) => {\n    const { alpha_x: alpha_x_ml, alpha_y: alpha_y_ml } = alpha_sie(\n      x,\n      y,\n      lensParams\n    );\n    const { alpha_x: alpha_x_sh, alpha_y: alpha_y_sh } = alpha_tnfw(\n      x,\n      y,\n      scaleSHParams\n    );\n    const alpha_x = alpha_x_ml + alpha_x_sh;\n    const alpha_y = alpha_y_ml + alpha_y_sh;\n    return sersic(x - alpha_x, y - alpha_y, srcParams);\n  };\n\n  const lensed = evalOnGrid(res, dim, upsample, lensFn);\n\n  // Add noise if necessary\n  if (sigma_n <= 0) {\n    return lensed;\n  } else {\n    const lensedNoisy = new Float32Array(Math.round(dim / res) ** 2);\n    for (let i = 0; i < lensed.length; i += 1) {\n      lensedNoisy[i] = lensed[i] + sigma_n * randn();\n    }\n    return lensedNoisy;\n  }\n};\n\nexport default runLensModel;\n","export interface SIEParams {\n  x: number;\n  y: number;\n  phi: number;\n  q: number;\n  r_ein: number;\n}\n\n/*\n * Gets deflection field for a singular isothermal ellipsoid.\n */\nexport const alpha_sie = (x: number, y: number, params: SIEParams) => {\n  const { x: x_l, y: y_l, phi, q, r_ein } = params;\n\n  // Transform to elliptical coordinates\n  const dx = x - x_l;\n  const dy = y - y_l;\n  const rx = (dx * Math.cos(phi) + dy * Math.sin(phi)) * Math.sqrt(q);\n  const ry = (-dx * Math.sin(phi) + dy * Math.cos(phi)) / Math.sqrt(q);\n  const ang = Math.atan2(ry, rx);\n\n  // Deflection field in lens frame\n  const alpha_lf_scale =\n    2 *\n    r_ein *\n    Math.sqrt(q / (1 - q ** 2)) *\n    Math.atan(Math.sqrt((1 - q) / (1 + q)));\n  const alpha_x_lf = alpha_lf_scale * Math.cos(ang);\n  const alpha_y_lf = alpha_lf_scale * Math.sin(ang);\n\n  // Deflection field in image frame\n  const alpha_x = alpha_x_lf * Math.cos(phi) - alpha_y_lf * Math.sin(phi);\n  const alpha_y = alpha_y_lf * Math.cos(phi) + alpha_x_lf * Math.sin(phi);\n\n  return { alpha_x, alpha_y };\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport runLensModel from \"../utils/model\";\nimport { sersic } from \"../utils/sersic\";\nimport { SIEParams } from \"../utils/sie\";\nimport { TNFWVirialParams } from \"../utils/tnfw\";\nimport { evalOnGrid, getScaledImage } from \"../utils/utils\";\n\nconst useCanvas = (draw: (ctx: CanvasRenderingContext2D) => void) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    draw(ctx);\n  }, [draw]);\n\n  return canvasRef;\n};\n\ninterface CanvasProps {\n  draw: (ctx: CanvasRenderingContext2D) => void;\n  [rest: string]: any;\n}\n\nconst Canvas = (props: CanvasProps) => {\n  const { draw, ...rest } = props;\n  const canvasRef = useCanvas(draw);\n  return <canvas ref={canvasRef} {...rest} />;\n};\n\ninterface ParamControlsProps {\n  label: string;\n  value: number;\n  set: (newVal: number) => void;\n  min: number;\n  max: number;\n  description?: string;\n}\n\nconst ParamControls = ({\n  label,\n  value,\n  set,\n  min,\n  max,\n  description,\n}: ParamControlsProps) => {\n  const labelBlock = description ? (\n    <>\n      <label\n        style={{ flex: 2, margin: \"0.2rem\" }}\n        data-tip\n        data-for={description}\n      >\n        {label}\n      </label>\n      <ReactTooltip id={description}>{description}</ReactTooltip>{\" \"}\n    </>\n  ) : (\n    <label style={{ flex: 2, margin: \"0.2rem\" }}>{label}</label>\n  );\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n      }}\n    >\n      {labelBlock}\n      <input\n        style={{ flex: 1, margin: \"0.2rem\", minWidth: 0 }}\n        type=\"text\"\n        min={min}\n        max={max}\n        step={0.001}\n        value={value}\n        onChange={(e) => set(parseFloat(e.target.value))}\n      />\n      <input\n        style={{ flex: 3, margin: \"0.2rem\" }}\n        type=\"range\"\n        min={min}\n        max={max}\n        step={0.001}\n        value={value}\n        onChange={(e) => set(parseFloat(e.target.value))}\n      />\n    </div>\n  );\n};\n\nconst drawSource = (\n  sourceImage: Float32Array,\n  minVal: number,\n  maxVal: number,\n  ctx: CanvasRenderingContext2D\n) => {\n  ctx.save();\n\n  ctx.fillStyle = \"#000000\";\n  ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2);\n\n  // Draw source\n  const image = getScaledImage(sourceImage, minVal, maxVal, ctx);\n  ctx.putImageData(image, 0, 0);\n\n  ctx.restore();\n};\n\nconst drawLensed = (\n  lensedImage: Float32Array,\n  sieParams: SIEParams,\n  tnfwParams: TNFWVirialParams,\n  res: number,\n  minVal: number,\n  maxVal: number,\n  ctx: CanvasRenderingContext2D\n) => {\n  ctx.save();\n\n  ctx.fillStyle = \"#000000\";\n  ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2);\n  ctx.imageSmoothingEnabled = false;\n\n  // Draw observation\n  const image = getScaledImage(lensedImage, minVal, maxVal, ctx);\n  ctx.putImageData(image, 0, 0);\n\n  // Draw critical curve\n  const nPix = Math.sqrt(lensedImage.length);\n  const scale = ctx.canvas.width / nPix;\n  ctx.strokeStyle = \"#FF0000\";\n  ctx.beginPath();\n  ctx.ellipse(\n    sieParams.x,\n    sieParams.y,\n    (sieParams.r_ein / sieParams.q / res) * scale,\n    ((sieParams.r_ein * sieParams.q) / res) * scale,\n    -sieParams.phi,\n    0,\n    2 * Math.PI\n  );\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.arc(\n    (tnfwParams.x * scale) / res,\n    -(tnfwParams.y * scale) / res, // since axis is flipped\n    3,\n    0,\n    2 * Math.PI,\n    false\n  );\n  ctx.fillStyle = \"#FF0000\";\n  ctx.fill();\n\n  ctx.restore();\n};\n\nconst SourceControls = ({\n  x,\n  y,\n  phiDeg,\n  q,\n  index,\n  r_e,\n  setX,\n  setY,\n  setPhiDeg,\n  setQ,\n  setIndex,\n  setRe,\n}) => (\n  <div>\n    <h2>Source parameters</h2>\n    <ParamControls\n      label=\"Position (x) ['']\"\n      value={x}\n      set={setX}\n      min={-5}\n      max={5}\n    />\n    <ParamControls\n      label=\"Position (y) ['']\"\n      value={y}\n      set={setY}\n      min={-5}\n      max={5}\n    />\n    <ParamControls\n      label=\"Orientation (ϕ) [deg]\"\n      value={phiDeg}\n      set={setPhiDeg}\n      min={-180}\n      max={180}\n      description=\"Orientation of source relative to x-axis\"\n    />\n    <ParamControls\n      label=\"Ellipticity (q)\"\n      value={q}\n      set={setQ}\n      min={0.15}\n      max={0.9999}\n      description=\"Controls whether source is circular (q=1) or elliptical (q=0)\"\n    />\n    <ParamControls\n      label=\"Index\"\n      value={index}\n      set={setIndex}\n      min={0.5}\n      max={5}\n      description=\"Higher values cause source brightness to decrease sharply with radius\"\n    />\n    <ParamControls\n      label=\"Size (r_e) ['']\"\n      value={r_e}\n      set={setRe}\n      min={0.0001}\n      max={10}\n      description=\"Sets the size of the source\"\n    />\n  </div>\n);\n\nconst LensControls = ({ phiDeg, q, r_ein, setPhiDeg, setQ, setRein }) => (\n  <div>\n    <h2>Lens parameters</h2>\n    <ParamControls\n      label=\"Orientation (ϕ) [deg]\"\n      value={phiDeg}\n      set={setPhiDeg}\n      min={-180}\n      max={180}\n      description=\"Orientation of lens relative to x-axis\"\n    />\n    <ParamControls\n      label=\"Ellipticity (q)\"\n      value={q}\n      set={setQ}\n      min={0.15}\n      max={0.9999}\n      description=\"Controls whether lens is circular (q=1) or elliptical (q=0)\"\n    />\n    <ParamControls\n      label=\"Einstein radius (r_ein)\"\n      value={r_ein}\n      set={setRein}\n      min={0.0001}\n      max={2.5}\n      description=\"Sets the size of the lens\"\n    />\n  </div>\n);\n\nconst SHControls = ({ x, y, M_200c, setX, setY, setM200c }) => (\n  <div>\n    <h2>Subhalo parameters</h2>\n    <ParamControls\n      label=\"Position (x) ['']\"\n      value={x}\n      set={setX}\n      min={-2.5}\n      max={2.5}\n    />\n    <ParamControls\n      label=\"Position (y) ['']\"\n      value={y}\n      set={setY}\n      min={-2.5}\n      max={2.5}\n    />\n    <ParamControls\n      label=\"Mass (M_200c) [M_sun]\"\n      value={M_200c}\n      set={setM200c}\n      min={1e5}\n      max={10 ** 10.5}\n      description=\"Subhalo mass in radius where density is 200 times rho_cr\"\n    />\n  </div>\n);\n\nconst TelescopeControls = ({ sigma_n, setSigmaN, setRes }) => (\n  <div>\n    <h2>Telescope</h2>\n    <ParamControls\n      label=\"Noise level\"\n      value={sigma_n}\n      set={setSigmaN}\n      min={0}\n      max={2.5}\n      description=\"Telescope noise level\"\n    />\n    <div>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.012)}>\n        ELT\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.031)}>\n        JWST\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.05)}>\n        Hubble Space Telescope\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.1)}>\n        Euclid\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.7)}>\n        Rubin Observatory\n      </button>\n    </div>\n  </div>\n);\n\nconst Lens = () => {\n  // Source parameters\n  const [x_s, setXs] = useState(0.05);\n  const [y_s, setYs] = useState(0.1);\n  const [phi_sDeg, setPhisDeg] = useState(40.107);\n  const [q_s, setQs] = useState(0.5);\n  const [index, setIndex] = useState(4.0);\n  const [r_e, setRe] = useState(5.0);\n  const I_e = 0.05;\n\n  // Main lens parameters\n  const x_l = 0.0; // const [x_l, setXl] = useState(0.0);\n  const y_l = 0.0; // const [y_l, setYl] = useState(0.0);\n  const [phi_lDeg, setPhilDeg] = useState(57.296);\n  const [q_l, setQl] = useState(0.75);\n  const [r_ein, setRein] = useState(1.5);\n\n  // Subhalo parameters\n  const [x_sh, setXsh] = useState(-1.1);\n  const [y_sh, setYsh] = useState(-1.1);\n  const [M_200c, setM200c] = useState(1e10);\n  const tau = 6.0;\n\n  // Telescope parameters\n  const [res, setRes] = useState(0.1);\n  const [sigma_n, setSigmaN] = useState(0);\n\n  // Misc constants\n  const dim = 5; // arcsec\n  const upsample = 4;\n  const canvasDim = 480;\n\n  // Package everything up\n  const sersicParams = {\n    x: x_s,\n    y: y_s,\n    phi: (phi_sDeg * Math.PI) / 180,\n    q: q_s,\n    index,\n    r_e,\n    I_e,\n  };\n  const sieParams = {\n    x: x_l,\n    y: y_l,\n    phi: (phi_lDeg * Math.PI) / 180,\n    q: q_l,\n    r_ein,\n  };\n  const tnfwParams = {\n    x: x_sh,\n    y: y_sh,\n    M_200c,\n    tau,\n  };\n\n  // Source without lensing\n  const sourceImage = evalOnGrid(res, dim, upsample, (x, y) =>\n    sersic(x, y, sersicParams)\n  );\n\n  // Lensed image\n  const lensedImage = runLensModel(\n    sersicParams,\n    sieParams,\n    tnfwParams,\n    res,\n    dim,\n    upsample,\n    sigma_n\n  );\n\n  // Set color scale\n  const minVal = -3; // Math.min(...lensed);\n  const maxVal = 18; // Math.max(...lensed);\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"left\",\n          padding: \"0.5rem\",\n        }}\n      >\n        <div>\n          <h2 data-tip data-for=\"sourceHeaderTT\">\n            Source\n          </h2>\n          <ReactTooltip id=\"sourceHeaderTT\">\n            Source galaxy with no lensing\n          </ReactTooltip>\n          <Canvas\n            draw={(ctx: CanvasRenderingContext2D) =>\n              drawSource(sourceImage, minVal, maxVal, ctx)\n            }\n            width={canvasDim}\n            height={canvasDim}\n          />\n        </div>\n        <SourceControls\n          x={x_s}\n          y={y_s}\n          phiDeg={phi_sDeg}\n          q={q_s}\n          index={index}\n          r_e={r_e}\n          setX={setXs}\n          setY={setYs}\n          setPhiDeg={setPhisDeg}\n          setQ={setQs}\n          setIndex={setIndex}\n          setRe={setRe}\n        />\n        <TelescopeControls\n          sigma_n={sigma_n}\n          setSigmaN={setSigmaN}\n          setRes={setRes}\n        />\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"left\",\n          padding: \"0.5rem\",\n        }}\n      >\n        <div>\n          <h2 data-tip data-for=\"obsHeaderTT\">\n            Observation\n          </h2>\n          <ReactTooltip id=\"obsHeaderTT\">\n            Observation of lensed galaxy seen by telescope\n          </ReactTooltip>\n          <Canvas\n            draw={(ctx: CanvasRenderingContext2D) =>\n              drawLensed(\n                lensedImage,\n                sieParams,\n                tnfwParams,\n                res,\n                minVal,\n                maxVal,\n                ctx\n              )\n            }\n            width={canvasDim}\n            height={canvasDim}\n          />\n        </div>\n        <LensControls\n          phiDeg={phi_lDeg}\n          q={q_l}\n          r_ein={r_ein}\n          setPhiDeg={setPhilDeg}\n          setQ={setQl}\n          setRein={setRein}\n        />\n        <SHControls\n          x={x_sh}\n          y={y_sh}\n          M_200c={M_200c}\n          // c_200c={c_200c}\n          // tau={tau}\n          setX={setXsh}\n          setY={setYsh}\n          setM200c={setM200c}\n          // setc200c={setc200c}\n          // setTau={setTau}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Lens;\n"],"sourceRoot":""}