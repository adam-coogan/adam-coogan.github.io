{"version":3,"sources":["webpack://adam-coogan.github.io/./src/utils/shaders.tsx","webpack://adam-coogan.github.io/./src/utils/webglutils.tsx","webpack://adam-coogan.github.io/./src/pages/webgl.tsx"],"names":["vsSource","createShader","gl","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","fsPostSource","upsample","range","i","j","toFixed","getFSPost","Canvas","props","draw","rest","canvasRef","useRef","useEffect","current","getContext","useCanvas","ref","ParamControls","label","value","set","min","max","description","labelBlock","style","flex","margin","data-tip","data-for","id","display","alignItems","minWidth","step","onChange","e","parseFloat","target","SourceControls","x","y","phiDeg","q","index","r_e","setX","setY","setPhiDeg","setQ","setIndex","setRe","LensControls","r_ein","setRein","TelescopeControls","sigma_n","setSigmaN","setRes","resampleNoise","onClick","initProgram","fsSource","program","vertexShader","fragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","VERTEX_SHADER","FRAGMENT_SHADER","viewport","canvas","width","height","clearColor","clear","COLOR_BUFFER_BIT","getNoiseTexArray","size","noiseRange","Uint8Array","from","length","Math","floor","randn","getNPix","canvasDim","targetRange","res","ceil","useState","x_s","setXs","y_s","setYs","phi_sDeg","setPhisDeg","q_s","setQs","phi_lDeg","setPhilDeg","q_l","setQl","nPix","nPixFine","noiseArray","setNoiseArray","lensProgram","postProgram","useProgram","xSLoc","getUniformLocation","ySLoc","phiSLoc","qSLoc","indexLoc","rELoc","IELoc","uniform1f","PI","xLLoc","yLLoc","phiLLoc","qLLoc","rEinLoc","fluxTex","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","posAttribLoc","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","bufferData","Float32Array","STATIC_DRAW","drawArrays","TRIANGLES","nPixFineLoc","nPixLoc","activeTexture","TEXTURE0","uniform1i","noiseTex","pixelStorei","UNPACK_ALIGNMENT","LUMINANCE","imageRendering","newNPix"],"mappings":"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","file":"component---src-pages-webgl-tsx-c67af34ff39adf4acd4e.js","sourcesContent":["/*\n * Shaders for lensing.\n *\n * Average pooling references\n * - https://stackoverflow.com/questions/5879403/opengl-texture-coordinates-in-pixel-space\n * - https://computergraphics.stackexchange.com/questions/5724/glsl-can-someone-explain-why-gl-fragcoord-xy-screensize-is-performed-and-for\n */\n\nexport const vsSource = `\nattribute vec2 a_position;\n\nuniform float u_range;\nuniform vec2 u_translation;\n\nvarying vec2 v_xy;\nvarying vec2 v_texcoord;\n\nvoid main() {\n  gl_PointSize = 1.0;\n  v_xy = a_position * u_range; // image coordinates\n  v_texcoord = a_position * 0.5 + 0.5; // texture coordinates\n  gl_Position = vec4(a_position, 0, 1);\n}\n`;\n\nexport const fsLensSource = `\nprecision mediump float;\n\n// Source parameters\nuniform float u_x_s;\nuniform float u_y_s;\nuniform float u_phi_s;\nuniform float u_q_s;\nuniform float u_index;\nuniform float u_r_e;\nuniform float u_I_e;\n// Main lens parameters\nuniform float u_x_l;\nuniform float u_y_l;\nuniform float u_phi_l;\nuniform float u_q_l;\nuniform float u_r_ein;\n// Intermediate flux scale\nuniform float u_max_flux;\n\n// Image positions\nvarying vec2 v_xy;\n\n// varying vec2 v_texcoord;\n\nfloat sersic(float x, float y) {\n  // Position relative to source\n  float dx = x - u_x_s;\n  float dy = y - u_y_s;\n\n  float k = 2.0 * u_index - 1.0 / 3.0 + 4.0 / 405.0 / u_index + 46.0 / 25515.0 / (u_index * u_index);\n  float x_maj = dx * cos(u_phi_s) + dy * sin(u_phi_s);\n  float x_min = -dx * sin(u_phi_s) + dy * cos(u_phi_s);\n  float r = sqrt(x_maj * x_maj * u_q_s + x_min * x_min / u_q_s) / u_r_e;\n  float exponent = -k * (pow(r, 1.0 / u_index) - 1.0);\n  return u_I_e * exp(exponent);\n}\n\nvec2 alpha_sie(float x, float y) {\n  // Transform to elliptical coordinates\n  float dx = x - u_x_l;\n  float dy = y - u_y_l;\n  float rx = (dx * cos(u_phi_l) + dy * sin(u_phi_l)) * sqrt(u_q_l);\n  float ry = (-dx * sin(u_phi_l) + dy * cos(u_phi_l)) / sqrt(u_q_l);\n  float ang = atan(ry, rx);\n\n  // Deflection field in lens frame\n  float alpha_lf_scale =\n    2.0 *\n    u_r_ein *\n    sqrt(u_q_l / (1.0 - u_q_l * u_q_l)) *\n    atan(sqrt((1.0 - u_q_l) / (1.0 + u_q_l)));\n  float alpha_x_lf = alpha_lf_scale * cos(ang);\n  float alpha_y_lf = alpha_lf_scale * sin(ang);\n\n  // Deflection field in image frame\n  float alpha_x = alpha_x_lf * cos(u_phi_l) - alpha_y_lf * sin(u_phi_l);\n  float alpha_y = alpha_x_lf * sin(u_phi_l) + alpha_y_lf * cos(u_phi_l);\n\n  return vec2(alpha_x, alpha_y);\n}\n\n// Rescales the flux to (0, 1) and sets to R component of color\nvec4 flux_to_r(float flux) {\n  float unclipped = flux / u_max_flux;\n  float clipped = step(0.0, unclipped) * step(0.0, 1.0 - unclipped) * unclipped\n      + step(1.0, unclipped);\n  return vec4(clipped, 0, 0, 1);\n}\n\nvoid main() {\n  vec2 xy_lensed = v_xy - alpha_sie(v_xy[0], v_xy[1]);\n  float flux = sersic(xy_lensed[0], xy_lensed[1]);\n  gl_FragColor = flux_to_r(flux);\n\n  // // DEBUG: single red pixel\n  // float upsample = 2.0;\n  // vec2 coord = 2.0 * (v_texcoord - 0.5); // texture coordinates\n  // gl_FragColor = vec4(\n  //   step(0.0, coord[0]) *\n  //   step(-0.5 / upsample, -coord[0]) *\n  //   step(0.0, coord[1]) *\n  //   step(-0.5 / upsample, -coord[1]),\n  //   0,\n  //   0,\n  //   1\n  // );\n}\n`;\n\nexport const getFSPost = (upsample: number) => {\n  let source = `\nprecision mediump float;\n\nvarying vec2 v_texcoord;\n\n// Noise-free fluxes\nuniform sampler2D u_flux_tex;\n// Noise array\nuniform sampler2D u_noise_tex;\n// Pixelation info\nuniform float u_n_pix_fine;\nuniform float u_n_pix;\n// Intermediate flux scale\nuniform float u_max_flux;\n// Noise scale\nuniform float u_noise_range;\nuniform float u_sigma_n;\n// Flux scale\nuniform float u_low_flux;\nuniform float u_high_flux;\n\n// From https://www.shadertoy.com/view/WlfXRN\nvec3 viridis(float t) {\n  const vec3 c0 = vec3(0.2777273272234177, 0.005407344544966578, 0.3340998053353061);\n  const vec3 c1 = vec3(0.1050930431085774, 1.404613529898575, 1.384590162594685);\n  const vec3 c2 = vec3(-0.3308618287255563, 0.214847559468213, 0.09509516302823659);\n  const vec3 c3 = vec3(-4.634230498983486, -5.799100973351585, -19.33244095627987);\n  const vec3 c4 = vec3(6.228269936347081, 14.17993336680509, 56.69055260068105);\n  const vec3 c5 = vec3(4.776384997670288, -13.74514537774601, -65.35303263337234);\n  const vec3 c6 = vec3(-5.435455855934631, 4.645852612178535, 26.3124352495832);\n\n  return c0 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * (c5 + t * c6)))));\n}\n\nfloat unrescale_flux(float r) {\n  return r * u_max_flux;\n}\n\nfloat unrescale_noise(float n) {\n  return 2.0 * (n - 0.5) * u_noise_range * u_sigma_n * 0.5;\n}\n\nfloat rescale_clip_flux(float flux) {\n  float unclipped = (flux - u_low_flux) / (u_high_flux - u_low_flux);\n  return (\n    step(0.0, unclipped) *\n    step(0.0, 1.0 - unclipped) *\n    unclipped + step(1.0, unclipped)\n  );\n}\n\nvec4 flux_to_noisy_rgba(float flux) {\n  float scaled_noise = texture2D(u_noise_tex, v_texcoord).x;\n  float noisy_flux = unrescale_flux(flux) + unrescale_noise(scaled_noise);\n  return vec4(viridis(rescale_clip_flux(noisy_flux)), 1);\n}\n\nvoid main() {\n  float avg_flux = (\n`;\n  const range = (upsample - 1) / 2;\n  for (let i = -range; i <= range; i++) {\n    source += \"    //\\n\";\n    for (let j = -range; j <= range; j++) {\n      // Gets center of texture pixel and adds offset to average over fine\n      // texture's pixels\n      source +=\n        `    texture2D(u_flux_tex, gl_FragCoord.xy / u_n_pix + vec2(${j.toFixed(\n          1\n        )}, ${i.toFixed(1)}) / u_n_pix_fine).x` +\n        (j === range && i === range ? \"\" : \" +\") +\n        \"\\n\";\n    }\n  }\n\n  source += `  ) / ${(upsample ** 2).toFixed(1)};\\n`;\n  source += `  gl_FragColor = flux_to_noisy_rgba(avg_flux);`\n  source += \"\\n}\";\n\n  return source;\n};\n","/*\n * Create shader, add source code and compile, checking for errors.\n */\nexport const createShader = (\n  gl: WebGLRenderingContext,\n  type: number,\n  source: string\n) => {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) return shader;\n\n  console.log(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n};\n\n/*\n * Links shaders into a program.\n */\nexport const createProgram = (\n  gl: WebGLRenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader\n) => {\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) return program;\n\n  console.log(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n};\n\nexport const resizeCanvasToDisplaySize = (canvas: HTMLCanvasElement) => {\n  // Lookup the size the browser is displaying the canvas in CSS pixels.\n  const displayWidth = canvas.clientWidth;\n  const displayHeight = canvas.clientHeight;\n\n  // Check if the canvas is not the same size.\n  const needResize =\n    canvas.width !== displayWidth || canvas.height !== displayHeight;\n\n  if (needResize) {\n    // Make the canvas the same size\n    canvas.width = displayWidth;\n    canvas.height = displayHeight;\n  }\n\n  return needResize;\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport { fsLensSource, getFSPost, vsSource } from \"../utils/shaders\";\nimport { createProgram, createShader } from \"../utils/webglutils\";\nimport { randn } from \"../utils/utils\";\n// import twgl from \"twgl.js\";\n\n/*\n * The plan\n * --------\n * - Switch to twgl\n * - Separate initialization and drawing steps\n * - Figure out how to show source\n * - Add subhalo\n * - Show lens ellipse and subhalo dot\n * - Show difference between images with and without subhalo\n */\n\n// Generate post-processesing shader\nconst UPSAMPLE = 4;\nconst fsPostSource = getFSPost(UPSAMPLE);\n\nconst useCanvas = (draw: (gl: WebGLRenderingContext) => void) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const gl = canvas.getContext(\"webgl\");\n    if (!gl) console.log(\"no webgl!\");\n    draw(gl);\n  }, [draw]);\n\n  return canvasRef;\n};\n\ninterface CanvasProps {\n  draw: (gl: WebGLRenderingContext) => void;\n  [rest: string]: any;\n}\n\nconst Canvas = (props: CanvasProps) => {\n  const { draw, ...rest } = props;\n  const canvasRef = useCanvas(draw);\n  return <canvas ref={canvasRef} {...rest} />;\n};\n\ninterface ParamControlsProps {\n  label: string;\n  value: number;\n  set: (newVal: number) => void;\n  min: number;\n  max: number;\n  description?: string;\n}\n\nconst ParamControls = ({\n  label,\n  value,\n  set,\n  min,\n  max,\n  description,\n}: ParamControlsProps) => {\n  const labelBlock = description ? (\n    <>\n      <label\n        style={{ flex: 2, margin: \"0.2rem\" }}\n        data-tip\n        data-for={description}\n      >\n        {label}\n      </label>\n      <ReactTooltip id={description}>{description}</ReactTooltip>{\" \"}\n    </>\n  ) : (\n    <label style={{ flex: 2, margin: \"0.2rem\" }}>{label}</label>\n  );\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n      }}\n    >\n      {labelBlock}\n      <input\n        style={{ flex: 1, margin: \"0.2rem\", minWidth: 0 }}\n        type=\"text\"\n        min={min}\n        max={max}\n        step={0.001}\n        value={value}\n        onChange={(e) => set(parseFloat(e.target.value))}\n      />\n      <input\n        style={{ flex: 3, margin: \"0.2rem\" }}\n        type=\"range\"\n        min={min}\n        max={max}\n        step={0.001}\n        value={value}\n        onChange={(e) => set(parseFloat(e.target.value))}\n      />\n    </div>\n  );\n};\n\nconst SourceControls = ({\n  x,\n  y,\n  phiDeg,\n  q,\n  index,\n  r_e,\n  setX,\n  setY,\n  setPhiDeg,\n  setQ,\n  setIndex,\n  setRe,\n}) => (\n  <div>\n    <h2>Source parameters</h2>\n    <ParamControls\n      label=\"Position (x) ['']\"\n      value={x}\n      set={setX}\n      min={-2.5}\n      max={2.5}\n    />\n    <ParamControls\n      label=\"Position (y) ['']\"\n      value={y}\n      set={setY}\n      min={-2.5}\n      max={2.5}\n    />\n    <ParamControls\n      label=\"Orientation (ϕ) [deg]\"\n      value={phiDeg}\n      set={setPhiDeg}\n      min={-180}\n      max={180}\n      description=\"Orientation of source relative to x-axis\"\n    />\n    <ParamControls\n      label=\"Ellipticity (q)\"\n      value={q}\n      set={setQ}\n      min={0.15}\n      max={0.9999}\n      description=\"Controls whether source is circular (q=1) or elliptical (q=0)\"\n    />\n    <ParamControls\n      label=\"Index\"\n      value={index}\n      set={setIndex}\n      min={0.5}\n      max={5}\n      description=\"Higher values cause source brightness to decrease sharply with radius\"\n    />\n    <ParamControls\n      label=\"Size (r_e) ['']\"\n      value={r_e}\n      set={setRe}\n      min={0.0001}\n      max={10}\n      description=\"Sets the size of the source\"\n    />\n  </div>\n);\n\nconst LensControls = ({ phiDeg, q, r_ein, setPhiDeg, setQ, setRein }) => (\n  <div>\n    <h2>Lens parameters</h2>\n    <ParamControls\n      label=\"Orientation (ϕ) [deg]\"\n      value={phiDeg}\n      set={setPhiDeg}\n      min={-180}\n      max={180}\n      description=\"Orientation of lens relative to x-axis\"\n    />\n    <ParamControls\n      label=\"Ellipticity (q)\"\n      value={q}\n      set={setQ}\n      min={0.15}\n      max={0.9999}\n      description=\"Controls whether lens is circular (q=1) or elliptical (q=0)\"\n    />\n    <ParamControls\n      label=\"Einstein radius (r_ein)\"\n      value={r_ein}\n      set={setRein}\n      min={0.0001}\n      max={2.5}\n      description=\"Sets the size of the lens\"\n    />\n  </div>\n);\n\nconst TelescopeControls = ({ sigma_n, setSigmaN, setRes, resampleNoise }) => (\n  <div>\n    <h2>Telescope</h2>\n    <ParamControls\n      label=\"Noise level\"\n      value={sigma_n}\n      set={setSigmaN}\n      min={0}\n      max={3.0}\n      description=\"Telescope noise level\"\n    />\n    <button style={{ margin: \"0.1rem\" }} onClick={() => resampleNoise()}>\n      Resample noise\n    </button>\n    <div>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.012)}>\n        ELT\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.031)}>\n        JWST\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.05)}>\n        Hubble Space Telescope\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.1)}>\n        Euclid\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(0.7)}>\n        Rubin Observatory\n      </button>\n      <button style={{ margin: \"0.1rem\" }} onClick={() => setRes(1.25)}>\n        Chunky\n      </button>\n    </div>\n  </div>\n);\n\n/*\n * Initialize shaders and program.\n */\nconst initProgram = (\n  gl: WebGLRenderingContext,\n  vsSource: string,\n  fsSource: string\n) => {\n  // Create shaders\n  const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n  const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n  // Link shaders into a program\n  const program = createProgram(gl, vertexShader, fragmentShader);\n  // Make canvas match display size\n  //resizeCanvasToDisplaySize(gl.canvas);\n  // Tell webgl clip space (-1, +1) maps to (0, width) and (0, height)\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n  // Set clear color\n  gl.clearColor(0.0, 0.0, 1.0, 0.5);\n  // Clear canvas\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  return program;\n};\n\nconst getNoiseTexArray = (size: number, noiseRange: number) =>\n  // Clamp to noise range, then rescale to [0, 1]\n  Uint8Array.from({ length: size }, () =>\n    Math.floor(\n      (256 *\n        (Math.max(-noiseRange, Math.min(noiseRange, randn())) + noiseRange)) /\n        (2 * noiseRange)\n    )\n  );\n\nconst getNPix = (canvasDim: number, targetRange: number, res: number) =>\n  Math.min(canvasDim, Math.ceil((2 * targetRange) / res));\n\nconst Page = () => {\n  // Source parameters\n  const [x_s, setXs] = useState(0.05);\n  const [y_s, setYs] = useState(0.1);\n  const [phi_sDeg, setPhisDeg] = useState(40.107);\n  const [q_s, setQs] = useState(0.5);\n  const [index, setIndex] = useState(4.0);\n  const [r_e, setRe] = useState(5.0);\n  const I_e = 0.05;\n  // Main lens parameters\n  const x_l = 0.0; // const [x_l, setXl] = useState(0.0);\n  const y_l = 0.0; // const [y_l, setYl] = useState(0.0);\n  const [phi_lDeg, setPhilDeg] = useState(57.296);\n  const [q_l, setQl] = useState(0.75);\n  const [r_ein, setRein] = useState(1.5);\n  // Telescope parameters\n  const [res, setRes] = useState(0.1);\n  const [sigma_n, setSigmaN] = useState(0.5);\n  // Intermediate flux scale\n  const maxFlux = 23; // TODO: figure out how to reduce flux quantization... :[\n  // Final flux scale\n  const lowFlux = -3;\n  const highFlux = 18;\n  // Image constants\n  const targetRange = 2.5; // arcsec\n  const canvasDim = 400; // final canvas size\n  const nPix = getNPix(canvasDim, targetRange, res); // final size in pixels\n  const range = (nPix * res) / 2; // arcsec\n  const nPixFine = UPSAMPLE * nPix; // fine grid pixel size\n  // Noise\n  const noiseRange = 5;\n  const [noiseArray, setNoiseArray] = useState(\n    getNoiseTexArray(nPix ** 2, noiseRange)\n  );\n\n  const draw = (gl: WebGLRenderingContext) => {\n    const lensProgram = initProgram(gl, vsSource, fsLensSource);\n    const postProgram = initProgram(gl, vsSource, fsPostSource);\n\n    gl.useProgram(lensProgram);\n\n    // Set source parameters\n    const xSLoc = gl.getUniformLocation(lensProgram, \"u_x_s\");\n    const ySLoc = gl.getUniformLocation(lensProgram, \"u_y_s\");\n    const phiSLoc = gl.getUniformLocation(lensProgram, \"u_phi_s\");\n    const qSLoc = gl.getUniformLocation(lensProgram, \"u_q_s\");\n    const indexLoc = gl.getUniformLocation(lensProgram, \"u_index\");\n    const rELoc = gl.getUniformLocation(lensProgram, \"u_r_e\");\n    const IELoc = gl.getUniformLocation(lensProgram, \"u_I_e\");\n    gl.uniform1f(xSLoc, x_s);\n    gl.uniform1f(ySLoc, y_s);\n    gl.uniform1f(phiSLoc, (phi_sDeg * Math.PI) / 180);\n    gl.uniform1f(qSLoc, q_s);\n    gl.uniform1f(indexLoc, index);\n    gl.uniform1f(rELoc, r_e);\n    gl.uniform1f(IELoc, I_e);\n    // Set main lens parameters\n    const xLLoc = gl.getUniformLocation(lensProgram, \"u_x_l\");\n    const yLLoc = gl.getUniformLocation(lensProgram, \"u_y_l\");\n    const phiLLoc = gl.getUniformLocation(lensProgram, \"u_phi_l\");\n    const qLLoc = gl.getUniformLocation(lensProgram, \"u_q_l\");\n    const rEinLoc = gl.getUniformLocation(lensProgram, \"u_r_ein\");\n    gl.uniform1f(xLLoc, x_l);\n    gl.uniform1f(yLLoc, y_l);\n    gl.uniform1f(phiLLoc, (phi_lDeg * Math.PI) / 180);\n    gl.uniform1f(qLLoc, q_l);\n    gl.uniform1f(rEinLoc, r_ein);\n    // Set image coordinate range\n    gl.uniform1f(gl.getUniformLocation(lensProgram, \"u_range\"), range);\n    // Set intermediate flux range\n    gl.uniform1f(gl.getUniformLocation(lensProgram, \"u_max_flux\"), maxFlux);\n\n    // Create texture\n    const fluxTex = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, fluxTex);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      nPixFine,\n      nPixFine,\n      0,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      null\n    );\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    // Create framebuffer\n    const framebuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    // Attach texture\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      fluxTex,\n      0\n    );\n    gl.viewport(0, 0, nPixFine, nPixFine);\n\n    // Set up vertex buffer\n    const vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    // Associate shader attributes with data buffers\n    const posAttribLoc = gl.getAttribLocation(lensProgram, \"a_position\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer); // make sure correct buffer is bound\n    gl.vertexAttribPointer(posAttribLoc, 2, gl.FLOAT, false, 0, 0); // how to extract data\n    gl.enableVertexAttribArray(posAttribLoc); // turn attribute on\n\n    // Draw to framebuffer texture\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array([-1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1]),\n      gl.STATIC_DRAW // never changes\n    );\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    // Unbind framebuffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, nPix, nPix);\n\n    // Next, apply PSF, pixelation and noise\n    gl.useProgram(postProgram);\n\n    // Set number of pixels for average pooling\n    const nPixFineLoc = gl.getUniformLocation(postProgram, \"u_n_pix_fine\");\n    gl.uniform1f(nPixFineLoc, nPixFine);\n    const nPixLoc = gl.getUniformLocation(postProgram, \"u_n_pix\");\n    gl.uniform1f(nPixLoc, nPix);\n    // TODO: put noise into a texture, unrescale and add\n    gl.uniform1f(\n      gl.getUniformLocation(postProgram, \"u_noise_range\"),\n      noiseRange\n    );\n    gl.uniform1f(gl.getUniformLocation(postProgram, \"u_sigma_n\"), sigma_n);\n    // Set intermediate flux range\n    gl.uniform1f(gl.getUniformLocation(postProgram, \"u_max_flux\"), maxFlux);\n    // Set flux scale\n    gl.uniform1f(gl.getUniformLocation(postProgram, \"u_low_flux\"), lowFlux);\n    gl.uniform1f(gl.getUniformLocation(postProgram, \"u_high_flux\"), highFlux);\n\n    // Set up flux texture\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, fluxTex);\n    gl.uniform1i(gl.getUniformLocation(postProgram, \"u_flux_tex\"), 0);\n\n    // Put into texture\n    const noiseTex = gl.createTexture();\n    gl.activeTexture(gl.TEXTURE0 + 1);\n    gl.bindTexture(gl.TEXTURE_2D, noiseTex);\n    // See https://webglfundamentals.org/webgl/lessons/webgl-data-textures.html\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.LUMINANCE,\n      nPix,\n      nPix,\n      0,\n      gl.LUMINANCE,\n      gl.UNSIGNED_BYTE,\n      noiseArray\n    );\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    // Pass to shader\n    gl.uniform1i(gl.getUniformLocation(postProgram, \"u_noise_tex\"), 1);\n\n    // Draw to canvas\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n  };\n\n  return (\n    <div>\n      <Canvas\n        draw={draw}\n        width={nPix}\n        height={nPix}\n        style={{\n          width: canvasDim,\n          height: canvasDim,\n          imageRendering: \"pixelated\",\n        }}\n      />\n      <SourceControls\n        x={x_s}\n        y={y_s}\n        phiDeg={phi_sDeg}\n        q={q_s}\n        index={index}\n        r_e={r_e}\n        setX={setXs}\n        setY={setYs}\n        setPhiDeg={setPhisDeg}\n        setQ={setQs}\n        setIndex={setIndex}\n        setRe={setRe}\n      />\n      <LensControls\n        phiDeg={phi_lDeg}\n        q={q_l}\n        r_ein={r_ein}\n        setPhiDeg={setPhilDeg}\n        setQ={setQl}\n        setRein={setRein}\n      />\n      <TelescopeControls\n        sigma_n={sigma_n}\n        setSigmaN={setSigmaN}\n        setRes={(res: number) => {\n          setRes(res);\n          const newNPix = getNPix(canvasDim, targetRange, res);\n          setNoiseArray(getNoiseTexArray(newNPix ** 2, noiseRange));\n        }}\n        resampleNoise={() =>\n          setNoiseArray(getNoiseTexArray(nPix ** 2, noiseRange))\n        }\n      />\n    </div>\n  );\n};\n\nexport default Page;\n"],"sourceRoot":""}