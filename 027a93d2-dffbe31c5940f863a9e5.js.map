{"version":3,"sources":["webpack://adam-coogan.github.io/./node_modules/twgl.js/dist/4.x/twgl-full.module.js"],"names":["VecType","Float32Array","create","x","y","z","dst","add","a","b","multiply","MatType","identity","inverse","m","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t1","t2","t3","d","transformPoint","v","v0","v1","v2","transformDirection","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","glTypeToTypedArray","tt","getGLTypeForTypedArray","typedArray","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Error","getGLTypeForTypedArrayType","typedArrayType","getTypedArrayTypeForGLType","type","CTOR","isArrayBuffer","SharedArrayBuffer","buffer","ArrayBuffer","error","_console","console","apply","arguments","isRenderbuffer","gl","t","WebGLRenderbuffer","isTexture","WebGLTexture","ARRAY_BUFFER","defaults","attribPrefix","setBufferFromTypedArray","array","drawType","bindBuffer","bufferData","createBufferFromTypedArray","WebGLBuffer","createBuffer","isIndices","name","getArray","length","data","texcoordRE","colorRE","guessNumComponentsFromName","numComponents","test","concat","getNumComponents","arrayName","size","makeTypedArray","Array","isArray","Type","createAttribsFromArrays","arrays","attribs","Object","keys","forEach","attribName","attrib","value","normalization","normalize","numValues","arrayType","numBytes","BYTES_PER_ELEMENT","undefined","getNormalizationForTypedArray","stride","offset","divisor","positionKeys","createBufferInfoFromArrays","srcBufferInfo","newAttribs","bufferInfo","assign","indices","newIndices","numElements","elementType","key","ii","getBufferParameter","totalElements","getNumElementsFromAttributes","createBufferFromArray","createBuffersFromArrays","buffers","getNumElementsFromNonIndexedArrays","augmentTypedArray","cursor","push","jj","reset","opt_index","defineProperty","get","this","createAugmentedTypedArray","opt_type","applyFuncToV3Array","matrix","fn","len","tmp","transformNormal$1","mi","reorientDirections","reorientNormals","reorientPositions","reorientVertices","indexOf","createXYQuadVertices","xOffset","yOffset","position","normal","texcoord","createPlaneVertices","width","depth","subdivisionsWidth","subdivisionsDepth","numVertices","positions","normals","texcoords","u","numVertsAcross","_z","_x","createSphereVertices","radius","subdivisionsAxis","subdivisionsHeight","opt_startLatitudeInRadians","opt_endLatitudeInRadians","opt_startLongitudeInRadians","opt_endLongitudeInRadians","latRange","Math","PI","longRange","theta","phi","sinTheta","sin","cosTheta","cos","sinPhi","ux","uy","uz","numVertsAround","_x2","_y","CUBE_FACE_INDICES","createCubeVertices","k","cornerVertices","faceNormals","uvCoords","f","faceIndices","uv","createTruncatedConeVertices","bottomRadius","topRadius","height","radialSubdivisions","verticalSubdivisions","opt_topCap","opt_bottomCap","topCap","bottomCap","extra","vertsAroundEdge","slant","atan2","cosSlant","sinSlant","end","yy","ringRadius","_yy","_ii","expandRLEData","rleData","padding","runLength","element","slice","create3DFVertices","colors","numVerts","color","createCrescentVertices","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","offsetRange","lerp","s","createArc","arcRadius","normalMult","normalAdd","uMult","uAdd","uBack","xBack","angle","c","px","py","pz","n","createSurface","leftArcOffset","rightArcOffset","numVerticesDown","createCylinderVertices","createTorusVertices","bodySubdivisions","startAngle","endAngle","range","radialParts","bodyParts","sliceAngle","sliceSin","ny","ring","ringAngle","xSin","zCos","nx","nz","_slice","_ring","nextRingIndex","nextSliceIndex","createDiscVertices","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","pow","i","createBufferFunc","prototype","call","createBufferInfoFunc","isWebGL2","texStorage2D","haveEnumsForType","enums","s_ctx","s_textureInternalFormatInfo","glEnumToString","constructor","existing","addEnums","toString","defaults$1","textureColor","textureOptions","crossOrigin","isArrayBuffer$1","getShared2DContext","document","createElement","getContext","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","DEPTH_COMPONENT","DEPTH_STENCIL","CLAMP_TO_EDGE","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","UNPACK_ALIGNMENT","BYTE$2","UNSIGNED_BYTE$2","SHORT$2","UNSIGNED_SHORT$2","INT$2","UNSIGNED_INT$2","FLOAT$2","HALF_FLOAT$1","HALF_FLOAT_OES","UNSIGNED_INT_2_10_10_10_REV$1","RG","RG_INTEGER","RED","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","formatInfo","getTextureInternalFormatInfo","internalFormat","textureFormat","colorRenderable","textureFilterable","bytesPerElement","info","bytesPerElementMap","ndx","getBytesPerElementForInternalFormat","getFormatAndTypeForInternalFormat","format","isPowerOf2","canGenerateMipmap","canFilter","getTextureTypeForArrayType","src","defaultType","guessDimensions","target","sqrt","setPackState","options","colorspaceConversion","pixelStorei","premultiplyAlpha","flipY","setSkipStateToDefault","setTextureSamplerParameters","parameteriFn","minMag","min","mag","wrap","WebGLSampler","wrapR","wrapS","wrapT","minLod","maxLod","baseLevel","maxLevel","setTextureParameters","tex","bindTexture","texParameteri","setTextureFilteringForSize","generateMipmap","filtering","shouldAutomaticallySetTextureFilteringForSize","auto","level","getCubeFaceOrder","cubeFaceOrder","getCubeFacesWithNdx","facesWithNdx","map","face","sort","setTextureFromElement","formatType","slices","imgWidth","imgHeight","nodeName","ctx","canvas","drawImage","texImage2D","createImageBitmap","colorSpaceConversion","then","imageBitmap","smallest","largest","max","xMult","yMult","texImage3D","srcX","srcY","texSubImage3D","noop","setToAnonymousIfUndefinedAndURLIsNotSameOrigin","url","href","hostname","location","port","protocol","localOrigin","URL","origin","urlIsSameOrigin","isTexImageSource","obj","ImageBitmap","ImageData","HTMLElement","loadAndUseImage","callback","setTimeout","img","Image","clearEventHandlers","removeEventListener","onError","onLoad","msg","addEventListener","err","bm","cb","mode","fetch","response","ok","blob","bitmap","catch","e","loadImage","setTextureTo1PixelColor","make1Pixel","loadTextureFromUrl","loadCubemapFromUrls","urls","imgs","numToLoad","errors","faces","faceTarget","otherTarget","loadSlicesFromUrls","firstImage","setTextureFromArray","dimensions","byteLength","cbrt","unpackAlignment","faceSize","subarray","setEmptyTexture","createTexture","numColorComponents","error$1","getElementById","id","TEXTURE0","ARRAY_BUFFER$1","FLOAT$3","INT$3","UNSIGNED_INT$3","TEXTURE_2D$1","TEXTURE_CUBE_MAP$1","TEXTURE_3D$1","TEXTURE_2D_ARRAY$1","typeMap","getBindPointForSamplerType","bindPoint","intSetter","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","textureOrPair","texture","sampler","activeTexture","bindSampler","samplerArraySetter","units","textures","index","floatAttribSetter","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","uintAttribSetter","vertexAttrib4uiv","matAttribSetter","typeInfo","defaultSize","count","rowOffset","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","cols","uniform3fv","uniform4fv","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","rows","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","attrTypeMap","errorRE","addLineNumbersWithError","log","lineOffset","matches","matchAll","lineNoToErrorMap","Map","lineNo","parseInt","next","substring","split","line","join","spaceRE","loadShader","shaderSource","shaderType","opt_errorCallback","errFn","shader","createShader","replace","compileShader","getShaderParameter","lastError","getShaderInfoLog","deleteShader","getProgramOptions","opt_attribs","opt_locations","transformFeedbackVaryings","transformFeedbackMode","errorCallback","opt","attribLocations","defaultShaderType","getShaderTypeFromScriptType","scriptType","deleteShaders","shaders","createProgram","progOptions","realShaders","newShaders","elem","text","WebGLShader","program","attachShader","bindAttribLocation","varyings","linkProgram","getProgramParameter","getProgramInfoLog","getShaderSource","SHADER_TYPE","deleteProgram","createProgramFromSources","shaderSources","isBuiltIn","startsWith","tokenRE","addSetterToUniformTree","fullPath","node","uniformSetters","tokens","filter","tokenNdx","path","token","isArrayIndex","accessor","_token","child","setUniformTree","createUniformSetters","textureUnit","createUniformSetter","uniformInfo","endsWith","uniformTree","numUniforms","getActiveUniform","substr","_location","getUniformLocation","createTransformFeedbackInfo","numVaryings","varying","getTransformFeedbackVarying","createUniformBlockSpecFromProgram","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","_ii5","getActiveUniformBlockName","blockSpec","getUniformBlockIndex","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","tree","values","prop","setUniforms","setters","actualSetters","numArgs","aNdx","createAttributeSetters","attribSetters","numAttribs","attribInfo","getActiveAttrib","getAttribLocation","setAttributes","setBuffersAndAttributes","programInfo","vertexArrayObject","bindVertexArray","createProgramInfoFromProgram","uniformBlockSpec","transformFeedbackInfo","createProgramInfo","good","source","script","drawBufferInfo","instanceCount","drawElementsInstanced","drawElements","drawArraysInstanced","drawArrays","RENDERBUFFER","DEPTH_STENCIL$1","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","CLAMP_TO_EDGE$1","LINEAR$1","defaultAttachments","attachmentsByFormat","renderbufferFormats","createFramebufferInfo","attachments","fb","createFramebuffer","bindFramebuffer","drawingBufferWidth","drawingBufferHeight","colorAttachmentCount","framebufferInfo","framebuffer","attachmentOptions","attachment","attachmentPoint","getAttachmentPointForFormat","isRenderbufferFormat","createRenderbuffer","bindRenderbuffer","renderbufferStorage","framebufferRenderbuffer","layer","framebufferTextureLayer","framebufferTexture2D","bindFramebufferInfo","viewport","resizeCanvasToDisplaySize","multiplier","clientWidth","clientHeight"],"mappings":"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","file":"027a93d2-dffbe31c5940f863a9e5.js","sourcesContent":["import _toConsumableArray from \"/Users/acoogan/Interests/adam-coogan.github.io/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/esnext.string.match-all.js\";\n\n/* @license twgl.js 4.21.2 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\nAvailable via the MIT license.\nsee: http://github.com/greggman/twgl.js for details */\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\nvar VecType = Float32Array;\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\n\nfunction setDefaultType(ctor) {\n  var oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param {number} [x] Initial x value.\n * @param {number} [y] Initial y value.\n * @param {number} [z] Initial z value.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction create(x, y, z) {\n  var dst = new VecType(3);\n\n  if (x) {\n    dst[0] = x;\n  }\n\n  if (y) {\n    dst[1] = y;\n  }\n\n  if (z) {\n    dst[2] = z;\n  }\n\n  return dst;\n}\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.\n * @memberOf module:twgl/v3\n */\n\n\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n  return dst;\n}\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.\n * @memberOf module:twgl/v3\n */\n\n\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n  return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The linear interpolated result.\n * @memberOf module:twgl/v3\n */\n\n\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n  return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} the linear interpolated result.\n * @memberOf module:twgl/v3\n */\n\n\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n  return dst;\n}\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The max components vector.\n * @memberOf module:twgl/v3\n */\n\n\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n  return dst;\n}\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The min components vector.\n * @memberOf module:twgl/v3\n */\n\n\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n  return dst;\n}\n/**\n * Multiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\n\n\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n  return dst;\n}\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\n\n\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n  return dst;\n}\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of a cross b.\n * @memberOf module:twgl/v3\n */\n\n\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n  var t1 = a[2] * b[0] - a[0] * b[2];\n  var t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n  return dst;\n}\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\n\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\n\n\nfunction length$1(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\n\n\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\n\n\nfunction distance(a, b) {\n  var dx = a[0] - b[0];\n  var dy = a[1] - b[1];\n  var dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\n\n\nfunction distanceSq(a, b) {\n  var dx = a[0] - b[0];\n  var dy = a[1] - b[1];\n  var dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\n\n\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n  var lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  var len = Math.sqrt(lenSq);\n\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\n\n\nfunction negate(v, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n  return dst;\n}\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\n\n\nfunction copy(v, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n  return dst;\n}\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\n\n\nfunction multiply(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n  return dst;\n}\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\n\n\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n  return dst;\n}\n\nvar v3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  add: add,\n  copy: copy,\n  create: create,\n  cross: cross,\n  distance: distance,\n  distanceSq: distanceSq,\n  divide: divide,\n  divScalar: divScalar,\n  dot: dot,\n  lerp: lerp,\n  lerpV: lerpV,\n  length: length$1,\n  lengthSq: lengthSq,\n  max: max,\n  min: min,\n  mulScalar: mulScalar,\n  multiply: multiply,\n  negate: negate,\n  normalize: normalize,\n  setDefaultType: setDefaultType,\n  subtract: subtract\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\n\nvar MatType = Float32Array;\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\n\nfunction setDefaultType$1(ctor) {\n  var oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction negate$1(m, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = -m[0];\n  dst[1] = -m[1];\n  dst[2] = -m[2];\n  dst[3] = -m[3];\n  dst[4] = -m[4];\n  dst[5] = -m[5];\n  dst[6] = -m[6];\n  dst[7] = -m[7];\n  dst[8] = -m[8];\n  dst[9] = -m[9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n  return dst;\n}\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction copy$1(m, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = m[0];\n  dst[1] = m[1];\n  dst[2] = m[2];\n  dst[3] = m[3];\n  dst[4] = m[4];\n  dst[5] = m[5];\n  dst[6] = m[6];\n  dst[7] = m[7];\n  dst[8] = m[8];\n  dst[9] = m[9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n  return dst;\n}\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n  dst[0] = 1;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 1;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction transpose(m, dst) {\n  dst = dst || new MatType(16);\n\n  if (dst === m) {\n    var t;\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var m30 = m[3 * 4 + 0];\n  var m31 = m[3 * 4 + 1];\n  var m32 = m[3 * 4 + 2];\n  var m33 = m[3 * 4 + 3];\n  dst[0] = m00;\n  dst[1] = m10;\n  dst[2] = m20;\n  dst[3] = m30;\n  dst[4] = m01;\n  dst[5] = m11;\n  dst[6] = m21;\n  dst[7] = m31;\n  dst[8] = m02;\n  dst[9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n  return dst;\n}\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var m30 = m[3 * 4 + 0];\n  var m31 = m[3 * 4 + 1];\n  var m32 = m[3 * 4 + 2];\n  var m33 = m[3 * 4 + 3];\n  var tmp_0 = m22 * m33;\n  var tmp_1 = m32 * m23;\n  var tmp_2 = m12 * m33;\n  var tmp_3 = m32 * m13;\n  var tmp_4 = m12 * m23;\n  var tmp_5 = m22 * m13;\n  var tmp_6 = m02 * m33;\n  var tmp_7 = m32 * m03;\n  var tmp_8 = m02 * m23;\n  var tmp_9 = m22 * m03;\n  var tmp_10 = m02 * m13;\n  var tmp_11 = m12 * m03;\n  var tmp_12 = m20 * m31;\n  var tmp_13 = m30 * m21;\n  var tmp_14 = m10 * m31;\n  var tmp_15 = m30 * m11;\n  var tmp_16 = m10 * m21;\n  var tmp_17 = m20 * m11;\n  var tmp_18 = m00 * m31;\n  var tmp_19 = m30 * m01;\n  var tmp_20 = m00 * m21;\n  var tmp_21 = m20 * m01;\n  var tmp_22 = m00 * m11;\n  var tmp_23 = m10 * m01;\n  var t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  var t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  var t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  var t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n  var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n  dst[0] = d * t0;\n  dst[1] = d * t1;\n  dst[2] = d * t2;\n  dst[3] = d * t3;\n  dst[4] = d * (tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30 - (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[5] = d * (tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30 - (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[6] = d * (tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30 - (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[7] = d * (tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20 - (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[8] = d * (tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33 - (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[9] = d * (tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33 - (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * (tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33 - (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * (tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23 - (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * (tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12 - (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * (tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22 - (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * (tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02 - (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * (tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12 - (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n  return dst;\n}\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\n\n\nfunction multiply$1(a, b, dst) {\n  dst = dst || new MatType(16);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4 + 0];\n  var a11 = a[4 + 1];\n  var a12 = a[4 + 2];\n  var a13 = a[4 + 3];\n  var a20 = a[8 + 0];\n  var a21 = a[8 + 1];\n  var a22 = a[8 + 2];\n  var a23 = a[8 + 3];\n  var a30 = a[12 + 0];\n  var a31 = a[12 + 1];\n  var a32 = a[12 + 2];\n  var a33 = a[12 + 3];\n  var b00 = b[0];\n  var b01 = b[1];\n  var b02 = b[2];\n  var b03 = b[3];\n  var b10 = b[4 + 0];\n  var b11 = b[4 + 1];\n  var b12 = b[4 + 2];\n  var b13 = b[4 + 3];\n  var b20 = b[8 + 0];\n  var b21 = b[8 + 1];\n  var b22 = b[8 + 2];\n  var b23 = b[8 + 3];\n  var b30 = b[12 + 0];\n  var b31 = b[12 + 1];\n  var b32 = b[12 + 2];\n  var b33 = b[12 + 3];\n  dst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n  return dst;\n}\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with translation set.\n * @memberOf module:twgl/m4\n */\n\n\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n\n  if (a !== dst) {\n    dst[0] = a[0];\n    dst[1] = a[1];\n    dst[2] = a[2];\n    dst[3] = a[3];\n    dst[4] = a[4];\n    dst[5] = a[5];\n    dst[6] = a[6];\n    dst[7] = a[7];\n    dst[8] = a[8];\n    dst[9] = a[9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction getTranslation(m, dst) {\n  dst = dst || create();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction getAxis(m, axis, dst) {\n  dst = dst || create();\n  var off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with axis set.\n * @memberOf module:twgl/m4\n */\n\n\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy$1(a, dst);\n  }\n\n  var off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n  var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  var rangeInv = 1.0 / (zNear - zFar);\n  dst[0] = f / aspect;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = f;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n  return dst;\n}\n/**\n * Computes a 4-by-4 orthogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = 2 / (right - left);\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 2 / (top - bottom);\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n  var dx = right - left;\n  var dy = top - bottom;\n  var dz = near - far;\n  dst[0] = 2 * near / dx;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 2 * near / dy;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = (left + right) / dx;\n  dst[9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n  return dst;\n}\n\nvar xAxis;\nvar yAxis;\nvar zAxis;\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\n\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n  xAxis = xAxis || create();\n  yAxis = yAxis || create();\n  zAxis = zAxis || create();\n  normalize(subtract(eye, target, zAxis), zAxis);\n  normalize(cross(up, zAxis, xAxis), xAxis);\n  normalize(cross(zAxis, xAxis, yAxis), yAxis);\n  dst[0] = xAxis[0];\n  dst[1] = xAxis[1];\n  dst[2] = xAxis[2];\n  dst[3] = 0;\n  dst[4] = yAxis[0];\n  dst[5] = yAxis[1];\n  dst[6] = yAxis[2];\n  dst[7] = 0;\n  dst[8] = zAxis[0];\n  dst[9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = 1;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 1;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translated matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  var m00 = m[0];\n  var m01 = m[1];\n  var m02 = m[2];\n  var m03 = m[3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var m30 = m[3 * 4 + 0];\n  var m31 = m[3 * 4 + 1];\n  var m32 = m[3 * 4 + 2];\n  var m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[0] = m00;\n    dst[1] = m01;\n    dst[2] = m02;\n    dst[3] = m03;\n    dst[4] = m10;\n    dst[5] = m11;\n    dst[6] = m12;\n    dst[7] = m13;\n    dst[8] = m20;\n    dst[9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = 1;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = c;\n  dst[6] = s;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var m10 = m[4];\n  var m11 = m[5];\n  var m12 = m[6];\n  var m13 = m[7];\n  var m20 = m[8];\n  var m21 = m[9];\n  var m22 = m[10];\n  var m23 = m[11];\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[4] = c * m10 + s * m20;\n  dst[5] = c * m11 + s * m21;\n  dst[6] = c * m12 + s * m22;\n  dst[7] = c * m13 + s * m23;\n  dst[8] = c * m20 - s * m10;\n  dst[9] = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[0] = m[0];\n    dst[1] = m[1];\n    dst[2] = m[2];\n    dst[3] = m[3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = c;\n  dst[1] = 0;\n  dst[2] = -s;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 1;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = s;\n  dst[9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = c * m00 - s * m20;\n  dst[1] = c * m01 - s * m21;\n  dst[2] = c * m02 - s * m22;\n  dst[3] = c * m03 - s * m23;\n  dst[8] = c * m20 + s * m00;\n  dst[9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[4] = m[4];\n    dst[5] = m[5];\n    dst[6] = m[6];\n    dst[7] = m[7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = c;\n  dst[1] = s;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = -s;\n  dst[5] = c;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = c * m00 + s * m10;\n  dst[1] = c * m01 + s * m11;\n  dst[2] = c * m02 + s * m12;\n  dst[3] = c * m03 + s * m13;\n  dst[4] = c * m10 - s * m00;\n  dst[5] = c * m11 - s * m01;\n  dst[6] = c * m12 - s * m02;\n  dst[7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[8] = m[8];\n    dst[9] = m[9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\n\n\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var x = axis[0];\n  var y = axis[1];\n  var z = axis[2];\n  var n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  var xx = x * x;\n  var yy = y * y;\n  var zz = z * z;\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  var oneMinusCosine = 1 - c;\n  dst[0] = xx + (1 - xx) * c;\n  dst[1] = x * y * oneMinusCosine + z * s;\n  dst[2] = x * z * oneMinusCosine - y * s;\n  dst[3] = 0;\n  dst[4] = x * y * oneMinusCosine - z * s;\n  dst[5] = yy + (1 - yy) * c;\n  dst[6] = y * z * oneMinusCosine + x * s;\n  dst[7] = 0;\n  dst[8] = x * z * oneMinusCosine + y * s;\n  dst[9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var x = axis[0];\n  var y = axis[1];\n  var z = axis[2];\n  var n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  var xx = x * x;\n  var yy = y * y;\n  var zz = z * z;\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  var oneMinusCosine = 1 - c;\n  var r00 = xx + (1 - xx) * c;\n  var r01 = x * y * oneMinusCosine + z * s;\n  var r02 = x * z * oneMinusCosine - y * s;\n  var r10 = x * y * oneMinusCosine - z * s;\n  var r11 = yy + (1 - yy) * c;\n  var r12 = y * z * oneMinusCosine + x * s;\n  var r20 = x * z * oneMinusCosine + y * s;\n  var r21 = y * z * oneMinusCosine - x * s;\n  var r22 = zz + (1 - zz) * c;\n  var m00 = m[0];\n  var m01 = m[1];\n  var m02 = m[2];\n  var m03 = m[3];\n  var m10 = m[4];\n  var m11 = m[5];\n  var m12 = m[6];\n  var m13 = m[7];\n  var m20 = m[8];\n  var m21 = m[9];\n  var m22 = m[10];\n  var m23 = m[11];\n  dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = v[0];\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = v[1];\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaled matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  dst[0] = v0 * m[0 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2];\n  dst[3] = v0 * m[0 * 4 + 3];\n  dst[4] = v1 * m[1 * 4 + 0];\n  dst[5] = v1 * m[1 * 4 + 1];\n  dst[6] = v1 * m[1 * 4 + 2];\n  dst[7] = v1 * m[1 * 4 + 3];\n  dst[8] = v2 * m[2 * 4 + 0];\n  dst[9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */\n\n\nfunction transformPoint(m, v, dst) {\n  dst = dst || create();\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n  return dst;\n}\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\n\n\nfunction transformDirection(m, v, dst) {\n  dst = dst || create();\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n  return dst;\n}\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed normal.\n * @memberOf module:twgl/m4\n */\n\n\nfunction transformNormal(m, v, dst) {\n  dst = dst || create();\n  var mi = inverse(m);\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n  return dst;\n}\n\nvar m4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  axisRotate: axisRotate,\n  axisRotation: axisRotation,\n  copy: copy$1,\n  frustum: frustum,\n  getAxis: getAxis,\n  getTranslation: getTranslation,\n  identity: identity,\n  inverse: inverse,\n  lookAt: lookAt,\n  multiply: multiply$1,\n  negate: negate$1,\n  ortho: ortho,\n  perspective: perspective,\n  rotateX: rotateX,\n  rotateY: rotateY,\n  rotateZ: rotateZ,\n  rotationX: rotationX,\n  rotationY: rotationY,\n  rotationZ: rotationZ,\n  scale: scale,\n  scaling: scaling,\n  setAxis: setAxis,\n  setDefaultType: setDefaultType$1,\n  setTranslation: setTranslation,\n  transformDirection: transformDirection,\n  transformNormal: transformNormal,\n  transformPoint: transformPoint,\n  translate: translate,\n  translation: translation,\n  transpose: transpose\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* DataType */\n\nvar BYTE = 0x1400;\nvar UNSIGNED_BYTE = 0x1401;\nvar SHORT = 0x1402;\nvar UNSIGNED_SHORT = 0x1403;\nvar INT = 0x1404;\nvar UNSIGNED_INT = 0x1405;\nvar FLOAT = 0x1406;\nvar UNSIGNED_SHORT_4_4_4_4 = 0x8033;\nvar UNSIGNED_SHORT_5_5_5_1 = 0x8034;\nvar UNSIGNED_SHORT_5_6_5 = 0x8363;\nvar HALF_FLOAT = 0x140B;\nvar UNSIGNED_INT_2_10_10_10_REV = 0x8368;\nvar UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nvar UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;\nvar FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nvar UNSIGNED_INT_24_8 = 0x84FA;\nvar glTypeToTypedArray = {};\n{\n  var tt = glTypeToTypedArray;\n  tt[BYTE] = Int8Array;\n  tt[UNSIGNED_BYTE] = Uint8Array;\n  tt[SHORT] = Int16Array;\n  tt[UNSIGNED_SHORT] = Uint16Array;\n  tt[INT] = Int32Array;\n  tt[UNSIGNED_INT] = Uint32Array;\n  tt[FLOAT] = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4] = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1] = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5] = Uint16Array;\n  tt[HALF_FLOAT] = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV] = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV] = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV] = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8] = Uint32Array;\n}\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\n\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array) {\n    return BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint8Array) {\n    return UNSIGNED_BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint8ClampedArray) {\n    return UNSIGNED_BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Int16Array) {\n    return SHORT;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint16Array) {\n    return UNSIGNED_SHORT;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Int32Array) {\n    return INT;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint32Array) {\n    return UNSIGNED_INT;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Float32Array) {\n    return FLOAT;\n  } // eslint-disable-line\n\n\n  throw new Error('unsupported typed array type');\n}\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\n\n\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array) {\n    return BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint8Array) {\n    return UNSIGNED_BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint8ClampedArray) {\n    return UNSIGNED_BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Int16Array) {\n    return SHORT;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint16Array) {\n    return UNSIGNED_SHORT;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Int32Array) {\n    return INT;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint32Array) {\n    return UNSIGNED_INT;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Float32Array) {\n    return FLOAT;\n  } // eslint-disable-line\n\n\n  throw new Error('unsupported typed array type');\n}\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\n\n\nfunction getTypedArrayTypeForGLType(type) {\n  var CTOR = glTypeToTypedArray[type];\n\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n\n  return CTOR;\n}\n\nvar isArrayBuffer = typeof SharedArrayBuffer !== 'undefined' ? function isArrayBufferOrSharedArrayBuffer(a) {\n  return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n} : function isArrayBuffer(a) {\n  return a && a.buffer && a.buffer instanceof ArrayBuffer;\n};\nvar typedarrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getGLTypeForTypedArray: getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,\n  isArrayBuffer: isArrayBuffer\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\n\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function (name) {\n    var value = src[name];\n\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\n\n\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function (key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {\n      /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error() {\n  var _console;\n\n  (_console = console).error.apply(_console, arguments);\n}\n\nfunction warn() {\n  var _console2;\n\n  (_console2 = console).warn.apply(_console2, arguments);\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;\n}\n\nfunction isShader(gl, t) {\n  return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;\n}\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n\nvar STATIC_DRAW = 0x88e4;\nvar ARRAY_BUFFER = 0x8892;\nvar ELEMENT_ARRAY_BUFFER = 0x8893;\nvar BUFFER_SIZE = 0x8764;\nvar BYTE$1 = 0x1400;\nvar UNSIGNED_BYTE$1 = 0x1401;\nvar SHORT$1 = 0x1402;\nvar UNSIGNED_SHORT$1 = 0x1403;\nvar INT$1 = 0x1404;\nvar UNSIGNED_INT$1 = 0x1405;\nvar FLOAT$1 = 0x1406;\nvar defaults = {\n  attribPrefix: \"\"\n};\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\n\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n\n  type = type || ARRAY_BUFFER;\n  var buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n} // This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\n\n\nfunction getNormalizationForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array) {\n    return true;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint8Array) {\n    return true;\n  } // eslint-disable-line\n\n\n  return false;\n} // This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\n\n\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array) {\n    return true;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint8Array) {\n    return true;\n  } // eslint-disable-line\n\n\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nvar texcoordRE = /coord|texture/i;\nvar colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  var numComponents;\n\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3; // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(\"Can not guess numComponents for attribute '\".concat(name, \"'. Tried \").concat(numComponents, \" but \").concat(length, \" values is not evenly divisible by \").concat(numComponents, \". You should specify it.\"));\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array\n    };\n  }\n\n  var Type = array.type;\n\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n\n  return new Type(array.data);\n}\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createAttribsFromArrays(gl, arrays) {\n  var attribs = {};\n  Object.keys(arrays).forEach(function (arrayName) {\n    if (!isIndices(arrayName)) {\n      var array = arrays[arrayName];\n      var attribName = array.attrib || array.name || array.attribName || defaults.attribPrefix + arrayName;\n\n      if (array.value) {\n        if (!Array.isArray(array.value) && !isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n\n        attribs[attribName] = {\n          value: array.value\n        };\n      } else {\n        var buffer;\n        var type;\n        var normalization;\n        var numComponents;\n\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          buffer = array.buffer;\n          numComponents = array.numComponents || array.size;\n          type = array.type;\n          normalization = array.normalize;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          var numValues = array.data || array;\n          var arrayType = array.type || Float32Array;\n          var numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n          type = getGLTypeForTypedArrayType(arrayType);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n          buffer = gl.createBuffer();\n          gl.bindBuffer(ARRAY_BUFFER, buffer);\n          gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);\n        } else {\n          var typedArray = makeTypedArray(array, arrayName);\n          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n          type = getGLTypeForTypedArray(typedArray);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n          numComponents = getNumComponents(array, arrayName);\n        }\n\n        attribs[attribName] = {\n          buffer: buffer,\n          numComponents: numComponents,\n          type: type,\n          normalize: normalization,\n          stride: array.stride || 0,\n          offset: array.offset || 0,\n          divisor: array.divisor === undefined ? undefined : array.divisor,\n          drawType: array.drawType\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER, null);\n  return attribs;\n}\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\n\n\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE$1) return 1; // eslint-disable-line\n\n  if (type === UNSIGNED_BYTE$1) return 1; // eslint-disable-line\n\n  if (type === SHORT$1) return 2; // eslint-disable-line\n\n  if (type === UNSIGNED_SHORT$1) return 2; // eslint-disable-line\n\n  if (type === INT$1) return 4; // eslint-disable-line\n\n  if (type === UNSIGNED_INT$1) return 4; // eslint-disable-line\n\n  if (type === FLOAT$1) return 4; // eslint-disable-line\n\n  return 0;\n} // Tries to get the number of elements from a set of arrays.\n\n\nvar positionKeys = ['position', 'positions', 'a_position'];\n\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  var key;\n  var ii;\n\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n\n    if (key in arrays) {\n      break;\n    }\n  }\n\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n\n  var array = arrays[key];\n  var length = getArray(array).length;\n  var numComponents = getNumComponents(array, key);\n  var numElements = length / numComponents;\n\n  if (length % numComponents > 0) {\n    throw new Error(\"numComponents \".concat(numComponents, \" not correct for length \").concat(length));\n  }\n\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  var key;\n  var ii;\n\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n\n    if (key in attribs) {\n      break;\n    }\n\n    key = defaults.attribPrefix + key;\n\n    if (key in attribs) {\n      break;\n    }\n  }\n\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n\n  var attrib = attribs[key];\n  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);\n  var numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER, null);\n  var bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  var totalElements = numBytes / bytesPerValue;\n  var numComponents = attrib.numComponents || attrib.size; // TODO: check stride\n\n  var numElements = totalElements / numComponents;\n\n  if (numElements % 1 !== 0) {\n    throw new Error(\"numComponents \".concat(numComponents, \" not correct for length \").concat(length));\n  }\n\n  return numElements;\n}\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  var newAttribs = createAttribsFromArrays(gl, arrays);\n  var bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  var indices = arrays.indices;\n\n  if (indices) {\n    var newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createBufferFromArray(gl, array, arrayName) {\n  var type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;\n  var typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createBuffersFromArrays(gl, arrays) {\n  var buffers = {};\n  Object.keys(arrays).forEach(function (key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  }); // Ugh!\n\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nvar attributes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttribsFromArrays: createAttribsFromArrays,\n  createBuffersFromArrays: createBuffersFromArrays,\n  createBufferFromArray: createBufferFromArray,\n  createBufferFromTypedArray: createBufferFromTypedArray,\n  createBufferInfoFromArrays: createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,\n  setAttributePrefix: setAttributePrefix,\n  setAttributeDefaults_: setDefaults,\n  getNumComponents_: getNumComponents,\n  getArray_: getArray\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nvar getArray$1 = getArray; // eslint-disable-line\n\nvar getNumComponents$1 = getNumComponents; // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\n\nfunction augmentTypedArray(typedArray, numComponents) {\n  var cursor = 0;\n\n  typedArray.push = function () {\n    for (var ii = 0; ii < arguments.length; ++ii) {\n      var value = arguments[ii];\n\n      if (value instanceof Array || isArrayBuffer(value)) {\n        for (var jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n\n  typedArray.reset = function (opt_index) {\n    cursor = opt_index || 0;\n  };\n\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function get() {\n      return this.length / this.numComponents | 0;\n    }\n  });\n  return typedArray;\n}\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  var Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\n\n\nfunction deindexVertices(vertices) {\n  var indices = vertices.indices;\n  var newVertices = {};\n  var numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    var srcBuffer = vertices[channel];\n    var numComponents = srcBuffer.numComponents;\n    var dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n\n    for (var ii = 0; ii < numElements; ++ii) {\n      var ndx = indices[ii];\n      var offset = ndx * numComponents;\n\n      for (var jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n  return newVertices;\n}\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\n\n\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw new Error('can not flatten normals of indexed vertices. deindex them first');\n  }\n\n  var normals = vertices.normal;\n  var numNormals = normals.length;\n\n  for (var ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    var nax = normals[ii + 0];\n    var nay = normals[ii + 1];\n    var naz = normals[ii + 2];\n    var nbx = normals[ii + 3];\n    var nby = normals[ii + 4];\n    var nbz = normals[ii + 5];\n    var ncx = normals[ii + 6];\n    var ncy = normals[ii + 7];\n    var ncz = normals[ii + 8]; // add them\n\n    var nx = nax + nbx + ncx;\n    var ny = nay + nby + ncy;\n    var nz = naz + nbz + ncz; // normalize them\n\n    var _length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n    nx /= _length;\n    ny /= _length;\n    nz /= _length; // copy them back in\n\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  var len = array.length;\n  var tmp = new Float32Array(3);\n\n  for (var ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal$1(mi, v, dst) {\n  dst = dst || create();\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n  return dst;\n}\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\n\n\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformDirection);\n  return array;\n}\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\n\n\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, inverse(matrix), transformNormal$1);\n  return array;\n}\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\n\n\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformPoint);\n  return array;\n}\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function (name) {\n    var array = arrays[name];\n\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [xOffset + -1 * size, yOffset + -1 * size, xOffset + 1 * size, yOffset + -1 * size, xOffset + -1 * size, yOffset + 1 * size, xOffset + 1 * size, yOffset + 1 * size]\n    },\n    normal: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n    texcoord: [0, 0, 1, 0, 0, 1, 1, 1],\n    indices: [0, 1, 2, 2, 1, 3]\n  };\n}\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createPlaneVertices(width, depth, subdivisionsWidth, subdivisionsDepth, matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || identity();\n  var numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (var z = 0; z <= subdivisionsDepth; z++) {\n    for (var x = 0; x <= subdivisionsWidth; x++) {\n      var u = x / subdivisionsWidth;\n      var v = z / subdivisionsDepth;\n      positions.push(width * u - width * 0.5, 0, depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  var numVertsAcross = subdivisionsWidth + 1;\n  var indices = createAugmentedTypedArray(3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (var _z = 0; _z < subdivisionsDepth; _z++) {\n    // eslint-disable-line\n    for (var _x = 0; _x < subdivisionsWidth; _x++) {\n      // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push((_z + 0) * numVertsAcross + _x, (_z + 1) * numVertsAcross + _x, (_z + 0) * numVertsAcross + _x + 1); // Make triangle 2 of quad.\n\n      indices.push((_z + 1) * numVertsAcross + _x, (_z + 1) * numVertsAcross + _x + 1, (_z + 0) * numVertsAcross + _x + 1);\n    }\n  }\n\n  var arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  }, matrix);\n  return arrays;\n}\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createSphereVertices(radius, subdivisionsAxis, subdivisionsHeight, opt_startLatitudeInRadians, opt_endLatitudeInRadians, opt_startLongitudeInRadians, opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || Math.PI * 2;\n  var latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  var longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians; // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n\n  var numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices); // Generate the individual vertices in our vertex buffer.\n\n  for (var y = 0; y <= subdivisionsHeight; y++) {\n    for (var x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      var u = x / subdivisionsAxis;\n      var v = y / subdivisionsHeight;\n      var theta = longRange * u + opt_startLongitudeInRadians;\n      var phi = latRange * v + opt_startLatitudeInRadians;\n      var sinTheta = Math.sin(theta);\n      var cosTheta = Math.cos(theta);\n      var sinPhi = Math.sin(phi);\n      var cosPhi = Math.cos(phi);\n      var ux = cosTheta * sinPhi;\n      var uy = cosPhi;\n      var uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  var numVertsAround = subdivisionsAxis + 1;\n  var indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n\n  for (var _x2 = 0; _x2 < subdivisionsAxis; _x2++) {\n    // eslint-disable-line\n    for (var _y = 0; _y < subdivisionsHeight; _y++) {\n      // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push((_y + 0) * numVertsAround + _x2, (_y + 0) * numVertsAround + _x2 + 1, (_y + 1) * numVertsAround + _x2); // Make triangle 2 of quad.\n\n      indices.push((_y + 1) * numVertsAround + _x2, (_y + 0) * numVertsAround + _x2 + 1, (_y + 1) * numVertsAround + _x2 + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\n\n\nvar CUBE_FACE_INDICES = [[3, 7, 5, 1], // right\n[6, 2, 0, 4], // left\n[6, 7, 3, 2], // ??\n[0, 1, 5, 4], // ??\n[7, 6, 4, 5], // front\n[2, 3, 1, 0] // back\n];\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\nfunction createCubeVertices(size) {\n  size = size || 1;\n  var k = size / 2;\n  var cornerVertices = [[-k, -k, -k], [+k, -k, -k], [-k, +k, -k], [+k, +k, -k], [-k, -k, +k], [+k, -k, +k], [-k, +k, +k], [+k, +k, +k]];\n  var faceNormals = [[+1, +0, +0], [-1, +0, +0], [+0, +1, +0], [+0, -1, +0], [+0, +0, +1], [+0, +0, -1]];\n  var uvCoords = [[1, 0], [0, 0], [0, 1], [1, 1]];\n  var numVertices = 6 * 4;\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n  var indices = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (var f = 0; f < 6; ++f) {\n    var faceIndices = CUBE_FACE_INDICES[f];\n\n    for (var v = 0; v < 4; ++v) {\n      var position = cornerVertices[faceIndices[v]];\n      var normal = faceNormals[f];\n      var uv = uvCoords[v]; // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n    } // Two triangles make a square face.\n\n\n    var offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createTruncatedConeVertices(bottomRadius, topRadius, height, radialSubdivisions, verticalSubdivisions, opt_topCap, opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  var topCap = opt_topCap === undefined ? true : opt_topCap;\n  var bottomCap = opt_bottomCap === undefined ? true : opt_bottomCap;\n  var extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n  var numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n  var indices = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n  var vertsAroundEdge = radialSubdivisions + 1; // The slant of the cone is constant across its surface\n\n  var slant = Math.atan2(bottomRadius - topRadius, height);\n  var cosSlant = Math.cos(slant);\n  var sinSlant = Math.sin(slant);\n  var start = topCap ? -2 : 0;\n  var end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (var yy = start; yy <= end; ++yy) {\n    var v = yy / verticalSubdivisions;\n    var y = height * v;\n    var ringRadius = void 0;\n\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius + (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n\n    y -= height / 2;\n\n    for (var ii = 0; ii < vertsAroundEdge; ++ii) {\n      var sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      var cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n\n      texcoords.push(ii / radialSubdivisions, 1 - v);\n    }\n  }\n\n  for (var _yy = 0; _yy < verticalSubdivisions + extra; ++_yy) {\n    // eslint-disable-line\n    if (_yy === 1 && topCap || _yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n\n    for (var _ii = 0; _ii < radialSubdivisions; ++_ii) {\n      // eslint-disable-line\n      indices.push(vertsAroundEdge * (_yy + 0) + 0 + _ii, vertsAroundEdge * (_yy + 0) + 1 + _ii, vertsAroundEdge * (_yy + 1) + 1 + _ii);\n      indices.push(vertsAroundEdge * (_yy + 0) + 0 + _ii, vertsAroundEdge * (_yy + 1) + 1 + _ii, vertsAroundEdge * (_yy + 1) + 0 + _ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\n\n\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  var data = [];\n\n  for (var ii = 0; ii < rleData.length; ii += 4) {\n    var runLength = rleData[ii];\n    var element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n\n    for (var jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n\n  return data;\n}\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction create3DFVertices() {\n  var positions = [// left column front\n  0, 0, 0, 0, 150, 0, 30, 0, 0, 0, 150, 0, 30, 150, 0, 30, 0, 0, // top rung front\n  30, 0, 0, 30, 30, 0, 100, 0, 0, 30, 30, 0, 100, 30, 0, 100, 0, 0, // middle rung front\n  30, 60, 0, 30, 90, 0, 67, 60, 0, 30, 90, 0, 67, 90, 0, 67, 60, 0, // left column back\n  0, 0, 30, 30, 0, 30, 0, 150, 30, 0, 150, 30, 30, 0, 30, 30, 150, 30, // top rung back\n  30, 0, 30, 100, 0, 30, 30, 30, 30, 30, 30, 30, 100, 0, 30, 100, 30, 30, // middle rung back\n  30, 60, 30, 67, 60, 30, 30, 90, 30, 30, 90, 30, 67, 60, 30, 67, 90, 30, // top\n  0, 0, 0, 100, 0, 0, 100, 0, 30, 0, 0, 0, 100, 0, 30, 0, 0, 30, // top rung front\n  100, 0, 0, 100, 30, 0, 100, 30, 30, 100, 0, 0, 100, 30, 30, 100, 0, 30, // under top rung\n  30, 30, 0, 30, 30, 30, 100, 30, 30, 30, 30, 0, 100, 30, 30, 100, 30, 0, // between top rung and middle\n  30, 30, 0, 30, 60, 30, 30, 30, 30, 30, 30, 0, 30, 60, 0, 30, 60, 30, // top of middle rung\n  30, 60, 0, 67, 60, 30, 30, 60, 30, 30, 60, 0, 67, 60, 0, 67, 60, 30, // front of middle rung\n  67, 60, 0, 67, 90, 30, 67, 60, 30, 67, 60, 0, 67, 90, 0, 67, 90, 30, // bottom of middle rung.\n  30, 90, 0, 30, 90, 30, 67, 90, 30, 30, 90, 0, 67, 90, 30, 67, 90, 0, // front of bottom\n  30, 90, 0, 30, 150, 30, 30, 90, 30, 30, 90, 0, 30, 150, 0, 30, 150, 30, // bottom\n  0, 150, 0, 0, 150, 30, 30, 150, 30, 0, 150, 0, 30, 150, 30, 30, 150, 0, // left side\n  0, 0, 0, 0, 0, 30, 0, 150, 30, 0, 0, 0, 0, 150, 30, 0, 150, 0];\n  var texcoords = [// left column front\n  0.22, 0.19, 0.22, 0.79, 0.34, 0.19, 0.22, 0.79, 0.34, 0.79, 0.34, 0.19, // top rung front\n  0.34, 0.19, 0.34, 0.31, 0.62, 0.19, 0.34, 0.31, 0.62, 0.31, 0.62, 0.19, // middle rung front\n  0.34, 0.43, 0.34, 0.55, 0.49, 0.43, 0.34, 0.55, 0.49, 0.55, 0.49, 0.43, // left column back\n  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, // top rung back\n  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, // middle rung back\n  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, // top\n  0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, // top rung front\n  0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, // under top rung\n  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, // between top rung and middle\n  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // top of middle rung\n  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // front of middle rung\n  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // bottom of middle rung.\n  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, // front of bottom\n  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // bottom\n  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, // left side\n  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0];\n  var normals = expandRLEData([// left column front\n  // top rung front\n  // middle rung front\n  18, 0, 0, 1, // left column back\n  // top rung back\n  // middle rung back\n  18, 0, 0, -1, // top\n  6, 0, 1, 0, // top rung front\n  6, 1, 0, 0, // under top rung\n  6, 0, -1, 0, // between top rung and middle\n  6, 1, 0, 0, // top of middle rung\n  6, 0, 1, 0, // front of middle rung\n  6, 1, 0, 0, // bottom of middle rung.\n  6, 0, -1, 0, // front of bottom\n  6, 1, 0, 0, // bottom\n  6, 0, -1, 0, // left side\n  6, -1, 0, 0]);\n  var colors = expandRLEData([// left column front\n  // top rung front\n  // middle rung front\n  18, 200, 70, 120, // left column back\n  // top rung back\n  // middle rung back\n  18, 80, 70, 200, // top\n  6, 70, 200, 210, // top rung front\n  6, 200, 200, 70, // under top rung\n  6, 210, 100, 70, // between top rung and middle\n  6, 210, 160, 70, // top of middle rung\n  6, 70, 180, 210, // front of middle rung\n  6, 100, 70, 210, // bottom of middle rung.\n  6, 76, 210, 100, // front of bottom\n  6, 140, 210, 80, // bottom\n  6, 90, 130, 110, // left side\n  6, 160, 160, 220], [255]);\n  var numVerts = positions.length / 3;\n  var arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2, numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array)\n  };\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (var ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCrescentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCrescentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createCrescentVertices(verticalRadius, outerRadius, innerRadius, thickness, subdivisionsDown, startOffset, endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset = endOffset || 1;\n  var subdivisionsThick = 2;\n  var offsetRange = endOffset - startOffset;\n  var numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (var z = 0; z <= subdivisionsDown; z++) {\n      var uBack = x / (subdivisionsThick - 1);\n      var v = z / subdivisionsDown;\n      var xBack = (uBack - 0.5) * 2;\n      var angle = (startOffset + v * offsetRange) * Math.PI;\n      var s = Math.sin(angle);\n      var c = Math.cos(angle);\n      var radius = lerp(verticalRadius, arcRadius, s);\n      var px = xBack * thickness;\n      var py = c * verticalRadius;\n      var pz = s * radius;\n      positions.push(px, py, pz);\n      var n = add(multiply([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  } // Generate the individual vertices in our vertex buffer.\n\n\n  for (var x = 0; x < subdivisionsThick; x++) {\n    var uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0, 0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0, 0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  } // Do outer surface.\n\n\n  var indices = createAugmentedTypedArray(3, subdivisionsDown * 2 * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (var z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(leftArcOffset + z + 0, leftArcOffset + z + 1, rightArcOffset + z + 0); // Make triangle 2 of quad.\n\n      indices.push(leftArcOffset + z + 1, rightArcOffset + z + 1, rightArcOffset + z + 0);\n    }\n  }\n\n  var numVerticesDown = subdivisionsDown + 1; // front\n\n  createSurface(numVerticesDown * 0, numVerticesDown * 4); // right\n\n  createSurface(numVerticesDown * 5, numVerticesDown * 7); // back\n\n  createSurface(numVerticesDown * 6, numVerticesDown * 2); // left\n\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n/**\n * Creates cylinder buffers. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCylinderBuffers\n */\n\n/**\n * Creates cylinder vertices. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createCylinderVertices(radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap) {\n  return createTruncatedConeVertices(radius, radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap);\n}\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createTorusVertices(radius, thickness, radialSubdivisions, bodySubdivisions, startAngle, endAngle) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  var range = endAngle - startAngle;\n  var radialParts = radialSubdivisions + 1;\n  var bodyParts = bodySubdivisions + 1;\n  var numVertices = radialParts * bodyParts;\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n  var indices = createAugmentedTypedArray(3, radialSubdivisions * bodySubdivisions * 2, Uint16Array);\n\n  for (var slice = 0; slice < bodyParts; ++slice) {\n    var v = slice / bodySubdivisions;\n    var sliceAngle = v * Math.PI * 2;\n    var sliceSin = Math.sin(sliceAngle);\n    var ringRadius = radius + sliceSin * thickness;\n    var ny = Math.cos(sliceAngle);\n    var y = ny * thickness;\n\n    for (var ring = 0; ring < radialParts; ++ring) {\n      var u = ring / radialSubdivisions;\n      var ringAngle = startAngle + u * range;\n      var xSin = Math.sin(ringAngle);\n      var zCos = Math.cos(ringAngle);\n      var x = xSin * ringRadius;\n      var z = zCos * ringRadius;\n      var nx = xSin * sliceSin;\n      var nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (var _slice = 0; _slice < bodySubdivisions; ++_slice) {\n    // eslint-disable-line\n    for (var _ring = 0; _ring < radialSubdivisions; ++_ring) {\n      // eslint-disable-line\n      var nextRingIndex = 1 + _ring;\n      var nextSliceIndex = 1 + _slice;\n      indices.push(radialParts * _slice + _ring, radialParts * nextSliceIndex + _ring, radialParts * _slice + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + _ring, radialParts * nextSliceIndex + nextRingIndex, radialParts * _slice + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createDiscVertices(radius, divisions, stacks, innerRadius, stackPower) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0; // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n\n  var numVertices = (divisions + 1) * (stacks + 1);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n  var indices = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n  var firstIndex = 0;\n  var radiusSpan = radius - innerRadius;\n  var pointsPerStack = divisions + 1; // Build the disk one stack at a time.\n\n  for (var stack = 0; stack <= stacks; ++stack) {\n    var stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (var i = 0; i <= divisions; ++i) {\n      var theta = 2.0 * Math.PI * i / divisions;\n      var x = stackRadius * Math.cos(theta);\n      var z = stackRadius * Math.sin(theta);\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - i / divisions, stack / stacks);\n\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        var a = firstIndex + (i + 1);\n        var b = firstIndex + i;\n        var c = firstIndex + i - pointsPerStack;\n        var d = firstIndex + (i + 1) - pointsPerStack; // Make a quad of the vertices a, b, c, d.\n\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\n\n\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  var numElements = vertices.position.numElements;\n  var vColors = createAugmentedTypedArray(4, numElements, Uint8Array);\n\n  var rand = options.rand || function (ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n\n  vertices.color = vColors;\n\n  if (vertices.indices) {\n    // just make random colors if index\n    for (var ii = 0; ii < numElements; ++ii) {\n      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    var numVertsPerColor = options.vertsPerColor || 3;\n    var numSets = numElements / numVertsPerColor;\n\n    for (var _ii2 = 0; _ii2 < numSets; ++_ii2) {\n      // eslint-disable-line\n      var color = [rand(_ii2, 0), rand(_ii2, 1), rand(_ii2, 2), rand(_ii2, 3)];\n\n      for (var jj = 0; jj < numVertsPerColor; ++jj) {\n        vColors.push(color);\n      }\n    }\n  }\n\n  return vertices;\n}\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\n\n\nfunction createBufferFunc(fn) {\n  return function (gl) {\n    var arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return createBuffersFromArrays(gl, arrays);\n  };\n}\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\n\n\nfunction createBufferInfoFunc(fn) {\n  return function (gl) {\n    var arrays = fn.apply(null, Array.prototype.slice.call(arguments, 1));\n    return createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nvar arraySpecPropertyNames = [\"numComponents\", \"size\", \"type\", \"normalize\", \"stride\", \"offset\", \"attrib\", \"name\", \"attribName\"];\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\n\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  var length = src.length;\n\n  for (var ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\n\n\nfunction createArrayOfSameType(srcArray, length) {\n  var arraySrc = getArray$1(srcArray);\n  var newArray = new arraySrc.constructor(length);\n  var newArraySpec = newArray; // If it appears to have been augmented make new one augmented\n\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  } // If it was a full spec make new one a full spec\n\n\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray\n    };\n    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n\n  return newArraySpec;\n}\n/**\n * Concatenates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primitives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatenated vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction concatVertices(arrayOfArrays) {\n  var names = {};\n  var baseName; // get names of all arrays.\n  // and numElements for each set of vertices\n\n  var _loop = function _loop(ii) {\n    var arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function (name) {\n      // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n\n      var arrayInfo = arrays[name];\n      var numComponents = getNumComponents$1(arrayInfo, name);\n      var array = getArray$1(arrayInfo);\n      var numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  };\n\n  for (var ii = 0; ii < arrayOfArrays.length; ++ii) {\n    _loop(ii);\n  } // compute length of combined array\n  // and return one for reference\n\n\n  function getLengthOfCombinedArrays(name) {\n    var length = 0;\n    var arraySpec;\n\n    for (var _ii3 = 0; _ii3 < arrayOfArrays.length; ++_ii3) {\n      var arrays = arrayOfArrays[_ii3];\n      var arrayInfo = arrays[name];\n      var array = getArray$1(arrayInfo);\n      length += array.length;\n\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n\n    return {\n      length: length,\n      spec: arraySpec\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    var baseIndex = 0;\n    var offset = 0;\n\n    for (var _ii4 = 0; _ii4 < arrayOfArrays.length; ++_ii4) {\n      var arrays = arrayOfArrays[_ii4];\n      var arrayInfo = arrays[name];\n      var array = getArray$1(arrayInfo);\n\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[_ii4];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n\n      offset += array.length;\n    }\n  }\n\n  var base = names[baseName];\n  var newArrays = {};\n  Object.keys(names).forEach(function (name) {\n    var info = getLengthOfCombinedArrays(name);\n    var newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray$1(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The duplicated vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction duplicateVertices(arrays) {\n  var newArrays = {};\n  Object.keys(arrays).forEach(function (name) {\n    var arraySpec = arrays[name];\n    var srcArray = getArray$1(arraySpec);\n    var newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray$1(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nvar create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nvar create3DFBuffers = createBufferFunc(create3DFVertices);\nvar createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nvar createCubeBuffers = createBufferFunc(createCubeVertices);\nvar createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nvar createPlaneBuffers = createBufferFunc(createPlaneVertices);\nvar createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nvar createSphereBuffers = createBufferFunc(createSphereVertices);\nvar createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nvar createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nvar createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nvar createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nvar createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);\nvar createCrescentBuffers = createBufferFunc(createCrescentVertices);\nvar createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nvar createCylinderBuffers = createBufferFunc(createCylinderVertices);\nvar createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nvar createTorusBuffers = createBufferFunc(createTorusVertices);\nvar createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nvar createDiscBuffers = createBufferFunc(createDiscVertices); // these were mis-spelled until 4.12\n\nvar createCresentBufferInfo = createCrescentBufferInfo;\nvar createCresentBuffers = createCrescentBuffers;\nvar createCresentVertices = createCrescentVertices;\nvar primitives = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  create3DFBufferInfo: create3DFBufferInfo,\n  create3DFBuffers: create3DFBuffers,\n  create3DFVertices: create3DFVertices,\n  createAugmentedTypedArray: createAugmentedTypedArray,\n  createCubeBufferInfo: createCubeBufferInfo,\n  createCubeBuffers: createCubeBuffers,\n  createCubeVertices: createCubeVertices,\n  createPlaneBufferInfo: createPlaneBufferInfo,\n  createPlaneBuffers: createPlaneBuffers,\n  createPlaneVertices: createPlaneVertices,\n  createSphereBufferInfo: createSphereBufferInfo,\n  createSphereBuffers: createSphereBuffers,\n  createSphereVertices: createSphereVertices,\n  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,\n  createTruncatedConeBuffers: createTruncatedConeBuffers,\n  createTruncatedConeVertices: createTruncatedConeVertices,\n  createXYQuadBufferInfo: createXYQuadBufferInfo,\n  createXYQuadBuffers: createXYQuadBuffers,\n  createXYQuadVertices: createXYQuadVertices,\n  createCresentBufferInfo: createCresentBufferInfo,\n  createCresentBuffers: createCresentBuffers,\n  createCresentVertices: createCresentVertices,\n  createCrescentBufferInfo: createCrescentBufferInfo,\n  createCrescentBuffers: createCrescentBuffers,\n  createCrescentVertices: createCrescentVertices,\n  createCylinderBufferInfo: createCylinderBufferInfo,\n  createCylinderBuffers: createCylinderBuffers,\n  createCylinderVertices: createCylinderVertices,\n  createTorusBufferInfo: createTorusBufferInfo,\n  createTorusBuffers: createTorusBuffers,\n  createTorusVertices: createTorusVertices,\n  createDiscBufferInfo: createDiscBufferInfo,\n  createDiscBuffers: createDiscBuffers,\n  createDiscVertices: createDiscVertices,\n  deindexVertices: deindexVertices,\n  flattenNormals: flattenNormals,\n  makeRandomVertexColors: makeRandomVertexColors,\n  reorientDirections: reorientDirections,\n  reorientNormals: reorientNormals,\n  reorientPositions: reorientPositions,\n  reorientVertices: reorientVertices,\n  concatVertices: concatVertices,\n  duplicateVertices: duplicateVertices\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\n\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\n\n\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\n\n\nvar glEnumToString = function () {\n  var haveEnumsForType = {};\n  var enums = {};\n\n  function addEnums(gl) {\n    var type = gl.constructor.name;\n\n    if (!haveEnumsForType[type]) {\n      for (var key in gl) {\n        if (typeof gl[key] === 'number') {\n          var existing = enums[gl[key]];\n          enums[gl[key]] = existing ? \"\".concat(existing, \" | \").concat(key) : key;\n        }\n      }\n\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? \"0x\".concat(value.toString(16)) : value);\n  };\n}();\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  glEnumToString: glEnumToString,\n  isWebGL1: isWebGL1,\n  isWebGL2: isWebGL2\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nvar defaults$1 = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined\n};\nvar isArrayBuffer$1 = isArrayBuffer; // Should we make this on demand?\n\nvar getShared2DContext = function () {\n  var s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx || (typeof document !== 'undefined' && document.createElement ? document.createElement(\"canvas\").getContext(\"2d\") : null);\n    return s_ctx;\n  };\n}(); // NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\n\n\nvar ALPHA = 0x1906;\nvar RGB = 0x1907;\nvar RGBA = 0x1908;\nvar LUMINANCE = 0x1909;\nvar LUMINANCE_ALPHA = 0x190A;\nvar DEPTH_COMPONENT = 0x1902;\nvar DEPTH_STENCIL = 0x84F9;\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\n\nvar CLAMP_TO_EDGE = 0x812f;\n/* TextureMagFilter */\n\nvar NEAREST = 0x2600;\nvar LINEAR = 0x2601;\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\n\nvar TEXTURE_2D = 0x0de1;\nvar TEXTURE_CUBE_MAP = 0x8513;\nvar TEXTURE_3D = 0x806f;\nvar TEXTURE_2D_ARRAY = 0x8c1a;\n/* Cubemap Targets */\n\nvar TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nvar TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nvar TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nvar TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nvar TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nvar TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\n/* Texture Parameters */\n\nvar TEXTURE_MIN_FILTER = 0x2801;\nvar TEXTURE_MAG_FILTER = 0x2800;\nvar TEXTURE_WRAP_S = 0x2802;\nvar TEXTURE_WRAP_T = 0x2803;\nvar TEXTURE_WRAP_R = 0x8072;\nvar TEXTURE_MIN_LOD = 0x813a;\nvar TEXTURE_MAX_LOD = 0x813b;\nvar TEXTURE_BASE_LEVEL = 0x813c;\nvar TEXTURE_MAX_LEVEL = 0x813d;\n/* Pixel store */\n\nvar UNPACK_ALIGNMENT = 0x0cf5;\nvar UNPACK_ROW_LENGTH = 0x0cf2;\nvar UNPACK_IMAGE_HEIGHT = 0x806e;\nvar UNPACK_SKIP_PIXELS = 0x0cf4;\nvar UNPACK_SKIP_ROWS = 0x0cf3;\nvar UNPACK_SKIP_IMAGES = 0x806d;\nvar UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nvar UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;\nvar UNPACK_FLIP_Y_WEBGL = 0x9240;\nvar R8 = 0x8229;\nvar R8_SNORM = 0x8F94;\nvar R16F = 0x822D;\nvar R32F = 0x822E;\nvar R8UI = 0x8232;\nvar R8I = 0x8231;\nvar RG16UI = 0x823A;\nvar RG16I = 0x8239;\nvar RG32UI = 0x823C;\nvar RG32I = 0x823B;\nvar RG8 = 0x822B;\nvar RG8_SNORM = 0x8F95;\nvar RG16F = 0x822F;\nvar RG32F = 0x8230;\nvar RG8UI = 0x8238;\nvar RG8I = 0x8237;\nvar R16UI = 0x8234;\nvar R16I = 0x8233;\nvar R32UI = 0x8236;\nvar R32I = 0x8235;\nvar RGB8 = 0x8051;\nvar SRGB8 = 0x8C41;\nvar RGB565 = 0x8D62;\nvar RGB8_SNORM = 0x8F96;\nvar R11F_G11F_B10F = 0x8C3A;\nvar RGB9_E5 = 0x8C3D;\nvar RGB16F = 0x881B;\nvar RGB32F = 0x8815;\nvar RGB8UI = 0x8D7D;\nvar RGB8I = 0x8D8F;\nvar RGB16UI = 0x8D77;\nvar RGB16I = 0x8D89;\nvar RGB32UI = 0x8D71;\nvar RGB32I = 0x8D83;\nvar RGBA8 = 0x8058;\nvar SRGB8_ALPHA8 = 0x8C43;\nvar RGBA8_SNORM = 0x8F97;\nvar RGB5_A1 = 0x8057;\nvar RGBA4 = 0x8056;\nvar RGB10_A2 = 0x8059;\nvar RGBA16F = 0x881A;\nvar RGBA32F = 0x8814;\nvar RGBA8UI = 0x8D7C;\nvar RGBA8I = 0x8D8E;\nvar RGB10_A2UI = 0x906F;\nvar RGBA16UI = 0x8D76;\nvar RGBA16I = 0x8D88;\nvar RGBA32I = 0x8D82;\nvar RGBA32UI = 0x8D70;\nvar DEPTH_COMPONENT16 = 0x81A5;\nvar DEPTH_COMPONENT24 = 0x81A6;\nvar DEPTH_COMPONENT32F = 0x8CAC;\nvar DEPTH32F_STENCIL8 = 0x8CAD;\nvar DEPTH24_STENCIL8 = 0x88F0;\n/* DataType */\n\nvar BYTE$2 = 0x1400;\nvar UNSIGNED_BYTE$2 = 0x1401;\nvar SHORT$2 = 0x1402;\nvar UNSIGNED_SHORT$2 = 0x1403;\nvar INT$2 = 0x1404;\nvar UNSIGNED_INT$2 = 0x1405;\nvar FLOAT$2 = 0x1406;\nvar UNSIGNED_SHORT_4_4_4_4$1 = 0x8033;\nvar UNSIGNED_SHORT_5_5_5_1$1 = 0x8034;\nvar UNSIGNED_SHORT_5_6_5$1 = 0x8363;\nvar HALF_FLOAT$1 = 0x140B;\nvar HALF_FLOAT_OES = 0x8D61; // Thanks Khronos for making this different >:(\n\nvar UNSIGNED_INT_2_10_10_10_REV$1 = 0x8368;\nvar UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\nvar UNSIGNED_INT_5_9_9_9_REV$1 = 0x8C3E;\nvar FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\nvar UNSIGNED_INT_24_8$1 = 0x84FA;\nvar RG = 0x8227;\nvar RG_INTEGER = 0x8228;\nvar RED = 0x1903;\nvar RED_INTEGER = 0x8D94;\nvar RGB_INTEGER = 0x8D98;\nvar RGBA_INTEGER = 0x8D99;\nvar formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  var f = formatInfo;\n  f[ALPHA] = {\n    numColorComponents: 1\n  };\n  f[LUMINANCE] = {\n    numColorComponents: 1\n  };\n  f[LUMINANCE_ALPHA] = {\n    numColorComponents: 2\n  };\n  f[RGB] = {\n    numColorComponents: 3\n  };\n  f[RGBA] = {\n    numColorComponents: 4\n  };\n  f[RED] = {\n    numColorComponents: 1\n  };\n  f[RED_INTEGER] = {\n    numColorComponents: 1\n  };\n  f[RG] = {\n    numColorComponents: 2\n  };\n  f[RG_INTEGER] = {\n    numColorComponents: 2\n  };\n  f[RGB] = {\n    numColorComponents: 3\n  };\n  f[RGB_INTEGER] = {\n    numColorComponents: 3\n  };\n  f[RGBA] = {\n    numColorComponents: 4\n  };\n  f[RGBA_INTEGER] = {\n    numColorComponents: 4\n  };\n  f[DEPTH_COMPONENT] = {\n    numColorComponents: 1\n  };\n  f[DEPTH_STENCIL] = {\n    numColorComponents: 2\n  };\n}\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nvar s_textureInternalFormatInfo;\n\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    var t = {}; // unsized formats\n\n    t[ALPHA] = {\n      textureFormat: ALPHA,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [1, 2, 2, 4],\n      type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2]\n    };\n    t[LUMINANCE] = {\n      textureFormat: LUMINANCE,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [1, 2, 2, 4],\n      type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2]\n    };\n    t[LUMINANCE_ALPHA] = {\n      textureFormat: LUMINANCE_ALPHA,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [2, 4, 4, 8],\n      type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2]\n    };\n    t[RGB] = {\n      textureFormat: RGB,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [3, 6, 6, 12, 2],\n      type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_5_6_5$1]\n    };\n    t[RGBA] = {\n      textureFormat: RGBA,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [4, 8, 8, 16, 2, 2],\n      type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_4_4_4_4$1, UNSIGNED_SHORT_5_5_5_1$1]\n    };\n    t[DEPTH_COMPONENT] = {\n      textureFormat: DEPTH_COMPONENT,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [2, 4],\n      type: [UNSIGNED_INT$2, UNSIGNED_SHORT$2]\n    }; // sized formats\n\n    t[R8] = {\n      textureFormat: RED,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [1],\n      type: [UNSIGNED_BYTE$2]\n    };\n    t[R8_SNORM] = {\n      textureFormat: RED,\n      colorRenderable: false,\n      textureFilterable: true,\n      bytesPerElement: [1],\n      type: [BYTE$2]\n    };\n    t[R16F] = {\n      textureFormat: RED,\n      colorRenderable: false,\n      textureFilterable: true,\n      bytesPerElement: [4, 2],\n      type: [FLOAT$2, HALF_FLOAT$1]\n    };\n    t[R32F] = {\n      textureFormat: RED,\n      colorRenderable: false,\n      textureFilterable: false,\n      bytesPerElement: [4],\n      type: [FLOAT$2]\n    };\n    t[R8UI] = {\n      textureFormat: RED_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [1],\n      type: [UNSIGNED_BYTE$2]\n    };\n    t[R8I] = {\n      textureFormat: RED_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [1],\n      type: [BYTE$2]\n    };\n    t[R16UI] = {\n      textureFormat: RED_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [2],\n      type: [UNSIGNED_SHORT$2]\n    };\n    t[R16I] = {\n      textureFormat: RED_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [2],\n      type: [SHORT$2]\n    };\n    t[R32UI] = {\n      textureFormat: RED_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [4],\n      type: [UNSIGNED_INT$2]\n    };\n    t[R32I] = {\n      textureFormat: RED_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [4],\n      type: [INT$2]\n    };\n    t[RG8] = {\n      textureFormat: RG,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [2],\n      type: [UNSIGNED_BYTE$2]\n    };\n    t[RG8_SNORM] = {\n      textureFormat: RG,\n      colorRenderable: false,\n      textureFilterable: true,\n      bytesPerElement: [2],\n      type: [BYTE$2]\n    };\n    t[RG16F] = {\n      textureFormat: RG,\n      colorRenderable: false,\n      textureFilterable: true,\n      bytesPerElement: [8, 4],\n      type: [FLOAT$2, HALF_FLOAT$1]\n    };\n    t[RG32F] = {\n      textureFormat: RG,\n      colorRenderable: false,\n      textureFilterable: false,\n      bytesPerElement: [8],\n      type: [FLOAT$2]\n    };\n    t[RG8UI] = {\n      textureFormat: RG_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [2],\n      type: [UNSIGNED_BYTE$2]\n    };\n    t[RG8I] = {\n      textureFormat: RG_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [2],\n      type: [BYTE$2]\n    };\n    t[RG16UI] = {\n      textureFormat: RG_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [4],\n      type: [UNSIGNED_SHORT$2]\n    };\n    t[RG16I] = {\n      textureFormat: RG_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [4],\n      type: [SHORT$2]\n    };\n    t[RG32UI] = {\n      textureFormat: RG_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [8],\n      type: [UNSIGNED_INT$2]\n    };\n    t[RG32I] = {\n      textureFormat: RG_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [8],\n      type: [INT$2]\n    };\n    t[RGB8] = {\n      textureFormat: RGB,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [3],\n      type: [UNSIGNED_BYTE$2]\n    };\n    t[SRGB8] = {\n      textureFormat: RGB,\n      colorRenderable: false,\n      textureFilterable: true,\n      bytesPerElement: [3],\n      type: [UNSIGNED_BYTE$2]\n    };\n    t[RGB565] = {\n      textureFormat: RGB,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [3, 2],\n      type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_6_5$1]\n    };\n    t[RGB8_SNORM] = {\n      textureFormat: RGB,\n      colorRenderable: false,\n      textureFilterable: true,\n      bytesPerElement: [3],\n      type: [BYTE$2]\n    };\n    t[R11F_G11F_B10F] = {\n      textureFormat: RGB,\n      colorRenderable: false,\n      textureFilterable: true,\n      bytesPerElement: [12, 6, 4],\n      type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_10F_11F_11F_REV$1]\n    };\n    t[RGB9_E5] = {\n      textureFormat: RGB,\n      colorRenderable: false,\n      textureFilterable: true,\n      bytesPerElement: [12, 6, 4],\n      type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_5_9_9_9_REV$1]\n    };\n    t[RGB16F] = {\n      textureFormat: RGB,\n      colorRenderable: false,\n      textureFilterable: true,\n      bytesPerElement: [12, 6],\n      type: [FLOAT$2, HALF_FLOAT$1]\n    };\n    t[RGB32F] = {\n      textureFormat: RGB,\n      colorRenderable: false,\n      textureFilterable: false,\n      bytesPerElement: [12],\n      type: [FLOAT$2]\n    };\n    t[RGB8UI] = {\n      textureFormat: RGB_INTEGER,\n      colorRenderable: false,\n      textureFilterable: false,\n      bytesPerElement: [3],\n      type: [UNSIGNED_BYTE$2]\n    };\n    t[RGB8I] = {\n      textureFormat: RGB_INTEGER,\n      colorRenderable: false,\n      textureFilterable: false,\n      bytesPerElement: [3],\n      type: [BYTE$2]\n    };\n    t[RGB16UI] = {\n      textureFormat: RGB_INTEGER,\n      colorRenderable: false,\n      textureFilterable: false,\n      bytesPerElement: [6],\n      type: [UNSIGNED_SHORT$2]\n    };\n    t[RGB16I] = {\n      textureFormat: RGB_INTEGER,\n      colorRenderable: false,\n      textureFilterable: false,\n      bytesPerElement: [6],\n      type: [SHORT$2]\n    };\n    t[RGB32UI] = {\n      textureFormat: RGB_INTEGER,\n      colorRenderable: false,\n      textureFilterable: false,\n      bytesPerElement: [12],\n      type: [UNSIGNED_INT$2]\n    };\n    t[RGB32I] = {\n      textureFormat: RGB_INTEGER,\n      colorRenderable: false,\n      textureFilterable: false,\n      bytesPerElement: [12],\n      type: [INT$2]\n    };\n    t[RGBA8] = {\n      textureFormat: RGBA,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [4],\n      type: [UNSIGNED_BYTE$2]\n    };\n    t[SRGB8_ALPHA8] = {\n      textureFormat: RGBA,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [4],\n      type: [UNSIGNED_BYTE$2]\n    };\n    t[RGBA8_SNORM] = {\n      textureFormat: RGBA,\n      colorRenderable: false,\n      textureFilterable: true,\n      bytesPerElement: [4],\n      type: [BYTE$2]\n    };\n    t[RGB5_A1] = {\n      textureFormat: RGBA,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [4, 2, 4],\n      type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_5_5_1$1, UNSIGNED_INT_2_10_10_10_REV$1]\n    };\n    t[RGBA4] = {\n      textureFormat: RGBA,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [4, 2],\n      type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_4_4_4_4$1]\n    };\n    t[RGB10_A2] = {\n      textureFormat: RGBA,\n      colorRenderable: true,\n      textureFilterable: true,\n      bytesPerElement: [4],\n      type: [UNSIGNED_INT_2_10_10_10_REV$1]\n    };\n    t[RGBA16F] = {\n      textureFormat: RGBA,\n      colorRenderable: false,\n      textureFilterable: true,\n      bytesPerElement: [16, 8],\n      type: [FLOAT$2, HALF_FLOAT$1]\n    };\n    t[RGBA32F] = {\n      textureFormat: RGBA,\n      colorRenderable: false,\n      textureFilterable: false,\n      bytesPerElement: [16],\n      type: [FLOAT$2]\n    };\n    t[RGBA8UI] = {\n      textureFormat: RGBA_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [4],\n      type: [UNSIGNED_BYTE$2]\n    };\n    t[RGBA8I] = {\n      textureFormat: RGBA_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [4],\n      type: [BYTE$2]\n    };\n    t[RGB10_A2UI] = {\n      textureFormat: RGBA_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [4],\n      type: [UNSIGNED_INT_2_10_10_10_REV$1]\n    };\n    t[RGBA16UI] = {\n      textureFormat: RGBA_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [8],\n      type: [UNSIGNED_SHORT$2]\n    };\n    t[RGBA16I] = {\n      textureFormat: RGBA_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [8],\n      type: [SHORT$2]\n    };\n    t[RGBA32I] = {\n      textureFormat: RGBA_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [16],\n      type: [INT$2]\n    };\n    t[RGBA32UI] = {\n      textureFormat: RGBA_INTEGER,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [16],\n      type: [UNSIGNED_INT$2]\n    }; // Sized Internal\n\n    t[DEPTH_COMPONENT16] = {\n      textureFormat: DEPTH_COMPONENT,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [2, 4],\n      type: [UNSIGNED_SHORT$2, UNSIGNED_INT$2]\n    };\n    t[DEPTH_COMPONENT24] = {\n      textureFormat: DEPTH_COMPONENT,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [4],\n      type: [UNSIGNED_INT$2]\n    };\n    t[DEPTH_COMPONENT32F] = {\n      textureFormat: DEPTH_COMPONENT,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [4],\n      type: [FLOAT$2]\n    };\n    t[DEPTH24_STENCIL8] = {\n      textureFormat: DEPTH_STENCIL,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [4],\n      type: [UNSIGNED_INT_24_8$1]\n    };\n    t[DEPTH32F_STENCIL8] = {\n      textureFormat: DEPTH_STENCIL,\n      colorRenderable: true,\n      textureFilterable: false,\n      bytesPerElement: [4],\n      type: [FLOAT_32_UNSIGNED_INT_24_8_REV$1]\n    };\n    Object.keys(t).forEach(function (internalFormat) {\n      var info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function (bytesPerElement, ndx) {\n        var type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n\n  return s_textureInternalFormatInfo[internalFormat];\n}\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\n\n\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  var info = getTextureInternalFormatInfo(internalFormat);\n\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n\n  var bytesPerElement = info.bytesPerElementMap[type];\n\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n\n  return bytesPerElement;\n}\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\n\n\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  var info = getTextureInternalFormatInfo(internalFormat);\n\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n\n  return {\n    format: info.textureFormat,\n    type: info.type[0]\n  };\n}\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\n\n\nfunction isPowerOf2(value) {\n  return (value & value - 1) === 0;\n}\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\n\n\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n\n  var info = getTextureInternalFormatInfo(internalFormat);\n\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n\n  return info.colorRenderable && info.textureFilterable;\n}\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\n\n\nfunction canFilter(internalFormat) {\n  var info = getTextureInternalFormatInfo(internalFormat);\n\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n\n  return info.textureFilterable;\n}\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\n\n\nfunction getNumComponentsForFormat(format) {\n  var info = formatInfo[format];\n\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n\n  return info.numColorComponents;\n}\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\n\n\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer$1(src)) {\n    return getGLTypeForTypedArray(src);\n  }\n\n  return defaultType || UNSIGNED_BYTE$2;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n\n  if (!width && !height) {\n    var size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));\n\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n\n  return {\n    width: width,\n    height: height\n  };\n}\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\n\n\nfunction setDefaultTextureColor(color) {\n  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults$1(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$1);\n\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\n\n\nfunction setPackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\n\n\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n\n  if (isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\n\n\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n\n    if (target === TEXTURE_3D || isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n\n  if (options.minLod) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n\n  if (options.maxLod) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n\n  if (options.baseLevel) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n\n  if (options.maxLevel) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n}\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setTextureParameters(gl, tex, options) {\n  var target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\n\n\nfunction createSampler(gl, options) {\n  var sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\n\n\nfunction createSamplers(gl, samplerOptions) {\n  var samplers = {};\n  Object.keys(samplerOptions).forEach(function (name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\n\n\nfunction make1Pixel(color) {\n  color = color || defaults$1.textureColor;\n\n  if (isArrayBuffer$1(color)) {\n    return color;\n  }\n\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\n\n\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults$1.textureOptions;\n  internalFormat = internalFormat || RGBA;\n  var target = options.target || TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    var filtering = canFilter(internalFormat) ? LINEAR : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || options.auto === undefined && options.level === undefined;\n}\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\n\n\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [TEXTURE_CUBE_MAP_POSITIVE_X, TEXTURE_CUBE_MAP_NEGATIVE_X, TEXTURE_CUBE_MAP_POSITIVE_Y, TEXTURE_CUBE_MAP_NEGATIVE_Y, TEXTURE_CUBE_MAP_POSITIVE_Z, TEXTURE_CUBE_MAP_NEGATIVE_Z];\n}\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\n\n\nfunction getCubeFacesWithNdx(gl, options) {\n  var faces = getCubeFaceOrder(gl, options); // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n\n  var facesWithNdx = faces.map(function (face, ndx) {\n    return {\n      face: face,\n      ndx: ndx\n    };\n  });\n  facesWithNdx.sort(function (a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\n\n\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults$1.textureOptions;\n  var target = options.target || TEXTURE_2D;\n  var level = options.level || 0;\n  var width = element.width;\n  var height = element.height;\n  var internalFormat = options.internalFormat || options.format || RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n\n  if (target === TEXTURE_CUBE_MAP) {\n    // guess the parts\n    var imgWidth = element.width;\n    var imgHeight = element.height;\n    var size;\n    var slices;\n\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n\n    var ctx = getShared2DContext();\n\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function (f) {\n        var xOffset = slices[f.ndx * 2 + 0] * size;\n        var yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      }); // Free up the canvas memory\n\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function (f) {\n        var xOffset = slices[f.ndx * 2 + 0] * size;\n        var yOffset = slices[f.ndx * 2 + 1] * size; // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none'\n        }).then(function (imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    var smallest = Math.min(element.width, element.height);\n    var largest = Math.max(element.width, element.height);\n    var depth = largest / smallest;\n\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n\n    var xMult = element.width === largest ? 1 : 0;\n    var yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n\n    for (var d = 0; d < depth; ++d) {\n      var srcX = d * smallest * xMult;\n      var srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {}\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\n\n\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    var a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname && a.port === location.port && a.protocol === location.protocol;\n  } else {\n    var localOrigin = new URL(location.href).origin;\n    var urlOrigin = new URL(url, location.href).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url) ? 'anonymous' : crossOrigin;\n}\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\n\n\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  var img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    var clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError); // eslint-disable-line\n\n      img.removeEventListener('load', onLoad); // eslint-disable-line\n\n      img = null;\n    };\n\n    var onError = function onError() {\n      var msg = \"couldn't load image: \" + url;\n      error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    var onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    var err;\n    var bm;\n\n    var cb = function cb() {\n      callback(err, bm);\n    };\n\n    var options = {};\n\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n\n    fetch(url, options).then(function (response) {\n      if (!response.ok) {\n        throw response;\n      }\n\n      return response.blob();\n    }).then(function (blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none'\n      });\n    }).then(function (bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function (e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n\n  return img;\n}\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\n\n\nfunction isTexImageSource(obj) {\n  return typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap || typeof ImageData !== 'undefined' && obj instanceof ImageData || typeof HTMLElement !== 'undefined' && obj instanceof HTMLElement;\n}\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\n\n\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function () {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults$1.textureOptions;\n  var target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n\n  if (options.color === false) {\n    return;\n  } // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n\n\n  var color = make1Pixel(options.color);\n\n  if (target === TEXTURE_CUBE_MAP) {\n    for (var ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  }\n}\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\n\n\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.\n\n  options = Object.assign({}, options);\n  var img = loadAndUseImage(options.src, options.crossOrigin, function (err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\n\n\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  var urls = options.src;\n\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n\n  var level = options.level || 0;\n  var internalFormat = options.internalFormat || options.format || RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || UNSIGNED_BYTE$2;\n  var target = options.target || TEXTURE_2D;\n\n  if (target !== TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n\n  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.\n\n  options = Object.assign({}, options);\n  var numToLoad = 6;\n  var errors = [];\n  var faces = getCubeFaceOrder(gl, options);\n  var imgs; // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function (err, img) {\n      --numToLoad;\n\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex); // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder().forEach(function (otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function (url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\n\n\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  var urls = options.src;\n  var internalFormat = options.internalFormat || options.format || RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || UNSIGNED_BYTE$2;\n  var target = options.target || TEXTURE_2D_ARRAY;\n\n  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n\n  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.\n\n  options = Object.assign({}, options);\n  var numToLoad = urls.length;\n  var errors = [];\n  var imgs; // eslint-disable-line\n\n  var level = options.level || 0;\n  var width = options.width;\n  var height = options.height;\n  var depth = urls.length;\n  var firstImage = true;\n\n  function uploadImg(slice) {\n    return function (err, img) {\n      --numToLoad;\n\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null); // put it in every slice otherwise some slices will be 0,0,0,0\n\n          for (var s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          var src = img;\n          var ctx;\n\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src); // free the canvas memory\n\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function (url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults$1.textureOptions;\n  var target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  var width = options.width;\n  var height = options.height;\n  var depth = options.depth;\n  var level = options.level || 0;\n  var internalFormat = options.internalFormat || options.format || RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n\n  if (!isArrayBuffer$1(src)) {\n    var Type = getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  var bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  var numElements = src.byteLength / bytesPerElement; // TODO: check UNPACK_ALIGNMENT?\n\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + glEnumToString(gl, format);\n  }\n\n  var dimensions;\n\n  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    if (!width && !height && !depth) {\n      var size = Math.cbrt(numElements);\n\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n\n  if (target === TEXTURE_CUBE_MAP) {\n    var elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    var faceSize = numElements / 6 * elementsPerElement;\n    getCubeFacesWithNdx(gl, options).forEach(function (f) {\n      var offset = faceSize * f.ndx;\n      var data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type\n  };\n}\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setEmptyTexture(gl, tex, options) {\n  var target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  var level = options.level || 0;\n  var internalFormat = options.internalFormat || options.format || RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || formatType.type;\n  setPackState(gl, options);\n\n  if (target === TEXTURE_CUBE_MAP) {\n    for (var ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\n\n\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  var tex = gl.createTexture();\n  var target = options.target || TEXTURE_2D;\n  var width = options.width || 1;\n  var height = options.height || 1;\n  var internalFormat = options.internalFormat || RGBA;\n  gl.bindTexture(target, tex);\n\n  if (target === TEXTURE_CUBE_MAP) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n\n  var src = options.src;\n\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n\n    if (typeof src === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer$1(src) || Array.isArray(src) && (typeof src[0] === 'number' || Array.isArray(src[0]) || isArrayBuffer$1(src[0]))) {\n      var dimensions = setTextureFromArray(gl, tex, src, options);\n      width = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof src[0] === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else {\n      // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\n\n\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  var target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  var level = options.level || 0;\n  var internalFormat = options.internalFormat || options.format || RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type;\n  var src = options.src;\n\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer$1(src) || Array.isArray(src) && typeof src[0] === 'number') {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n\n  if (target === TEXTURE_CUBE_MAP) {\n    for (var ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\n\n\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' || Array.isArray(src) && typeof src[0] === 'string';\n}\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\n\n\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  var numDownloading = 0;\n  var errors = [];\n  var textures = {};\n  var images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function () {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function (name) {\n    var options = textureOptions[name];\n    var onLoadFn;\n\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function onLoadFn(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n\n        if (err) {\n          errors.push(err);\n        }\n\n        callCallbackIfReady();\n      };\n\n      ++numDownloading;\n    }\n\n    textures[name] = createTexture(gl, options, onLoadFn);\n  }); // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n\n  callCallbackIfReady();\n  return textures;\n}\n\nvar textures = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setTextureDefaults_: setDefaults$1,\n  createSampler: createSampler,\n  createSamplers: createSamplers,\n  setSamplerParameters: setSamplerParameters,\n  createTexture: createTexture,\n  setEmptyTexture: setEmptyTexture,\n  setTextureFromArray: setTextureFromArray,\n  loadTextureFromUrl: loadTextureFromUrl,\n  setTextureFromElement: setTextureFromElement,\n  setTextureFilteringForSize: setTextureFilteringForSize,\n  setTextureParameters: setTextureParameters,\n  setDefaultTextureColor: setDefaultTextureColor,\n  createTextures: createTextures,\n  resizeTexture: resizeTexture,\n  canGenerateMipmap: canGenerateMipmap,\n  canFilter: canFilter,\n  getNumComponentsForFormat: getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nvar error$1 = error;\nvar warn$1 = warn;\n\nfunction getElementById(id) {\n  return typeof document !== 'undefined' && document.getElementById ? document.getElementById(id) : null;\n}\n\nvar TEXTURE0 = 0x84c0;\nvar DYNAMIC_DRAW = 0x88e8;\nvar ARRAY_BUFFER$1 = 0x8892;\nvar ELEMENT_ARRAY_BUFFER$1 = 0x8893;\nvar UNIFORM_BUFFER = 0x8a11;\nvar TRANSFORM_FEEDBACK_BUFFER = 0x8c8e;\nvar TRANSFORM_FEEDBACK = 0x8e22;\nvar COMPILE_STATUS = 0x8b81;\nvar LINK_STATUS = 0x8b82;\nvar FRAGMENT_SHADER = 0x8b30;\nvar VERTEX_SHADER = 0x8b31;\nvar SEPARATE_ATTRIBS = 0x8c8d;\nvar ACTIVE_UNIFORMS = 0x8b86;\nvar ACTIVE_ATTRIBUTES = 0x8b89;\nvar TRANSFORM_FEEDBACK_VARYINGS = 0x8c83;\nvar ACTIVE_UNIFORM_BLOCKS = 0x8a36;\nvar UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8a44;\nvar UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nvar UNIFORM_BLOCK_DATA_SIZE = 0x8a40;\nvar UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8a43;\nvar FLOAT$3 = 0x1406;\nvar FLOAT_VEC2 = 0x8B50;\nvar FLOAT_VEC3 = 0x8B51;\nvar FLOAT_VEC4 = 0x8B52;\nvar INT$3 = 0x1404;\nvar INT_VEC2 = 0x8B53;\nvar INT_VEC3 = 0x8B54;\nvar INT_VEC4 = 0x8B55;\nvar BOOL = 0x8B56;\nvar BOOL_VEC2 = 0x8B57;\nvar BOOL_VEC3 = 0x8B58;\nvar BOOL_VEC4 = 0x8B59;\nvar FLOAT_MAT2 = 0x8B5A;\nvar FLOAT_MAT3 = 0x8B5B;\nvar FLOAT_MAT4 = 0x8B5C;\nvar SAMPLER_2D = 0x8B5E;\nvar SAMPLER_CUBE = 0x8B60;\nvar SAMPLER_3D = 0x8B5F;\nvar SAMPLER_2D_SHADOW = 0x8B62;\nvar FLOAT_MAT2x3 = 0x8B65;\nvar FLOAT_MAT2x4 = 0x8B66;\nvar FLOAT_MAT3x2 = 0x8B67;\nvar FLOAT_MAT3x4 = 0x8B68;\nvar FLOAT_MAT4x2 = 0x8B69;\nvar FLOAT_MAT4x3 = 0x8B6A;\nvar SAMPLER_2D_ARRAY = 0x8DC1;\nvar SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;\nvar SAMPLER_CUBE_SHADOW = 0x8DC5;\nvar UNSIGNED_INT$3 = 0x1405;\nvar UNSIGNED_INT_VEC2 = 0x8DC6;\nvar UNSIGNED_INT_VEC3 = 0x8DC7;\nvar UNSIGNED_INT_VEC4 = 0x8DC8;\nvar INT_SAMPLER_2D = 0x8DCA;\nvar INT_SAMPLER_3D = 0x8DCB;\nvar INT_SAMPLER_CUBE = 0x8DCC;\nvar INT_SAMPLER_2D_ARRAY = 0x8DCF;\nvar UNSIGNED_INT_SAMPLER_2D = 0x8DD2;\nvar UNSIGNED_INT_SAMPLER_3D = 0x8DD3;\nvar UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;\nvar UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\nvar TEXTURE_2D$1 = 0x0DE1;\nvar TEXTURE_CUBE_MAP$1 = 0x8513;\nvar TEXTURE_3D$1 = 0x806F;\nvar TEXTURE_2D_ARRAY$1 = 0x8C1A;\nvar typeMap = {};\n/**\n * Returns the corresponding bind point for a given sampler type\n */\n\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n} // This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\n\nfunction floatSetter(gl, location) {\n  return function (v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function (v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function (v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function (v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function (v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function (v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function (v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function (v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function (v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function (v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function (v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function (v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function (v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function (v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function (v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  var bindPoint = getBindPointForSamplerType(gl, type);\n  return isWebGL2(gl) ? function (textureOrPair) {\n    var texture;\n    var sampler;\n\n    if (isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function (texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  var bindPoint = getBindPointForSamplerType(gl, type);\n  var units = new Int32Array(size);\n\n  for (var ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return isWebGL2(gl) ? function (textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function (textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      var texture;\n      var sampler;\n\n      if (isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function (textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function (texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT$3] = {\n  Type: Float32Array,\n  size: 4,\n  setter: floatSetter,\n  arraySetter: floatArraySetter\n};\ntypeMap[FLOAT_VEC2] = {\n  Type: Float32Array,\n  size: 8,\n  setter: floatVec2Setter,\n  cols: 2\n};\ntypeMap[FLOAT_VEC3] = {\n  Type: Float32Array,\n  size: 12,\n  setter: floatVec3Setter,\n  cols: 3\n};\ntypeMap[FLOAT_VEC4] = {\n  Type: Float32Array,\n  size: 16,\n  setter: floatVec4Setter,\n  cols: 4\n};\ntypeMap[INT$3] = {\n  Type: Int32Array,\n  size: 4,\n  setter: intSetter,\n  arraySetter: intArraySetter\n};\ntypeMap[INT_VEC2] = {\n  Type: Int32Array,\n  size: 8,\n  setter: intVec2Setter,\n  cols: 2\n};\ntypeMap[INT_VEC3] = {\n  Type: Int32Array,\n  size: 12,\n  setter: intVec3Setter,\n  cols: 3\n};\ntypeMap[INT_VEC4] = {\n  Type: Int32Array,\n  size: 16,\n  setter: intVec4Setter,\n  cols: 4\n};\ntypeMap[UNSIGNED_INT$3] = {\n  Type: Uint32Array,\n  size: 4,\n  setter: uintSetter,\n  arraySetter: uintArraySetter\n};\ntypeMap[UNSIGNED_INT_VEC2] = {\n  Type: Uint32Array,\n  size: 8,\n  setter: uintVec2Setter,\n  cols: 2\n};\ntypeMap[UNSIGNED_INT_VEC3] = {\n  Type: Uint32Array,\n  size: 12,\n  setter: uintVec3Setter,\n  cols: 3\n};\ntypeMap[UNSIGNED_INT_VEC4] = {\n  Type: Uint32Array,\n  size: 16,\n  setter: uintVec4Setter,\n  cols: 4\n};\ntypeMap[BOOL] = {\n  Type: Uint32Array,\n  size: 4,\n  setter: intSetter,\n  arraySetter: intArraySetter\n};\ntypeMap[BOOL_VEC2] = {\n  Type: Uint32Array,\n  size: 8,\n  setter: intVec2Setter,\n  cols: 2\n};\ntypeMap[BOOL_VEC3] = {\n  Type: Uint32Array,\n  size: 12,\n  setter: intVec3Setter,\n  cols: 3\n};\ntypeMap[BOOL_VEC4] = {\n  Type: Uint32Array,\n  size: 16,\n  setter: intVec4Setter,\n  cols: 4\n};\ntypeMap[FLOAT_MAT2] = {\n  Type: Float32Array,\n  size: 32,\n  setter: floatMat2Setter,\n  rows: 2,\n  cols: 2\n};\ntypeMap[FLOAT_MAT3] = {\n  Type: Float32Array,\n  size: 48,\n  setter: floatMat3Setter,\n  rows: 3,\n  cols: 3\n};\ntypeMap[FLOAT_MAT4] = {\n  Type: Float32Array,\n  size: 64,\n  setter: floatMat4Setter,\n  rows: 4,\n  cols: 4\n};\ntypeMap[FLOAT_MAT2x3] = {\n  Type: Float32Array,\n  size: 32,\n  setter: floatMat23Setter,\n  rows: 2,\n  cols: 3\n};\ntypeMap[FLOAT_MAT2x4] = {\n  Type: Float32Array,\n  size: 32,\n  setter: floatMat24Setter,\n  rows: 2,\n  cols: 4\n};\ntypeMap[FLOAT_MAT3x2] = {\n  Type: Float32Array,\n  size: 48,\n  setter: floatMat32Setter,\n  rows: 3,\n  cols: 2\n};\ntypeMap[FLOAT_MAT3x4] = {\n  Type: Float32Array,\n  size: 48,\n  setter: floatMat34Setter,\n  rows: 3,\n  cols: 4\n};\ntypeMap[FLOAT_MAT4x2] = {\n  Type: Float32Array,\n  size: 64,\n  setter: floatMat42Setter,\n  rows: 4,\n  cols: 2\n};\ntypeMap[FLOAT_MAT4x3] = {\n  Type: Float32Array,\n  size: 64,\n  setter: floatMat43Setter,\n  rows: 4,\n  cols: 3\n};\ntypeMap[SAMPLER_2D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D$1\n};\ntypeMap[SAMPLER_CUBE] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_CUBE_MAP$1\n};\ntypeMap[SAMPLER_3D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_3D$1\n};\ntypeMap[SAMPLER_2D_SHADOW] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D$1\n};\ntypeMap[SAMPLER_2D_ARRAY] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D_ARRAY$1\n};\ntypeMap[SAMPLER_2D_ARRAY_SHADOW] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D_ARRAY$1\n};\ntypeMap[SAMPLER_CUBE_SHADOW] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_CUBE_MAP$1\n};\ntypeMap[INT_SAMPLER_2D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D$1\n};\ntypeMap[INT_SAMPLER_3D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_3D$1\n};\ntypeMap[INT_SAMPLER_CUBE] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_CUBE_MAP$1\n};\ntypeMap[INT_SAMPLER_2D_ARRAY] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D_ARRAY$1\n};\ntypeMap[UNSIGNED_INT_SAMPLER_2D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D$1\n};\ntypeMap[UNSIGNED_INT_SAMPLER_3D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_3D$1\n};\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_CUBE_MAP$1\n};\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D_ARRAY$1\n};\n\nfunction floatAttribSetter(gl, index) {\n  return function (b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(index, b.numComponents || b.size, b.type || FLOAT$3, b.normalize || false, b.stride || 0, b.offset || 0);\n\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function (b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || INT$3, b.stride || 0, b.offset || 0);\n\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function (b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || UNSIGNED_INT$3, b.stride || 0, b.offset || 0);\n\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  var defaultSize = typeInfo.size;\n  var count = typeInfo.count;\n  return function (b) {\n    gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n    var numComponents = b.size || b.numComponents || defaultSize;\n    var size = numComponents / count;\n    var type = b.type || FLOAT$3;\n    var typeInfo = typeMap[type];\n    var stride = typeInfo.size * numComponents;\n    var normalize = b.normalize || false;\n    var offset = b.offset || 0;\n    var rowOffset = stride / count;\n\n    for (var i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(index + i, size, type, normalize, stride, offset + rowOffset * i);\n\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index + i, b.divisor);\n      }\n    }\n  };\n}\n\nvar attrTypeMap = {};\nattrTypeMap[FLOAT$3] = {\n  size: 4,\n  setter: floatAttribSetter\n};\nattrTypeMap[FLOAT_VEC2] = {\n  size: 8,\n  setter: floatAttribSetter\n};\nattrTypeMap[FLOAT_VEC3] = {\n  size: 12,\n  setter: floatAttribSetter\n};\nattrTypeMap[FLOAT_VEC4] = {\n  size: 16,\n  setter: floatAttribSetter\n};\nattrTypeMap[INT$3] = {\n  size: 4,\n  setter: intAttribSetter\n};\nattrTypeMap[INT_VEC2] = {\n  size: 8,\n  setter: intAttribSetter\n};\nattrTypeMap[INT_VEC3] = {\n  size: 12,\n  setter: intAttribSetter\n};\nattrTypeMap[INT_VEC4] = {\n  size: 16,\n  setter: intAttribSetter\n};\nattrTypeMap[UNSIGNED_INT$3] = {\n  size: 4,\n  setter: uintAttribSetter\n};\nattrTypeMap[UNSIGNED_INT_VEC2] = {\n  size: 8,\n  setter: uintAttribSetter\n};\nattrTypeMap[UNSIGNED_INT_VEC3] = {\n  size: 12,\n  setter: uintAttribSetter\n};\nattrTypeMap[UNSIGNED_INT_VEC4] = {\n  size: 16,\n  setter: uintAttribSetter\n};\nattrTypeMap[BOOL] = {\n  size: 4,\n  setter: intAttribSetter\n};\nattrTypeMap[BOOL_VEC2] = {\n  size: 8,\n  setter: intAttribSetter\n};\nattrTypeMap[BOOL_VEC3] = {\n  size: 12,\n  setter: intAttribSetter\n};\nattrTypeMap[BOOL_VEC4] = {\n  size: 16,\n  setter: intAttribSetter\n};\nattrTypeMap[FLOAT_MAT2] = {\n  size: 4,\n  setter: matAttribSetter,\n  count: 2\n};\nattrTypeMap[FLOAT_MAT3] = {\n  size: 9,\n  setter: matAttribSetter,\n  count: 3\n};\nattrTypeMap[FLOAT_MAT4] = {\n  size: 16,\n  setter: matAttribSetter,\n  count: 4\n};\nvar errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\n\nfunction addLineNumbersWithError(src) {\n  var log = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var lineOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  var matches = _toConsumableArray(log.matchAll(errorRE));\n\n  var lineNoToErrorMap = new Map(matches.map(function (m, ndx) {\n    var lineNo = parseInt(m[1]);\n    var next = matches[ndx + 1];\n    var end = next ? next.index : log.length;\n    var msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map(function (line, lineNo) {\n    var err = lineNoToErrorMap.get(lineNo);\n    return \"\".concat(lineNo + 1 + lineOffset, \": \").concat(line).concat(err ? \"\\n\\n^^^ \".concat(err) : '');\n  }).join('\\n');\n}\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\n\nvar spaceRE = /^[ \\t]*\\n/;\n/**\n * Loads a shader.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.\n * @return {WebGLShader} The created shader.\n * @private\n */\n\nfunction loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n  var errFn = opt_errorCallback || error$1; // Create the shader object\n\n  var shader = gl.createShader(shaderType); // Remove the first end of line because WebGL 2.0 requires\n  // #version 300 es\n  // as the first line. No whitespace allowed before that line\n  // so\n  //\n  // <script>\n  // #version 300 es\n  // </script>\n  //\n  // Has one line before it which is invalid according to GLSL ES 3.00\n  //\n\n  var lineOffset = 0;\n\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  } // Load the shader source\n\n\n  gl.shaderSource(shader, shaderSource); // Compile the shader\n\n  gl.compileShader(shader); // Check the compile status\n\n  var compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    var lastError = gl.getShaderInfoLog(shader);\n    errFn(\"\".concat(addLineNumbersWithError(shaderSource, lastError, lineOffset), \"\\nError compiling \").concat(glEnumToString(gl, shaderType), \": \").concat(lastError));\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\n\n\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  var transformFeedbackVaryings;\n  var transformFeedbackMode;\n\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    // If we have an errorCallback we can just return this object\n    // Otherwise we need to construct one with default errorCallback\n    if (opt_attribs.errorCallback) {\n      return opt_attribs;\n    }\n\n    var opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n  }\n\n  var options = {\n    errorCallback: opt_errorCallback || error$1,\n    transformFeedbackVaryings: transformFeedbackVaryings,\n    transformFeedbackMode: transformFeedbackMode\n  };\n\n  if (opt_attribs) {\n    var attribLocations = {};\n\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function (attrib, ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs;\n    }\n\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nvar defaultShaderType = [\"VERTEX_SHADER\", \"FRAGMENT_SHADER\"];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n\n  return undefined;\n}\n\nfunction deleteShaders(gl, shaders) {\n  shaders.forEach(function (shader) {\n    gl.deleteShader(shader);\n  });\n}\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program and calls useProgram.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  var realShaders = [];\n  var newShaders = [];\n\n  for (var ndx = 0; ndx < shaders.length; ++ndx) {\n    var shader = shaders[ndx];\n\n    if (typeof shader === 'string') {\n      var elem = getElementById(shader);\n      var src = elem ? elem.text : shader;\n      var type = gl[defaultShaderType[ndx]];\n\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n\n      shader = loadShader(gl, src, type, progOptions.errorCallback);\n      newShaders.push(shader);\n    }\n\n    if (isShader(gl, shader)) {\n      realShaders.push(shader);\n    }\n  }\n\n  if (realShaders.length !== shaders.length) {\n    progOptions.errorCallback(\"not enough shaders for program\");\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n\n  var program = gl.createProgram();\n  realShaders.forEach(function (shader) {\n    gl.attachShader(program, shader);\n  });\n\n  if (progOptions.attribLocations) {\n    Object.keys(progOptions.attribLocations).forEach(function (attrib) {\n      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n    });\n  }\n\n  var varyings = progOptions.transformFeedbackVaryings;\n\n  if (varyings) {\n    if (varyings.attribs) {\n      varyings = varyings.attribs;\n    }\n\n    if (!Array.isArray(varyings)) {\n      varyings = Object.keys(varyings);\n    }\n\n    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);\n  }\n\n  gl.linkProgram(program); // Check the link status\n\n  var linked = gl.getProgramParameter(program, LINK_STATUS);\n\n  if (!linked) {\n    // something went wrong with the link\n    var lastError = gl.getProgramInfoLog(program);\n    progOptions.errorCallback(\"\".concat(realShaders.map(function (shader) {\n      var src = addLineNumbersWithError(gl.getShaderSource(shader), '', 0);\n      var type = gl.getShaderParameter(shader, gl.SHADER_TYPE);\n      return \"\".concat(glEnumToString(gl, type), \"\\n\").concat(src, \"}\");\n    }).join('\\n'), \"\\nError in program linking: \").concat(lastError));\n    gl.deleteProgram(program);\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n\n  return program;\n}\n/**\n * Loads a shader from a script tag.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} scriptId The id of the script tag.\n * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n *     be derived from the type of the script tag.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.\n * @return {WebGLShader?} The created shader or null if error.\n * @private\n */\n\n\nfunction createShaderFromScript(gl, scriptId, opt_shaderType, opt_errorCallback) {\n  var shaderSource = \"\";\n  var shaderScript = getElementById(scriptId);\n\n  if (!shaderScript) {\n    throw new Error(\"unknown script element: \".concat(scriptId));\n  }\n\n  shaderSource = shaderScript.text;\n  var shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);\n\n  if (!shaderType) {\n    throw new Error('unknown shader type');\n  }\n\n  return loadShader(gl, shaderSource, shaderType, opt_errorCallback);\n}\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgramFromScripts(gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  var shaders = [];\n\n  for (var ii = 0; ii < shaderScriptIds.length; ++ii) {\n    var shader = createShaderFromScript(gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n\n    if (!shader) {\n      return null;\n    }\n\n    shaders.push(shader);\n  }\n\n  return createProgram(gl, shaders, progOptions);\n}\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgramFromSources(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  var shaders = [];\n\n  for (var ii = 0; ii < shaderSources.length; ++ii) {\n    var shader = loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n\n    if (!shader) {\n      return null;\n    }\n\n    shaders.push(shader);\n  }\n\n  return createProgram(gl, shaders, progOptions);\n}\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\n\n\nfunction isBuiltIn(info) {\n  var name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\nvar tokenRE = /(\\.|\\[|]|\\w+)/g;\n\nvar isDigit = function isDigit(s) {\n  return s >= '0' && s <= '9';\n};\n\nfunction addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\n  var tokens = fullPath.split(tokenRE).filter(function (s) {\n    return s !== '';\n  });\n  var tokenNdx = 0;\n  var path = '';\n\n  for (;;) {\n    var token = tokens[tokenNdx++]; // has to be name or number\n\n    path += token;\n    var isArrayIndex = isDigit(token[0]);\n    var accessor = isArrayIndex ? parseInt(token) : token;\n\n    if (isArrayIndex) {\n      path += tokens[tokenNdx++]; // skip ']'\n    }\n\n    var isLastToken = tokenNdx === tokens.length;\n\n    if (isLastToken) {\n      node[accessor] = setter;\n      break;\n    } else {\n      var _token = tokens[tokenNdx++]; // has to be . or [\n\n      var isArray = _token === '[';\n      var child = node[accessor] || (isArray ? [] : {});\n      node[accessor] = child;\n      node = child;\n\n      uniformSetters[path] = uniformSetters[path] || function (node) {\n        return function (value) {\n          setUniformTree(node, value);\n        };\n      }(child);\n\n      path += _token;\n    }\n  }\n}\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\n\n\nfunction createUniformSetters(gl, program) {\n  var textureUnit = 0;\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n\n  function createUniformSetter(program, uniformInfo, location) {\n    var isArray = uniformInfo.name.endsWith(\"[0]\");\n    var type = uniformInfo.type;\n    var typeInfo = typeMap[type];\n\n    if (!typeInfo) {\n      throw new Error(\"unknown type: 0x\".concat(type.toString(16))); // we should never get here.\n    }\n\n    var setter;\n\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      var unit = textureUnit;\n      textureUnit += uniformInfo.size;\n\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n\n    setter.location = location;\n    return setter;\n  }\n\n  var uniformSetters = {};\n  var uniformTree = {};\n  var numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (var ii = 0; ii < numUniforms; ++ii) {\n    var uniformInfo = gl.getActiveUniform(program, ii);\n\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n\n    var name = uniformInfo.name; // remove the array suffix.\n\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n\n    var _location = gl.getUniformLocation(program, uniformInfo.name); // the uniform will have no location if it's in a uniform block\n\n\n    if (_location) {\n      var setter = createUniformSetter(program, uniformInfo, _location);\n      uniformSetters[name] = setter;\n      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\n    }\n  }\n\n  return uniformSetters;\n}\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\n\n\nfunction createTransformFeedbackInfo(gl, program) {\n  var info = {};\n  var numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n\n  for (var ii = 0; ii < numVaryings; ++ii) {\n    var varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size\n    };\n  }\n\n  return info;\n}\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\n\n\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n\n  for (var name in bufferInfo) {\n    var varying = transformFeedbackInfo[name];\n\n    if (varying) {\n      var buf = bufferInfo[name];\n\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\n\n\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  var tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n/**\n * @typedef {Object} UniformData\n * @property {string} name The name of the uniform\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\n\n\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  var numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  var uniformData = [];\n  var uniformIndices = [];\n\n  for (var ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    var uniformInfo = gl.getActiveUniform(program, ii);\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [[\"UNIFORM_TYPE\", \"type\"], [\"UNIFORM_SIZE\", \"size\"], // num elements\n  [\"UNIFORM_BLOCK_INDEX\", \"blockNdx\"], [\"UNIFORM_OFFSET\", \"offset\"]].forEach(function (pair) {\n    var pname = pair[0];\n    var key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function (value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n  var blockSpecs = {};\n  var numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n\n  for (var _ii5 = 0; _ii5 < numUniformBlocks; ++_ii5) {\n    var name = gl.getActiveUniformBlockName(program, _ii5);\n    var blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, _ii5, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, _ii5, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, _ii5, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, _ii5, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData\n  };\n}\n\nvar arraySuffixRE = /\\[\\d+\\]\\.$/; // better way to check?\n\nvar pad = function pad(v, padding) {\n  return ((v + (padding - 1)) / padding | 0) * padding;\n};\n\nfunction createUniformBlockUniformSetter(view, isArray, rows, cols) {\n  if (isArray || rows) {\n    cols = cols || 1;\n    var numElements = view.length;\n    var totalRows = numElements / 4;\n    return function (value) {\n      var dst = 0;\n      var src = 0;\n\n      for (var row = 0; row < totalRows; ++row) {\n        for (var col = 0; col < cols; ++col) {\n          view[dst++] = value[src++];\n        }\n\n        dst += 4 - cols;\n      }\n    };\n  } else {\n    return function (value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\n\n\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  var blockSpecs = uniformBlockSpec.blockSpecs;\n  var uniformData = uniformBlockSpec.uniformData;\n  var blockSpec = blockSpecs[blockName];\n\n  if (!blockSpec) {\n    warn$1(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {}\n    };\n  }\n\n  var array = new ArrayBuffer(blockSpec.size);\n  var buffer = gl.createBuffer();\n  var uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n  var prefix = blockName + \".\";\n\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n\n  var uniforms = {};\n  var setters = {};\n  var setterTree = {};\n  blockSpec.uniformIndices.forEach(function (uniformNdx) {\n    var data = uniformData[uniformNdx];\n    var name = data.name;\n\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n\n    var isArray = name.endsWith('[0]');\n\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n\n    var typeInfo = typeMap[data.type];\n    var Type = typeInfo.Type;\n    var byteLength = isArray ? pad(typeInfo.size, 16) * data.size : typeInfo.size * data.size;\n    var uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView; // Note: I'm not sure what to do here. The original\n    // idea was to create TypedArray views into each part\n    // of the block. This is useful, for example if you have\n    // a block with { mat4: model; mat4 view; mat4 projection; }\n    // you'll get a Float32Array for each one suitable for\n    // passing to most JS math libraries including twgl's and glMatrix.js.\n    //\n    // But, if you have a an array of structures, especially if that\n    // array is large, you get a whole bunch of TypedArray views.\n    // Every one of them has overhead and switching between them all\n    // is probably a cache miss. In that case it would really be better\n    // to just have one view (asFloat) and have all the setters\n    // just reference the correct portion. But, then you can't easily\n    // treat a matrix, or a vec4, as a standalone thing like you can\n    // with all the views.\n    //\n    // Another problem with the views is they are not shared. With\n    // uniforms you have one set of setters. With UniformBlockInfo\n    // you have a set of setters *pre block instance*. That's because\n    // TypedArray views can't be mapped to different buffers.\n    //\n    // My gut right now is if you really want the speed and compactness\n    // then you should probably roll your own solution. TWGL's goal\n    // here is ease of use as AFAICT there is no simple generic efficient\n    // solution.\n\n    var setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\n    setters[name] = setter;\n    addSetterToUniformTree(name, setter, setterTree, setters);\n  });\n  return {\n    name: blockName,\n    array: array,\n    asFloat: new Float32Array(array),\n    // for debugging\n    buffer: buffer,\n    uniforms: uniforms,\n    setters: setters\n  };\n}\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\n\n\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\n\n\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  var uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  var blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n\n  if (blockSpec) {\n    var bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\n\n\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  You can also fill out structure and array values either via\n *  shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *     };\n *     uniform Lights {\n *       Light lights[2];\n *     };\n *\n *     // in JavaScript\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1] },\n *         { intensity: 2.0, color: [0, 0, 1, 1] },\n *       ],\n *     });\n *\n *     // or the more traditional way\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1]: { intensity: 5.0, color: [1, 0, 0, 1] },\n *     });\n *\n *   But you can not specify leaf array indices.\n *\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\n *  For example the actual layout of `someVec3Array` above in memory\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\n *  as shown about and copies them, skipping the padding. This might\n *  be confusing if you're already familiar with Uniform blocks.\n *\n *  If you want to deal with the padding yourself you can access the array\n *  buffer views directly. eg:\n *\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\n\n\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  var setters = uniformBlockInfo.setters;\n\n  for (var name in values) {\n    var setter = setters[name];\n\n    if (setter) {\n      var value = values[name];\n      setter(value);\n    }\n  }\n}\n\nfunction setUniformTree(tree, values) {\n  for (var name in values) {\n    var prop = tree[name];\n\n    if (typeof prop === 'function') {\n      prop(values[name]);\n    } else {\n      setUniformTree(tree[name], values[name]);\n    }\n  }\n}\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     var texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n *   You can also fill out structure and array values either via\n *   shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *     };\n *     uniform Light lights[2];\n *\n *     // in JavaScript\n *\n *     twgl.setUniforms(programInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1] },\n *         { intensity: 2.0, color: [0, 0, 1, 1] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setUniforms(programInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1]: { intensity: 5.0, color: [1, 0, 0, 1] },\n *     });\n *\n *   But you can not specify leaf array indices\n *\n * @memberOf module:twgl/programs\n */\n\n\nfunction setUniforms(setters) {\n  // eslint-disable-line\n  var actualSetters = setters.uniformSetters || setters;\n  var numArgs = arguments.length <= 1 ? 0 : arguments.length - 1;\n\n  for (var aNdx = 0; aNdx < numArgs; ++aNdx) {\n    var values = aNdx + 1 < 1 || arguments.length <= aNdx + 1 ? undefined : arguments[aNdx + 1];\n\n    if (Array.isArray(values)) {\n      var numValues = values.length;\n\n      for (var ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (var name in values) {\n        var setter = actualSetters[name];\n\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\n\n\nvar setUniformsAndBindTextures = setUniforms;\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\n\nfunction createAttributeSetters(gl, program) {\n  var attribSetters = {};\n  var numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n\n  for (var ii = 0; ii < numAttribs; ++ii) {\n    var attribInfo = gl.getActiveAttrib(program, ii);\n\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n\n    var index = gl.getAttribLocation(program, attribInfo.name);\n    var typeInfo = attrTypeMap[attribInfo.type];\n    var setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n */\n\n\nfunction setAttributes(setters, buffers) {\n  for (var name in buffers) {\n    var setter = setters[name];\n\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\n\n\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);\n    }\n  }\n}\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgramInfoFromProgram(gl, program) {\n  var uniformSetters = createUniformSetters(gl, program);\n  var attribSetters = createAttributeSetters(gl, program);\n  var programInfo = {\n    program: program,\n    uniformSetters: uniformSetters,\n    attribSetters: attribSetters\n  };\n\n  if (isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgramInfo(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  var good = true;\n  shaderSources = shaderSources.map(function (source) {\n    // Lets assume if there is no \\n it's an id\n    if (source.indexOf(\"\\n\") < 0) {\n      var script = getElementById(source);\n\n      if (!script) {\n        progOptions.errorCallback(\"no element with id: \" + source);\n        good = false;\n      } else {\n        source = script.text;\n      }\n    }\n\n    return source;\n  });\n\n  if (!good) {\n    return null;\n  }\n\n  var program = createProgramFromSources(gl, shaderSources, progOptions);\n\n  if (!program) {\n    return null;\n  }\n\n  return createProgramInfoFromProgram(gl, program);\n}\n\nvar programs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttributeSetters: createAttributeSetters,\n  createProgram: createProgram,\n  createProgramFromScripts: createProgramFromScripts,\n  createProgramFromSources: createProgramFromSources,\n  createProgramInfo: createProgramInfo,\n  createProgramInfoFromProgram: createProgramInfoFromProgram,\n  createUniformSetters: createUniformSetters,\n  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,\n  createUniformBlockInfo: createUniformBlockInfo,\n  createTransformFeedback: createTransformFeedback,\n  createTransformFeedbackInfo: createTransformFeedbackInfo,\n  bindTransformFeedbackInfo: bindTransformFeedbackInfo,\n  setAttributes: setAttributes,\n  setBuffersAndAttributes: setBuffersAndAttributes,\n  setUniforms: setUniforms,\n  setUniformsAndBindTextures: setUniformsAndBindTextures,\n  setUniformBlock: setUniformBlock,\n  setBlockUniforms: setBlockUniforms,\n  bindUniformBlock: bindUniformBlock\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nvar TRIANGLES = 0x0004;\nvar UNSIGNED_SHORT$3 = 0x1403;\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\n\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  var indices = bufferInfo.indices;\n  var elementType = bufferInfo.elementType;\n  var numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\n\n\nfunction drawObjectList(gl, objectsToDraw) {\n  var lastUsedProgramInfo = null;\n  var lastUsedBufferInfo = null;\n  objectsToDraw.forEach(function (object) {\n    if (object.active === false) {\n      return;\n    }\n\n    var programInfo = object.programInfo;\n    var bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    var bindBuffers = false;\n    var type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program); // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n\n      bindBuffers = true;\n    } // Setup all the needed attributes.\n\n\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n\n      lastUsedBufferInfo = bufferInfo;\n      setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    } // Set the uniforms.\n\n\n    setUniforms(programInfo, object.uniforms); // Draw\n\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nvar draw = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  drawBufferInfo: drawBufferInfo,\n  drawObjectList: drawObjectList\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nvar FRAMEBUFFER = 0x8d40;\nvar RENDERBUFFER = 0x8d41;\nvar TEXTURE_2D$2 = 0x0de1;\nvar UNSIGNED_BYTE$3 = 0x1401;\n/* PixelFormat */\n\nvar DEPTH_COMPONENT$1 = 0x1902;\nvar RGBA$1 = 0x1908;\nvar DEPTH_COMPONENT24$1 = 0x81a6;\nvar DEPTH_COMPONENT32F$1 = 0x8cac;\nvar DEPTH24_STENCIL8$1 = 0x88f0;\nvar DEPTH32F_STENCIL8$1 = 0x8cad;\n/* Framebuffer Object. */\n\nvar RGBA4$1 = 0x8056;\nvar RGB5_A1$1 = 0x8057;\nvar RGB565$1 = 0x8D62;\nvar DEPTH_COMPONENT16$1 = 0x81A5;\nvar STENCIL_INDEX = 0x1901;\nvar STENCIL_INDEX8 = 0x8D48;\nvar DEPTH_STENCIL$1 = 0x84F9;\nvar COLOR_ATTACHMENT0 = 0x8CE0;\nvar DEPTH_ATTACHMENT = 0x8D00;\nvar STENCIL_ATTACHMENT = 0x8D20;\nvar DEPTH_STENCIL_ATTACHMENT = 0x821A;\n/* TextureWrapMode */\n\nvar CLAMP_TO_EDGE$1 = 0x812F;\n/* TextureMagFilter */\n\nvar LINEAR$1 = 0x2601;\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nvar defaultAttachments = [{\n  format: RGBA$1,\n  type: UNSIGNED_BYTE$3,\n  min: LINEAR$1,\n  wrap: CLAMP_TO_EDGE$1\n}, {\n  format: DEPTH_STENCIL$1\n}];\nvar attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nvar renderbufferFormats = {};\nrenderbufferFormats[RGBA4$1] = true;\nrenderbufferFormats[RGB5_A1$1] = true;\nrenderbufferFormats[RGB565$1] = true;\nrenderbufferFormats[DEPTH_STENCIL$1] = true;\nrenderbufferFormats[DEPTH_COMPONENT16$1] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\n\n\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  var target = FRAMEBUFFER;\n  var fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width = width || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  var colorAttachmentCount = 0;\n  var framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height\n  };\n  attachments.forEach(function (attachmentOptions) {\n    var attachment = attachmentOptions.attachment;\n    var format = attachmentOptions.format;\n    var attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;\n    }\n\n    if (!attachment) {\n      if (isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      } else {\n        var textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR$1;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR$1;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE$1;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE$1;\n        }\n\n        attachment = createTexture(gl, textureOptions);\n      }\n    }\n\n    if (isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(target, attachmentPoint, attachment, attachmentOptions.level || 0, attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(target, attachmentPoint, attachmentOptions.target || TEXTURE_2D$2, attachment, attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n\n    framebufferInfo.attachments.push(attachment);\n  });\n  return framebufferInfo;\n}\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\n\n\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width = width || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function (attachmentOptions, ndx) {\n    var attachment = framebufferInfo.attachments[ndx];\n    var format = attachmentOptions.format;\n\n    if (isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n    } else if (isTexture(gl, attachment)) {\n      resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nvar framebuffers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bindFramebufferInfo: bindFramebufferInfo,\n  createFramebufferInfo: createFramebufferInfo,\n  resizeFramebufferInfo: resizeFramebufferInfo\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nvar ELEMENT_ARRAY_BUFFER$2 = 0x8893;\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\n\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  var vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n\n  programInfos.forEach(function (programInfo) {\n    setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao\n  };\n}\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\n\n\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  var vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  setAttributes(setters, attribs);\n\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER$2, indices);\n  } // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n\n\n  gl.bindVertexArray(null);\n  return vao;\n}\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\n\n\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nvar vertexArrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createVertexArrayInfo: createVertexArrayInfo,\n  createVAOAndSetAttributes: createVAOAndSetAttributes,\n  createVAOFromBufferInfo: createVAOFromBufferInfo\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nvar defaults$2 = {\n  addExtensionsToContext: true\n};\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\n\nfunction setDefaults$2(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$2);\n  setDefaults(newDefaults); // eslint-disable-line\n\n  setDefaults$1(newDefaults); // eslint-disable-line\n}\n\nvar prefixRE = /^(.*?)_/;\n\nfunction addExtensionToContext(gl, extensionName) {\n  glEnumToString(gl, 0);\n  var ext = gl.getExtension(extensionName);\n\n  if (ext) {\n    var enums = {};\n    var fnSuffix = prefixRE.exec(extensionName)[1];\n    var enumSuffix = '_' + fnSuffix;\n\n    for (var key in ext) {\n      var value = ext[key];\n      var isFunc = typeof value === 'function';\n      var suffix = isFunc ? fnSuffix : enumSuffix;\n      var name = key; // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function (origFn) {\n            return function () {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    } // pass the modified enums to glEnumToString\n\n\n    enums.constructor = {\n      name: ext.constructor.name\n    };\n    glEnumToString(enums, 0);\n  }\n\n  return ext;\n}\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\n\n\nvar supportedExtensions = ['ANGLE_instanced_arrays', 'EXT_blend_minmax', 'EXT_color_buffer_float', 'EXT_color_buffer_half_float', 'EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2', 'EXT_frag_depth', 'EXT_sRGB', 'EXT_shader_texture_lod', 'EXT_texture_filter_anisotropic', 'OES_element_index_uint', 'OES_standard_derivatives', 'OES_texture_float', 'OES_texture_float_linear', 'OES_texture_half_float', 'OES_texture_half_float_linear', 'OES_vertex_array_object', 'WEBGL_color_buffer_float', 'WEBGL_compressed_texture_atc', 'WEBGL_compressed_texture_etc1', 'WEBGL_compressed_texture_pvrtc', 'WEBGL_compressed_texture_s3tc', 'WEBGL_compressed_texture_s3tc_srgb', 'WEBGL_depth_texture', 'WEBGL_draw_buffers'];\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\n\nfunction addExtensionsToContext(gl) {\n  for (var ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\n\n\nfunction create3DContext(canvas, opt_attribs) {\n  var names = [\"webgl\", \"experimental-webgl\"];\n  var context = null;\n\n  for (var ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n\n      break;\n    }\n  }\n\n  return context;\n}\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\n\n\nfunction getWebGLContext(canvas, opt_attribs) {\n  var gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\n\n\nfunction createContext(canvas, opt_attribs) {\n  var names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  var context = null;\n\n  for (var ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n\n      break;\n    }\n  }\n\n  return context;\n}\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\n\n\nfunction getContext(canvas, opt_attribs) {\n  var gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\n\n\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  var width = canvas.clientWidth * multiplier | 0;\n  var height = canvas.clientHeight * multiplier | 0;\n\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n\n  return false;\n}\n\nexport { addExtensionsToContext, attributes, bindFramebufferInfo, bindTransformFeedbackInfo, bindUniformBlock, canFilter, canGenerateMipmap, createAttribsFromArrays, createAttributeSetters, createBufferFromArray, createBufferFromTypedArray, createBufferInfoFromArrays, createBuffersFromArrays, createFramebufferInfo, createProgram, createProgramFromScripts, createProgramFromSources, createProgramInfo, createProgramInfoFromProgram, createSampler, createSamplers, createTexture, createTextures, createTransformFeedback, createTransformFeedbackInfo, createUniformBlockInfo, createUniformBlockInfoFromProgram, createUniformBlockSpecFromProgram, createUniformSetters, createVAOAndSetAttributes, createVAOFromBufferInfo, createVertexArrayInfo, draw, drawBufferInfo, drawObjectList, framebuffers, getArray as getArray_, getBytesPerElementForInternalFormat, getContext, getFormatAndTypeForInternalFormat, getGLTypeForTypedArray, getGLTypeForTypedArrayType, getNumComponentsForFormat, getNumComponents as getNumComponents_, getTypedArrayTypeForGLType, getWebGLContext, glEnumToString, isArrayBuffer, isWebGL1, isWebGL2, loadTextureFromUrl, m4, primitives, programs, resizeCanvasToDisplaySize, resizeFramebufferInfo, resizeTexture, setAttribInfoBufferFromArray, setDefaults as setAttributeDefaults_, setAttributePrefix, setAttributes, setBlockUniforms, setBuffersAndAttributes, setDefaultTextureColor, setDefaults$2 as setDefaults, setEmptyTexture, setSamplerParameters, setDefaults$1 as setTextureDefaults_, setTextureFilteringForSize, setTextureFromArray, setTextureFromElement, setTextureParameters, setUniformBlock, setUniforms, setUniformsAndBindTextures, textures, typedarrays, utils, v3, vertexArrays };"],"sourceRoot":""}